<?xml version="1.0" encoding="UTF-8"?>
<!--
 This is a WordPress eXtended RSS file generated by WordPress as an export of your site.
 It contains information about your site's posts, pages, comments, categories, and other content.
 You may use this file to transfer that content from one site to another.
 This file is not intended to serve as a complete backup of your site.

 To import this information into a WordPress site follow these steps:
 1. Log in to that site as an administrator.
 2. Go to Tools: Import in the WordPress admin panel.
 3. Install the "WordPress" importer from the list.
 4. Activate & Run Importer.
 5. Upload this file using the form provided on that page.
 6. You will first be asked to map the authors in this export file to users
    on the site. For each author, you may choose to map to an
    existing user on the site or to create a new user.
 7. WordPress will then import each of the posts, pages, comments, categories, etc.
    contained in this file into your site.
-->
<!-- generator="WordPress.com" created="2015-08-05 18:01"-->
<rss version="2.0" xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:wp="http://wordpress.org/export/1.2/">
  <channel>
<title>Invisible Blocks</title>
<link>http://invisibleblocks.com</link>
<description>for building invisible machines</description>
<pubDate>Wed, 05 Aug 2015 18:01:57 +0000</pubDate>
<language>en</language>
<wp:wxr_version>1.2</wp:wxr_version>
<wp:base_site_url>http://wordpress.com/</wp:base_site_url>
<wp:base_blog_url>http://invisibleblocks.com</wp:base_blog_url>
<wp:author>
  <wp:author_login>bonsaigiant</wp:author_login>
  <wp:author_email>danbernier@gmail.com</wp:author_email>
  <wp:author_display_name><![CDATA[Daniel Bernier]]></wp:author_display_name>
  <wp:author_first_name><![CDATA[]]></wp:author_first_name>
  <wp:author_last_name><![CDATA[]]></wp:author_last_name>
</wp:author>
<wp:category>
  <wp:term_id>7215</wp:term_id>
  <wp:category_nicename>book-review</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Book Review]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>22842</wp:term_id>
  <wp:category_nicename>bookmark</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Bookmark]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>34923506</wp:term_id>
  <wp:category_nicename>conferences-2</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Conferences]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>69165640</wp:term_id>
  <wp:category_nicename>generative-art-2</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Generative Art]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>10110160</wp:term_id>
  <wp:category_nicename>hartford-ruby-brigade</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Hartford Ruby Brigade]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>264</wp:term_id>
  <wp:category_nicename>learning</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Learning]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>95563605</wp:term_id>
  <wp:category_nicename>new-haven-ruby</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[New Haven Ruby]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>226171046</wp:term_id>
  <wp:category_nicename>newhaven-io</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[NewHaven.IO]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>5310</wp:term_id>
  <wp:category_nicename>notebooks</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Notebooks]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>25</wp:term_id>
  <wp:category_nicename>open-source</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Open Source]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>3970</wp:term_id>
  <wp:category_nicename>outsourcing</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Outsourcing]]></wp:cat_name>
  <wp:category_description><![CDATA[
]]></wp:category_description>
</wp:category>
<wp:category>
  <wp:term_id>33811</wp:term_id>
  <wp:category_nicename>processing</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Processing]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>2704</wp:term_id>
  <wp:category_nicename>productivity</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Productivity]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>196</wp:term_id>
  <wp:category_nicename>programming</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Programming]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>104317584</wp:term_id>
  <wp:category_nicename>puncsig</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[puncsig]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>64178</wp:term_id>
  <wp:category_nicename>recommended-reading</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Recommended Reading]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>5874809</wp:term_id>
  <wp:category_nicename>ruby-facets-tour</wp:category_nicename>
  <wp:category_parent>programming</wp:category_parent>
  <wp:cat_name><![CDATA[Ruby Facets Tour]]></wp:cat_name>
  <wp:category_description><![CDATA[Ruby Facets is a huge library full of good stuff, but there's little documentation.  I'll cover some of the neat ones here.]]></wp:category_description>
</wp:category>
<wp:category>
  <wp:term_id>226264</wp:term_id>
  <wp:category_nicename>software-thinking</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Software Thinking]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>1981</wp:term_id>
  <wp:category_nicename>tools</wp:category_nicename>
  <wp:category_parent>programming</wp:category_parent>
  <wp:cat_name><![CDATA[Tools]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>1</wp:term_id>
  <wp:category_nicename>uncategorized</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Uncategorized]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>41587702</wp:term_id>
  <wp:category_nicename>wordcram</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[WordCram]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>116486</wp:term_id>
  <wp:category_nicename>functional-programming</wp:category_nicename>
  <wp:category_parent>programming</wp:category_parent>
  <wp:cat_name><![CDATA[Functional Programming]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>226250</wp:term_id>
  <wp:category_nicename>meta-programming</wp:category_nicename>
  <wp:category_parent>programming</wp:category_parent>
  <wp:cat_name><![CDATA[Meta-programming]]></wp:cat_name>
</wp:category>
<wp:tag>
  <wp:term_id>12238</wp:term_id>
  <wp:tag_slug>abstraction</wp:tag_slug>
  <wp:tag_name><![CDATA[abstraction]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>697645</wp:term_id>
  <wp:tag_slug>actionmailer</wp:tag_slug>
  <wp:tag_name><![CDATA[ActionMailer]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>91207</wp:term_id>
  <wp:tag_slug>average</wp:tag_slug>
  <wp:tag_name><![CDATA[average]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>158</wp:term_id>
  <wp:tag_slug>buddhism</wp:tag_slug>
  <wp:tag_name><![CDATA[Buddhism]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>2426</wp:term_id>
  <wp:tag_slug>c</wp:tag_slug>
  <wp:tag_name><![CDATA[c#]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>5741</wp:term_id>
  <wp:tag_slug>chaos</wp:tag_slug>
  <wp:tag_name><![CDATA[chaos]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>4607437</wp:term_id>
  <wp:tag_slug>claude-shannon</wp:tag_slug>
  <wp:tag_name><![CDATA[Claude Shannon]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>5738990</wp:term_id>
  <wp:tag_slug>clojure</wp:tag_slug>
  <wp:tag_name><![CDATA[clojure]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>3494</wp:term_id>
  <wp:tag_slug>complexity</wp:tag_slug>
  <wp:tag_name><![CDATA[complexity]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>102587</wp:term_id>
  <wp:tag_slug>conf</wp:tag_slug>
  <wp:tag_name><![CDATA[conf]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>9204</wp:term_id>
  <wp:tag_slug>conferences</wp:tag_slug>
  <wp:tag_name><![CDATA[conferences]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>2973425</wp:term_id>
  <wp:tag_slug>dijkstra</wp:tag_slug>
  <wp:tag_name><![CDATA[dijkstra]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>4315</wp:term_id>
  <wp:tag_slug>diy</wp:tag_slug>
  <wp:tag_name><![CDATA[diy]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>51796</wp:term_id>
  <wp:tag_slug>dvorak</wp:tag_slug>
  <wp:tag_name><![CDATA[Dvorak]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>84744470</wp:term_id>
  <wp:tag_slug>ermahgerd</wp:tag_slug>
  <wp:tag_name><![CDATA[ermahgerd]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>5510363</wp:term_id>
  <wp:tag_slug>facetstour</wp:tag_slug>
  <wp:tag_name><![CDATA[FacetsTour]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>13704</wp:term_id>
  <wp:tag_slug>fibonacci</wp:tag_slug>
  <wp:tag_name><![CDATA[fibonacci]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>27942502</wp:term_id>
  <wp:tag_slug>firebug-monaco-fonts</wp:tag_slug>
  <wp:tag_name><![CDATA[Firebug Monaco fonts]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>45251</wp:term_id>
  <wp:tag_slug>fractal</wp:tag_slug>
  <wp:tag_name><![CDATA[fractal]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>765489</wp:term_id>
  <wp:tag_slug>generative-art</wp:tag_slug>
  <wp:tag_name><![CDATA[generative art]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>1303631</wp:term_id>
  <wp:tag_slug>goruco2007</wp:tag_slug>
  <wp:tag_name><![CDATA[goruco2007]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>9445500</wp:term_id>
  <wp:tag_slug>goruco2008</wp:tag_slug>
  <wp:tag_name><![CDATA[goruco2008]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>658</wp:term_id>
  <wp:tag_slug>graphics</wp:tag_slug>
  <wp:tag_name><![CDATA[Graphics]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>61188</wp:term_id>
  <wp:tag_slug>hackers</wp:tag_slug>
  <wp:tag_name><![CDATA[Hackers]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>5517006</wp:term_id>
  <wp:tag_slug>hartfordrb</wp:tag_slug>
  <wp:tag_name><![CDATA[Hartford.rb]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>647</wp:term_id>
  <wp:tag_slug>html</wp:tag_slug>
  <wp:tag_name><![CDATA[HTML]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>16753</wp:term_id>
  <wp:tag_slug>image-processing</wp:tag_slug>
  <wp:tag_name><![CDATA[image processing]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>1061983</wp:term_id>
  <wp:tag_slug>information-hiding</wp:tag_slug>
  <wp:tag_name><![CDATA[information hiding]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>12569</wp:term_id>
  <wp:tag_slug>information-theory</wp:tag_slug>
  <wp:tag_name><![CDATA[information theory]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>84839</wp:term_id>
  <wp:tag_slug>inheritance</wp:tag_slug>
  <wp:tag_name><![CDATA[inheritance]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>457</wp:term_id>
  <wp:tag_slug>javascript</wp:tag_slug>
  <wp:tag_name><![CDATA[JavaScript]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>1114</wp:term_id>
  <wp:tag_slug>job</wp:tag_slug>
  <wp:tag_name><![CDATA[Job]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>3953156</wp:term_id>
  <wp:tag_slug>kernigan</wp:tag_slug>
  <wp:tag_name><![CDATA[kernigan]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>124</wp:term_id>
  <wp:tag_slug>life</wp:tag_slug>
  <wp:tag_name><![CDATA[Life]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>2813</wp:term_id>
  <wp:tag_slug>math</wp:tag_slug>
  <wp:tag_name><![CDATA[math]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>74170</wp:term_id>
  <wp:tag_slug>meta-blog</wp:tag_slug>
  <wp:tag_name><![CDATA[Meta-blog]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>1050256</wp:term_id>
  <wp:tag_slug>moleskine-notebook</wp:tag_slug>
  <wp:tag_name><![CDATA[moleskine notebook]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>16192542</wp:term_id>
  <wp:tag_slug>nature-of-code</wp:tag_slug>
  <wp:tag_name><![CDATA[Nature of Code]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>45247</wp:term_id>
  <wp:tag_slug>order</wp:tag_slug>
  <wp:tag_name><![CDATA[order]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>79425</wp:term_id>
  <wp:tag_slug>paul-graham</wp:tag_slug>
  <wp:tag_name><![CDATA[paul graham]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>24153</wp:term_id>
  <wp:tag_slug>perception</wp:tag_slug>
  <wp:tag_name><![CDATA[perception]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>35030437</wp:term_id>
  <wp:tag_slug>processing-2</wp:tag_slug>
  <wp:tag_name><![CDATA[processing]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>597693</wp:term_id>
  <wp:tag_slug>raganwald</wp:tag_slug>
  <wp:tag_name><![CDATA[raganwald]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>6652</wp:term_id>
  <wp:tag_slug>rails</wp:tag_slug>
  <wp:tag_name><![CDATA[rails]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>54712</wp:term_id>
  <wp:tag_slug>refactoring</wp:tag_slug>
  <wp:tag_name><![CDATA[refactoring]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>44443</wp:term_id>
  <wp:tag_slug>regular-expressions</wp:tag_slug>
  <wp:tag_name><![CDATA[regular expressions]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>4872</wp:term_id>
  <wp:tag_slug>ruby</wp:tag_slug>
  <wp:tag_name><![CDATA[Ruby]]></wp:tag_name>
  <wp:tag_description><![CDATA[
]]></wp:tag_description>
</wp:tag>
<wp:tag>
  <wp:term_id>14858162</wp:term_id>
  <wp:tag_slug>ruby-c-javascript</wp:tag_slug>
  <wp:tag_name><![CDATA[ruby c# javascript]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>5517047</wp:term_id>
  <wp:tag_slug>rubyfacets</wp:tag_slug>
  <wp:tag_name><![CDATA[RubyFacets]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>32340</wp:term_id>
  <wp:tag_slug>scheme</wp:tag_slug>
  <wp:tag_name><![CDATA[scheme]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>6590080</wp:term_id>
  <wp:tag_slug>semantic-compression</wp:tag_slug>
  <wp:tag_name><![CDATA[semantic compression]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>3958676</wp:term_id>
  <wp:tag_slug>separation-of-concerns</wp:tag_slug>
  <wp:tag_name><![CDATA[separation of concerns]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>3953157</wp:term_id>
  <wp:tag_slug>seven-plus-or-minus-two</wp:tag_slug>
  <wp:tag_name><![CDATA[seven plus or minus two]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>81412</wp:term_id>
  <wp:tag_slug>sicp</wp:tag_slug>
  <wp:tag_name><![CDATA[sicp]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>17266</wp:term_id>
  <wp:tag_slug>simplicity</wp:tag_slug>
  <wp:tag_name><![CDATA[simplicity]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>217164784</wp:term_id>
  <wp:tag_slug>supercollider-overtone-chuck-ubuntu-crunchbang</wp:tag_slug>
  <wp:tag_name><![CDATA[supercollider overtone chuck ubuntu crunchbang]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>45248</wp:term_id>
  <wp:tag_slug>symmetry</wp:tag_slug>
  <wp:tag_name><![CDATA[symmetry]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>4896</wp:term_id>
  <wp:tag_slug>weird</wp:tag_slug>
  <wp:tag_name><![CDATA[Weird]]></wp:tag_name>
</wp:tag>
<generator>http://wordpress.com/</generator>
<image>
  <url>https://s2.wp.com/i/buttonw-com.png</url>
  <title> &#187; Invisible Blocks</title>
  <link>http://invisibleblocks.com</link>
</image>
<item>
  <title>DOM Hacking examples</title>
  <link>http://invisibleblocks.com/2006/03/06/examples-of-dom-hacking/dom-hacking-examples/</link>
  <pubDate>Fri, 14 Jul 2006 03:49:25 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.wordpress.com/files/2006/07/domhacking.txt</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>36</wp:post_id>
  <wp:post_date>2006-07-13 23:49:25</wp:post_date>
  <wp:post_date_gmt>2006-07-14 03:49:25</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>dom-hacking-examples</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>29</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://invisibleblocks.files.wordpress.com/2006/07/domhacking.txt</wp:attachment_url>
</item>
<item>
  <title>froggy.jpg</title>
  <link>http://invisibleblocks.com/?attachment_id=37</link>
  <pubDate>Tue, 18 Jul 2006 14:26:29 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.wordpress.com/files/2006/07/froggy.jpg</guid>
  <description/>
  <content:encoded><![CDATA[http://invisibleblocks.files.wordpress.com/2006/07/froggy.jpg]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>37</wp:post_id>
  <wp:post_date>2006-07-18 10:26:29</wp:post_date>
  <wp:post_date_gmt>2006-07-18 14:26:29</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>froggyjpg</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://invisibleblocks.files.wordpress.com/2006/07/froggy.jpg</wp:attachment_url>
</item>
<item>
  <title>My new desk</title>
  <link>http://invisibleblocks.com/?attachment_id=41#main</link>
  <pubDate>Tue, 03 Oct 2006 13:46:46 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.wordpress.com/files/2006/10/new_desk.jpg</guid>
  <description/>
  <content:encoded><![CDATA[I can't wait to hang some of my photographs on the brick wall.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>41</wp:post_id>
  <wp:post_date>2006-10-03 09:46:46</wp:post_date>
  <wp:post_date_gmt>2006-10-03 13:46:46</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>my-new-desk</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>40</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://invisibleblocks.files.wordpress.com/2006/10/new_desk.jpg</wp:attachment_url>
</item>
<item>
  <title>The view</title>
  <link>http://invisibleblocks.com/2006/10/03/in-the-new-office/the-view/#main</link>
  <pubDate>Tue, 03 Oct 2006 13:49:59 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.wordpress.com/files/2006/10/the_view.jpg</guid>
  <description/>
  <content:encoded><![CDATA[The old building dominates the bottom half, but I tend to look right past it.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>42</wp:post_id>
  <wp:post_date>2006-10-03 09:49:59</wp:post_date>
  <wp:post_date_gmt>2006-10-03 13:49:59</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>the-view</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>40</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://invisibleblocks.files.wordpress.com/2006/10/the_view.jpg</wp:attachment_url>
</item>
<item>
  <title>Original Frog photo</title>
  <link>http://invisibleblocks.com/?attachment_id=44</link>
  <pubDate>Wed, 11 Oct 2006 20:55:58 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.wordpress.com/files/2006/10/frog-small.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>44</wp:post_id>
  <wp:post_date>2006-10-11 16:55:58</wp:post_date>
  <wp:post_date_gmt>2006-10-11 20:55:58</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>original-frog-photo</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://invisibleblocks.files.wordpress.com/2006/10/frog-small.jpg</wp:attachment_url>
</item>
<item>
  <title>froggy_header.jpg</title>
  <link>http://invisibleblocks.com/?attachment_id=65</link>
  <pubDate>Thu, 01 Nov 2007 18:13:38 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.files.wordpress.com/2007/11/froggy_header.jpg</guid>
  <description/>
  <content:encoded><![CDATA[http://invisibleblocks.files.wordpress.com/2007/11/froggy_header.jpg]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>65</wp:post_id>
  <wp:post_date>2007-11-01 14:13:38</wp:post_date>
  <wp:post_date_gmt>2007-11-01 18:13:38</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>froggy_headerjpg</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://invisibleblocks.files.wordpress.com/2007/11/froggy_header.jpg</wp:attachment_url>
</item>
<item>
  <title>froggy_header2.jpg</title>
  <link>http://invisibleblocks.com/?attachment_id=66</link>
  <pubDate>Thu, 01 Nov 2007 18:21:28 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.files.wordpress.com/2007/11/froggy_header2.jpg</guid>
  <description/>
  <content:encoded><![CDATA[http://invisibleblocks.files.wordpress.com/2007/11/froggy_header2.jpg]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>66</wp:post_id>
  <wp:post_date>2007-11-01 14:21:28</wp:post_date>
  <wp:post_date_gmt>2007-11-01 18:21:28</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>froggy_header2jpg</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://invisibleblocks.files.wordpress.com/2007/11/froggy_header2.jpg</wp:attachment_url>
</item>
<item>
  <title>delicious-wordle2-resized.jpg</title>
  <link>http://invisibleblocks.com/?attachment_id=110</link>
  <pubDate>Sat, 02 Aug 2008 23:29:59 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.files.wordpress.com/2008/08/delicious-wordle2-resized.jpg</guid>
  <description/>
  <content:encoded><![CDATA[http://invisibleblocks.files.wordpress.com/2008/08/delicious-wordle2-resized.jpg]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>110</wp:post_id>
  <wp:post_date>2008-08-02 19:29:59</wp:post_date>
  <wp:post_date_gmt>2008-08-02 23:29:59</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>delicious-wordle2-resizedjpg</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://invisibleblocks.files.wordpress.com/2008/08/delicious-wordle2-resized.jpg</wp:attachment_url>
</item>
<item>
  <title>froggy_header2.jpg</title>
  <link>http://invisibleblocks.com/?attachment_id=111</link>
  <pubDate>Sat, 02 Aug 2008 23:30:34 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.files.wordpress.com/2008/08/froggy_header2.jpg</guid>
  <description/>
  <content:encoded><![CDATA[http://invisibleblocks.files.wordpress.com/2008/08/froggy_header2.jpg]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>111</wp:post_id>
  <wp:post_date>2008-08-02 19:30:34</wp:post_date>
  <wp:post_date_gmt>2008-08-02 23:30:34</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>froggy_header2jpg-2</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://invisibleblocks.files.wordpress.com/2008/08/froggy_header2.jpg</wp:attachment_url>
</item>
<item>
  <title>datetime</title>
  <link>http://invisibleblocks.com/2008/08/18/working-faster-avoiding-the-mouse/datetime/#main</link>
  <pubDate>Mon, 18 Aug 2008 15:19:04 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.files.wordpress.com/2008/08/datetime.gif</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>119</wp:post_id>
  <wp:post_date>2008-08-18 11:19:04</wp:post_date>
  <wp:post_date_gmt>2008-08-18 15:19:04</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>datetime</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>113</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://invisibleblocks.files.wordpress.com/2008/08/datetime.gif</wp:attachment_url>
</item>
<item>
  <title>filesystem_completion</title>
  <link>http://invisibleblocks.com/2008/08/18/working-faster-avoiding-the-mouse/filesystem_completion/#main</link>
  <pubDate>Mon, 18 Aug 2008 15:19:07 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.files.wordpress.com/2008/08/filesystem_completion.gif</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>120</wp:post_id>
  <wp:post_date>2008-08-18 11:19:07</wp:post_date>
  <wp:post_date_gmt>2008-08-18 15:19:07</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>filesystem_completion</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>113</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://invisibleblocks.files.wordpress.com/2008/08/filesystem_completion.gif</wp:attachment_url>
</item>
<item>
  <title>long_magic_words_are_great</title>
  <link>http://invisibleblocks.com/2008/08/18/working-faster-avoiding-the-mouse/long_magic_words_are_great/#main</link>
  <pubDate>Mon, 18 Aug 2008 15:19:11 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.files.wordpress.com/2008/08/long_magic_words_are_great.gif</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>121</wp:post_id>
  <wp:post_date>2008-08-18 11:19:11</wp:post_date>
  <wp:post_date_gmt>2008-08-18 15:19:11</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>long_magic_words_are_great</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>113</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://invisibleblocks.files.wordpress.com/2008/08/long_magic_words_are_great.gif</wp:attachment_url>
</item>
<item>
  <title>parameters</title>
  <link>http://invisibleblocks.com/2008/08/18/working-faster-avoiding-the-mouse/parameters/#main</link>
  <pubDate>Mon, 18 Aug 2008 15:39:33 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.files.wordpress.com/2008/08/parameters.gif</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>122</wp:post_id>
  <wp:post_date>2008-08-18 11:39:33</wp:post_date>
  <wp:post_date_gmt>2008-08-18 15:39:33</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>parameters</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>113</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://invisibleblocks.files.wordpress.com/2008/08/parameters.gif</wp:attachment_url>
</item>
<item>
  <title>1</title>
  <link>http://invisibleblocks.com/?attachment_id=202#main</link>
  <pubDate>Wed, 07 Jan 2009 01:59:10 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.files.wordpress.com/2009/01/1.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>202</wp:post_id>
  <wp:post_date>2009-01-06 21:59:10</wp:post_date>
  <wp:post_date_gmt>2009-01-07 01:59:10</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>1</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>198</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://invisibleblocks.files.wordpress.com/2009/01/1.jpg</wp:attachment_url>
</item>
<item>
  <title>2</title>
  <link>http://invisibleblocks.com/?attachment_id=203#main</link>
  <pubDate>Wed, 07 Jan 2009 01:59:11 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.files.wordpress.com/2009/01/2.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>203</wp:post_id>
  <wp:post_date>2009-01-06 21:59:11</wp:post_date>
  <wp:post_date_gmt>2009-01-07 01:59:11</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>2</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>198</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://invisibleblocks.files.wordpress.com/2009/01/2.jpg</wp:attachment_url>
</item>
<item>
  <title>3</title>
  <link>http://invisibleblocks.com/?attachment_id=204#main</link>
  <pubDate>Wed, 07 Jan 2009 01:59:13 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.files.wordpress.com/2009/01/3.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>204</wp:post_id>
  <wp:post_date>2009-01-06 21:59:13</wp:post_date>
  <wp:post_date_gmt>2009-01-07 01:59:13</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>3</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>198</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://invisibleblocks.files.wordpress.com/2009/01/3.jpg</wp:attachment_url>
</item>
<item>
  <title>4</title>
  <link>http://invisibleblocks.com/?attachment_id=205#main</link>
  <pubDate>Wed, 07 Jan 2009 01:59:15 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.files.wordpress.com/2009/01/4.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>205</wp:post_id>
  <wp:post_date>2009-01-06 21:59:15</wp:post_date>
  <wp:post_date_gmt>2009-01-07 01:59:15</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>4</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>198</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://invisibleblocks.files.wordpress.com/2009/01/4.jpg</wp:attachment_url>
</item>
<item>
  <title>5</title>
  <link>http://invisibleblocks.com/?attachment_id=206#main</link>
  <pubDate>Wed, 07 Jan 2009 01:59:16 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.files.wordpress.com/2009/01/5.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>206</wp:post_id>
  <wp:post_date>2009-01-06 21:59:16</wp:post_date>
  <wp:post_date_gmt>2009-01-07 01:59:16</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>5</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>198</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://invisibleblocks.files.wordpress.com/2009/01/5.jpg</wp:attachment_url>
</item>
<item>
  <title>6</title>
  <link>http://invisibleblocks.com/?attachment_id=207#main</link>
  <pubDate>Wed, 07 Jan 2009 01:59:18 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.files.wordpress.com/2009/01/6.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>207</wp:post_id>
  <wp:post_date>2009-01-06 21:59:18</wp:post_date>
  <wp:post_date_gmt>2009-01-07 01:59:18</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>6</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>198</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://invisibleblocks.files.wordpress.com/2009/01/6.jpg</wp:attachment_url>
</item>
<item>
  <title>7</title>
  <link>http://invisibleblocks.com/?attachment_id=208#main</link>
  <pubDate>Wed, 07 Jan 2009 01:59:19 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.files.wordpress.com/2009/01/7.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>208</wp:post_id>
  <wp:post_date>2009-01-06 21:59:19</wp:post_date>
  <wp:post_date_gmt>2009-01-07 01:59:19</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>7</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>198</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://invisibleblocks.files.wordpress.com/2009/01/7.jpg</wp:attachment_url>
</item>
<item>
  <title>8</title>
  <link>http://invisibleblocks.com/?attachment_id=209#main</link>
  <pubDate>Wed, 07 Jan 2009 01:59:20 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.files.wordpress.com/2009/01/8.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>209</wp:post_id>
  <wp:post_date>2009-01-06 21:59:20</wp:post_date>
  <wp:post_date_gmt>2009-01-07 01:59:20</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>8</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>198</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://invisibleblocks.files.wordpress.com/2009/01/8.jpg</wp:attachment_url>
</item>
<item>
  <title>9</title>
  <link>http://invisibleblocks.com/?attachment_id=210#main</link>
  <pubDate>Wed, 07 Jan 2009 01:59:22 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.files.wordpress.com/2009/01/9.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>210</wp:post_id>
  <wp:post_date>2009-01-06 21:59:22</wp:post_date>
  <wp:post_date_gmt>2009-01-07 01:59:22</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>9</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>198</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://invisibleblocks.files.wordpress.com/2009/01/9.jpg</wp:attachment_url>
</item>
<item>
  <title>emacs cheat sheet</title>
  <link>http://invisibleblocks.com/2009/04/15/book-review-pragmatic-thinking-and-learning/emacs_cheat_sheet/#main</link>
  <pubDate>Wed, 15 Apr 2009 20:43:10 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.files.wordpress.com/2009/04/emacs_cheat_sheet.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>245</wp:post_id>
  <wp:post_date>2009-04-15 16:43:10</wp:post_date>
  <wp:post_date_gmt>2009-04-15 20:43:10</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>emacs_cheat_sheet</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>230</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://invisibleblocks.files.wordpress.com/2009/04/emacs_cheat_sheet.jpg</wp:attachment_url>
</item>
<item>
  <title>tattoo</title>
  <link>http://invisibleblocks.com/2009/05/04/higher-order-functions-and-function-composition-with-processing/tattoo/#main</link>
  <pubDate>Fri, 01 May 2009 19:12:49 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.files.wordpress.com/2009/05/tattoo.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[the original image]]></excerpt:encoded>
  <wp:post_id>265</wp:post_id>
  <wp:post_date>2009-05-01 15:12:49</wp:post_date>
  <wp:post_date_gmt>2009-05-01 19:12:49</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>tattoo</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>250</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://invisibleblocks.files.wordpress.com/2009/05/tattoo.jpg</wp:attachment_url>
</item>
<item>
  <title>tattoo_grayscale</title>
  <link>http://invisibleblocks.com/2009/05/04/higher-order-functions-and-function-composition-with-processing/tattoo_grayscale/#main</link>
  <pubDate>Fri, 01 May 2009 19:13:14 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.files.wordpress.com/2009/05/tattoo_grayscale.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[the image in grayscale]]></excerpt:encoded>
  <wp:post_id>266</wp:post_id>
  <wp:post_date>2009-05-01 15:13:14</wp:post_date>
  <wp:post_date_gmt>2009-05-01 19:13:14</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>tattoo_grayscale</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>250</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://invisibleblocks.files.wordpress.com/2009/05/tattoo_grayscale.jpg</wp:attachment_url>
</item>
<item>
  <title>tattoo_grayscale_invert</title>
  <link>http://invisibleblocks.com/?attachment_id=267</link>
  <pubDate>Fri, 01 May 2009 19:13:53 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.files.wordpress.com/2009/05/tattoo_grayscale_invert.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>267</wp:post_id>
  <wp:post_date>2009-05-01 15:13:53</wp:post_date>
  <wp:post_date_gmt>2009-05-01 19:13:53</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>tattoo_grayscale_invert</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://invisibleblocks.files.wordpress.com/2009/05/tattoo_grayscale_invert.jpg</wp:attachment_url>
</item>
<item>
  <title>tattoo_invert</title>
  <link>http://invisibleblocks.com/2009/05/04/higher-order-functions-and-function-composition-with-processing/tattoo_invert/#main</link>
  <pubDate>Fri, 01 May 2009 19:14:55 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.files.wordpress.com/2009/05/tattoo_invert.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[inverted, like a negative]]></excerpt:encoded>
  <wp:post_id>268</wp:post_id>
  <wp:post_date>2009-05-01 15:14:55</wp:post_date>
  <wp:post_date_gmt>2009-05-01 19:14:55</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>tattoo_invert</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>250</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://invisibleblocks.files.wordpress.com/2009/05/tattoo_invert.jpg</wp:attachment_url>
</item>
<item>
  <title>Firebug and Monaco on Vista</title>
  <link>http://invisibleblocks.com/2009/11/20/firebug-and-monaco-on-windows/firebug-monaco-vista-3/#main</link>
  <pubDate>Fri, 20 Nov 2009 22:04:08 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.files.wordpress.com/2009/11/firebug-monaco-vista2.gif</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>361</wp:post_id>
  <wp:post_date>2009-11-20 18:04:08</wp:post_date>
  <wp:post_date_gmt>2009-11-20 22:04:08</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>firebug-monaco-vista-3</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>351</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://invisibleblocks.files.wordpress.com/2009/11/firebug-monaco-vista2.gif</wp:attachment_url>
</item>
<item>
  <title>img_2857-small</title>
  <link>http://invisibleblocks.com/2010/07/28/after-oscon-2010/img_2857-small/#main</link>
  <pubDate>Wed, 28 Jul 2010 02:22:13 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.files.wordpress.com/2010/07/img_2857-small.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>447</wp:post_id>
  <wp:post_date>2010-07-27 22:22:13</wp:post_date>
  <wp:post_date_gmt>2010-07-28 02:22:13</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>img_2857-small</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>445</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://invisibleblocks.files.wordpress.com/2010/07/img_2857-small.jpg</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_image_alt</wp:meta_key>
    <wp:meta_value><![CDATA[my badge]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>img_2860-small</title>
  <link>http://invisibleblocks.com/2010/07/28/after-oscon-2010/img_2860-small/#main</link>
  <pubDate>Wed, 28 Jul 2010 02:22:26 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.files.wordpress.com/2010/07/img_2860-small.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>448</wp:post_id>
  <wp:post_date>2010-07-27 22:22:26</wp:post_date>
  <wp:post_date_gmt>2010-07-28 02:22:26</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>img_2860-small</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>445</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://invisibleblocks.files.wordpress.com/2010/07/img_2860-small.jpg</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_image_alt</wp:meta_key>
    <wp:meta_value><![CDATA[I'm a book fiend]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>checked_box</title>
  <link>http://invisibleblocks.com/2011/08/17/redder-pastures/checked_box/#main</link>
  <pubDate>Thu, 18 Aug 2011 01:38:25 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.files.wordpress.com/2011/08/checked_box.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>473</wp:post_id>
  <wp:post_date>2011-08-17 21:38:25</wp:post_date>
  <wp:post_date_gmt>2011-08-18 01:38:25</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>checked_box</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>470</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://invisibleblocks.files.wordpress.com/2011/08/checked_box.jpg</wp:attachment_url>
</item>
<item>
  <title>Moleskine notebook, covered in brown paper</title>
  <link>http://invisibleblocks.com/2012/02/21/cover-your-moleskine-in-brown-paper/finished-moleskine/#main</link>
  <pubDate>Tue, 21 Feb 2012 01:53:18 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.files.wordpress.com/2012/02/finished-moleskine.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>502</wp:post_id>
  <wp:post_date>2012-02-20 21:53:18</wp:post_date>
  <wp:post_date_gmt>2012-02-21 01:53:18</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>finished-moleskine</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>501</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://invisibleblocks.files.wordpress.com/2012/02/finished-moleskine.jpg</wp:attachment_url>
</item>
<item>
  <title>Materials</title>
  <link>http://invisibleblocks.com/2012/02/21/cover-your-moleskine-in-brown-paper/moleskine-materials/#main</link>
  <pubDate>Tue, 21 Feb 2012 01:59:04 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.files.wordpress.com/2012/02/moleskine-materials.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>503</wp:post_id>
  <wp:post_date>2012-02-20 21:59:04</wp:post_date>
  <wp:post_date_gmt>2012-02-21 01:59:04</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>moleskine-materials</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>501</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://invisibleblocks.files.wordpress.com/2012/02/moleskine-materials.jpg</wp:attachment_url>
</item>
<item>
  <title>notebook-on-folded-paper</title>
  <link>http://invisibleblocks.com/2012/02/21/cover-your-moleskine-in-brown-paper/notebook-on-folded-paper/#main</link>
  <pubDate>Tue, 21 Feb 2012 02:09:43 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.files.wordpress.com/2012/02/notebook-on-folded-paper.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>504</wp:post_id>
  <wp:post_date>2012-02-20 22:09:43</wp:post_date>
  <wp:post_date_gmt>2012-02-21 02:09:43</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>notebook-on-folded-paper</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>501</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://invisibleblocks.files.wordpress.com/2012/02/notebook-on-folded-paper.jpg</wp:attachment_url>
</item>
<item>
  <title>just-enough-paper</title>
  <link>http://invisibleblocks.com/2012/02/21/cover-your-moleskine-in-brown-paper/just-enough-paper/#main</link>
  <pubDate>Tue, 21 Feb 2012 02:15:13 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.files.wordpress.com/2012/02/just-enough-paper.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>505</wp:post_id>
  <wp:post_date>2012-02-20 22:15:13</wp:post_date>
  <wp:post_date_gmt>2012-02-21 02:15:13</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>just-enough-paper</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>501</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://invisibleblocks.files.wordpress.com/2012/02/just-enough-paper.jpg</wp:attachment_url>
</item>
<item>
  <title>too-much-paper</title>
  <link>http://invisibleblocks.com/2012/02/21/cover-your-moleskine-in-brown-paper/too-much-paper/#main</link>
  <pubDate>Tue, 21 Feb 2012 02:15:16 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.files.wordpress.com/2012/02/too-much-paper.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>506</wp:post_id>
  <wp:post_date>2012-02-20 22:15:16</wp:post_date>
  <wp:post_date_gmt>2012-02-21 02:15:16</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>too-much-paper</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>501</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://invisibleblocks.files.wordpress.com/2012/02/too-much-paper.jpg</wp:attachment_url>
</item>
<item>
  <title>measurments</title>
  <link>http://invisibleblocks.com/2012/02/21/cover-your-moleskine-in-brown-paper/measurments/#main</link>
  <pubDate>Tue, 21 Feb 2012 02:29:22 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.files.wordpress.com/2012/02/measurments.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>507</wp:post_id>
  <wp:post_date>2012-02-20 22:29:22</wp:post_date>
  <wp:post_date_gmt>2012-02-21 02:29:22</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>measurments</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>501</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://invisibleblocks.files.wordpress.com/2012/02/measurments.jpg</wp:attachment_url>
</item>
<item>
  <title>where-to-cut</title>
  <link>http://invisibleblocks.com/2012/02/21/cover-your-moleskine-in-brown-paper/where-to-cut-2/#main</link>
  <pubDate>Tue, 21 Feb 2012 02:45:22 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.files.wordpress.com/2012/02/where-to-cut2.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>510</wp:post_id>
  <wp:post_date>2012-02-20 22:45:22</wp:post_date>
  <wp:post_date_gmt>2012-02-21 02:45:22</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>where-to-cut-2</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>501</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://invisibleblocks.files.wordpress.com/2012/02/where-to-cut2.jpg</wp:attachment_url>
</item>
<item>
  <title>cut-results</title>
  <link>http://invisibleblocks.com/2012/02/21/cover-your-moleskine-in-brown-paper/cut-results/#main</link>
  <pubDate>Tue, 21 Feb 2012 02:45:33 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.files.wordpress.com/2012/02/cut-results.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>511</wp:post_id>
  <wp:post_date>2012-02-20 22:45:33</wp:post_date>
  <wp:post_date_gmt>2012-02-21 02:45:33</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>cut-results</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>501</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://invisibleblocks.files.wordpress.com/2012/02/cut-results.jpg</wp:attachment_url>
</item>
<item>
  <title>Elastic sticking through the slits</title>
  <link>http://invisibleblocks.com/2012/02/21/cover-your-moleskine-in-brown-paper/img_3762/#main</link>
  <pubDate>Tue, 21 Feb 2012 03:06:37 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.files.wordpress.com/2012/02/img_3762.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>512</wp:post_id>
  <wp:post_date>2012-02-20 23:06:37</wp:post_date>
  <wp:post_date_gmt>2012-02-21 03:06:37</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>img_3762</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>501</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://invisibleblocks.files.wordpress.com/2012/02/img_3762.jpg</wp:attachment_url>
</item>
<item>
  <title>cut-results</title>
  <link>http://invisibleblocks.com/2012/02/21/cover-your-moleskine-in-brown-paper/cut-results-2/#main</link>
  <pubDate>Tue, 21 Feb 2012 03:15:12 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.files.wordpress.com/2012/02/cut-results1.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>513</wp:post_id>
  <wp:post_date>2012-02-20 23:15:12</wp:post_date>
  <wp:post_date_gmt>2012-02-21 03:15:12</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>cut-results-2</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>501</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://invisibleblocks.files.wordpress.com/2012/02/cut-results1.jpg</wp:attachment_url>
</item>
<item>
  <title>putting-it-together</title>
  <link>http://invisibleblocks.com/2012/02/21/cover-your-moleskine-in-brown-paper/putting-it-together/#main</link>
  <pubDate>Tue, 21 Feb 2012 03:22:10 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.files.wordpress.com/2012/02/putting-it-together.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>514</wp:post_id>
  <wp:post_date>2012-02-20 23:22:10</wp:post_date>
  <wp:post_date_gmt>2012-02-21 03:22:10</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>putting-it-together</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>501</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://invisibleblocks.files.wordpress.com/2012/02/putting-it-together.jpg</wp:attachment_url>
</item>
<item>
  <title>putting-it-together-2</title>
  <link>http://invisibleblocks.com/2012/02/21/cover-your-moleskine-in-brown-paper/putting-it-together-2/#main</link>
  <pubDate>Tue, 21 Feb 2012 03:30:30 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.files.wordpress.com/2012/02/putting-it-together-2.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>515</wp:post_id>
  <wp:post_date>2012-02-20 23:30:30</wp:post_date>
  <wp:post_date_gmt>2012-02-21 03:30:30</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>putting-it-together-2</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>501</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://invisibleblocks.files.wordpress.com/2012/02/putting-it-together-2.jpg</wp:attachment_url>
</item>
<item>
  <title>back-pocket</title>
  <link>http://invisibleblocks.com/2012/02/21/cover-your-moleskine-in-brown-paper/back-pocket/#main</link>
  <pubDate>Tue, 21 Feb 2012 03:42:45 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.files.wordpress.com/2012/02/back-pocket.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>516</wp:post_id>
  <wp:post_date>2012-02-20 23:42:45</wp:post_date>
  <wp:post_date_gmt>2012-02-21 03:42:45</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>back-pocket</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>501</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://invisibleblocks.files.wordpress.com/2012/02/back-pocket.jpg</wp:attachment_url>
</item>
<item>
  <title>front-pocket</title>
  <link>http://invisibleblocks.com/2012/02/21/cover-your-moleskine-in-brown-paper/front-pocket/#main</link>
  <pubDate>Tue, 21 Feb 2012 03:42:48 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.files.wordpress.com/2012/02/front-pocket.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>517</wp:post_id>
  <wp:post_date>2012-02-20 23:42:48</wp:post_date>
  <wp:post_date_gmt>2012-02-21 03:42:48</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>front-pocket</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>501</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://invisibleblocks.files.wordpress.com/2012/02/front-pocket.jpg</wp:attachment_url>
</item>
<item>
  <title>New Haven Rubyist Denis</title>
  <link>http://invisibleblocks.com/2012/06/09/new-haven-ruby-first-thursday-third-wednesday/photo/#main</link>
  <pubDate>Fri, 08 Jun 2012 17:21:11 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.files.wordpress.com/2012/06/photo.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>562</wp:post_id>
  <wp:post_date>2012-06-08 13:21:11</wp:post_date>
  <wp:post_date_gmt>2012-06-08 17:21:11</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>photo</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>539</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://invisibleblocks.files.wordpress.com/2012/06/photo.jpg</wp:attachment_url>
</item>
<item>
  <title>june-thursday-hacknight</title>
  <link>http://invisibleblocks.com/2012/06/09/new-haven-ruby-first-thursday-third-wednesday/june-thursday-hacknight/#main</link>
  <pubDate>Fri, 08 Jun 2012 17:39:18 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.files.wordpress.com/2012/06/june-thursday-hacknight.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>569</wp:post_id>
  <wp:post_date>2012-06-08 13:39:18</wp:post_date>
  <wp:post_date_gmt>2012-06-08 17:39:18</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>june-thursday-hacknight</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>539</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://invisibleblocks.files.wordpress.com/2012/06/june-thursday-hacknight.jpg</wp:attachment_url>
</item>
<item>
  <title>One of Zach's slides: reaching your software's critical point</title>
  <link>http://invisibleblocks.com/2012/09/10/chaos-order-and-software-development/zach-slide-critical-point/#main</link>
  <pubDate>Mon, 10 Sep 2012 22:16:36 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.files.wordpress.com/2012/09/zach-slide-critical-point.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>620</wp:post_id>
  <wp:post_date>2012-09-10 18:16:36</wp:post_date>
  <wp:post_date_gmt>2012-09-10 22:16:36</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>zach-slide-critical-point</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>559</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://invisibleblocks.files.wordpress.com/2012/09/zach-slide-critical-point.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_image_alt</wp:meta_key>
    <wp:meta_value><![CDATA[One of Zach's slides: reaching your software's critical point]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>smiley</title>
  <link>http://invisibleblocks.com/2013/12/31/book-review-the-information-by-james-gleick/smiley/#main</link>
  <pubDate>Wed, 26 Sep 2012 09:43:02 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.files.wordpress.com/2012/09/smiley.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>625</wp:post_id>
  <wp:post_date>2012-09-26 05:43:02</wp:post_date>
  <wp:post_date_gmt>2012-09-26 09:43:02</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>smiley</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>624</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://invisibleblocks.files.wordpress.com/2012/09/smiley.png</wp:attachment_url>
</item>
<item>
  <title>smiley-code</title>
  <link>http://invisibleblocks.com/2013/12/31/book-review-the-information-by-james-gleick/smiley-code/#main</link>
  <pubDate>Wed, 26 Sep 2012 09:47:36 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.files.wordpress.com/2012/09/smiley-code.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>626</wp:post_id>
  <wp:post_date>2012-09-26 05:47:36</wp:post_date>
  <wp:post_date_gmt>2012-09-26 09:47:36</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>smiley-code</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>624</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://invisibleblocks.files.wordpress.com/2012/09/smiley-code.png</wp:attachment_url>
</item>
<item>
  <title>Hey Dawkins! Thanks for all the memes!</title>
  <link>http://invisibleblocks.com/2013/12/31/book-review-the-information-by-james-gleick/dawkins/#main</link>
  <pubDate>Wed, 26 Sep 2012 11:32:33 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.files.wordpress.com/2012/09/dawkins.jpeg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>631</wp:post_id>
  <wp:post_date>2012-09-26 07:32:33</wp:post_date>
  <wp:post_date_gmt>2012-09-26 11:32:33</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>dawkins</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>624</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://invisibleblocks.files.wordpress.com/2012/09/dawkins.jpeg</wp:attachment_url>
</item>
<item>
  <title>the-information-cover</title>
  <link>http://invisibleblocks.com/2013/12/31/book-review-the-information-by-james-gleick/the-information-cover/#main</link>
  <pubDate>Mon, 01 Oct 2012 23:38:15 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.files.wordpress.com/2012/10/the-information-cover.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>636</wp:post_id>
  <wp:post_date>2012-10-01 19:38:15</wp:post_date>
  <wp:post_date_gmt>2012-10-01 23:38:15</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>the-information-cover</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>624</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://invisibleblocks.files.wordpress.com/2012/10/the-information-cover.png</wp:attachment_url>
</item>
<item>
  <title>symmetrical-faces</title>
  <link>http://invisibleblocks.com/2012/10/01/symmetrical-portraits-undone/symmetrical-faces/#main</link>
  <pubDate>Tue, 02 Oct 2012 01:36:16 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.files.wordpress.com/2012/10/symmetrical-faces.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>642</wp:post_id>
  <wp:post_date>2012-10-01 21:36:16</wp:post_date>
  <wp:post_date_gmt>2012-10-02 01:36:16</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>symmetrical-faces</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>641</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://invisibleblocks.files.wordpress.com/2012/10/symmetrical-faces.png</wp:attachment_url>
</item>
<item>
  <title>fixed_01_v2</title>
  <link>http://invisibleblocks.com/2012/10/01/symmetrical-portraits-undone/fixed_01_v2/#main</link>
  <pubDate>Tue, 02 Oct 2012 01:44:06 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.files.wordpress.com/2012/10/fixed_01_v2.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>643</wp:post_id>
  <wp:post_date>2012-10-01 21:44:06</wp:post_date>
  <wp:post_date_gmt>2012-10-02 01:44:06</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>fixed_01_v2</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>641</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://invisibleblocks.files.wordpress.com/2012/10/fixed_01_v2.jpg</wp:attachment_url>
</item>
<item>
  <title>fixed_02</title>
  <link>http://invisibleblocks.com/2012/10/01/symmetrical-portraits-undone/fixed_02/#main</link>
  <pubDate>Tue, 02 Oct 2012 01:44:09 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.files.wordpress.com/2012/10/fixed_02.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>644</wp:post_id>
  <wp:post_date>2012-10-01 21:44:09</wp:post_date>
  <wp:post_date_gmt>2012-10-02 01:44:09</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>fixed_02</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>641</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://invisibleblocks.files.wordpress.com/2012/10/fixed_02.jpg</wp:attachment_url>
</item>
<item>
  <title>fixed_03</title>
  <link>http://invisibleblocks.com/2012/10/01/symmetrical-portraits-undone/fixed_03/#main</link>
  <pubDate>Tue, 02 Oct 2012 01:44:12 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.files.wordpress.com/2012/10/fixed_03.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>645</wp:post_id>
  <wp:post_date>2012-10-01 21:44:12</wp:post_date>
  <wp:post_date_gmt>2012-10-02 01:44:12</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>fixed_03</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>641</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://invisibleblocks.files.wordpress.com/2012/10/fixed_03.jpg</wp:attachment_url>
</item>
<item>
  <title>fixed_04</title>
  <link>http://invisibleblocks.com/2012/10/01/symmetrical-portraits-undone/fixed_04/#main</link>
  <pubDate>Tue, 02 Oct 2012 01:44:16 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.files.wordpress.com/2012/10/fixed_04.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>646</wp:post_id>
  <wp:post_date>2012-10-01 21:44:16</wp:post_date>
  <wp:post_date_gmt>2012-10-02 01:44:16</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>fixed_04</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>641</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://invisibleblocks.files.wordpress.com/2012/10/fixed_04.jpg</wp:attachment_url>
</item>
<item>
  <title>fixed_05</title>
  <link>http://invisibleblocks.com/2012/10/01/symmetrical-portraits-undone/fixed_05/#main</link>
  <pubDate>Tue, 02 Oct 2012 01:44:20 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.files.wordpress.com/2012/10/fixed_05.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>647</wp:post_id>
  <wp:post_date>2012-10-01 21:44:20</wp:post_date>
  <wp:post_date_gmt>2012-10-02 01:44:20</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>fixed_05</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>641</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://invisibleblocks.files.wordpress.com/2012/10/fixed_05.jpg</wp:attachment_url>
</item>
<item>
  <title>fixed_06</title>
  <link>http://invisibleblocks.com/2012/10/01/symmetrical-portraits-undone/fixed_06/#main</link>
  <pubDate>Tue, 02 Oct 2012 01:44:24 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.files.wordpress.com/2012/10/fixed_06.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>648</wp:post_id>
  <wp:post_date>2012-10-01 21:44:24</wp:post_date>
  <wp:post_date_gmt>2012-10-02 01:44:24</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>fixed_06</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>641</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://invisibleblocks.files.wordpress.com/2012/10/fixed_06.jpg</wp:attachment_url>
</item>
<item>
  <title>fixed_07</title>
  <link>http://invisibleblocks.com/2012/10/01/symmetrical-portraits-undone/fixed_07/#main</link>
  <pubDate>Tue, 02 Oct 2012 01:44:27 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.files.wordpress.com/2012/10/fixed_07.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>649</wp:post_id>
  <wp:post_date>2012-10-01 21:44:27</wp:post_date>
  <wp:post_date_gmt>2012-10-02 01:44:27</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>fixed_07</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>641</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://invisibleblocks.files.wordpress.com/2012/10/fixed_07.jpg</wp:attachment_url>
</item>
<item>
  <title>fixed_08</title>
  <link>http://invisibleblocks.com/2012/10/01/symmetrical-portraits-undone/fixed_08/#main</link>
  <pubDate>Tue, 02 Oct 2012 01:44:31 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.files.wordpress.com/2012/10/fixed_08.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>650</wp:post_id>
  <wp:post_date>2012-10-01 21:44:31</wp:post_date>
  <wp:post_date_gmt>2012-10-02 01:44:31</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>fixed_08</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>641</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://invisibleblocks.files.wordpress.com/2012/10/fixed_08.jpg</wp:attachment_url>
</item>
<item>
  <title>fixed_09</title>
  <link>http://invisibleblocks.com/2012/10/01/symmetrical-portraits-undone/fixed_09/#main</link>
  <pubDate>Tue, 02 Oct 2012 01:44:35 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.files.wordpress.com/2012/10/fixed_09.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>651</wp:post_id>
  <wp:post_date>2012-10-01 21:44:35</wp:post_date>
  <wp:post_date_gmt>2012-10-02 01:44:35</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>fixed_09</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>641</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://invisibleblocks.files.wordpress.com/2012/10/fixed_09.jpg</wp:attachment_url>
</item>
<item>
  <title>fixed_10</title>
  <link>http://invisibleblocks.com/2012/10/01/symmetrical-portraits-undone/fixed_10/#main</link>
  <pubDate>Tue, 02 Oct 2012 01:44:38 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.files.wordpress.com/2012/10/fixed_10.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>652</wp:post_id>
  <wp:post_date>2012-10-01 21:44:38</wp:post_date>
  <wp:post_date_gmt>2012-10-02 01:44:38</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>fixed_10</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>641</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://invisibleblocks.files.wordpress.com/2012/10/fixed_10.jpg</wp:attachment_url>
</item>
<item>
  <title>fixed_11</title>
  <link>http://invisibleblocks.com/2012/10/01/symmetrical-portraits-undone/fixed_11/#main</link>
  <pubDate>Tue, 02 Oct 2012 01:44:41 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.files.wordpress.com/2012/10/fixed_11.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>653</wp:post_id>
  <wp:post_date>2012-10-01 21:44:41</wp:post_date>
  <wp:post_date_gmt>2012-10-02 01:44:41</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>fixed_11</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>641</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://invisibleblocks.files.wordpress.com/2012/10/fixed_11.jpg</wp:attachment_url>
</item>
<item>
  <title>fixed_12</title>
  <link>http://invisibleblocks.com/2012/10/01/symmetrical-portraits-undone/fixed_12/#main</link>
  <pubDate>Tue, 02 Oct 2012 01:44:45 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.files.wordpress.com/2012/10/fixed_12.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>654</wp:post_id>
  <wp:post_date>2012-10-01 21:44:45</wp:post_date>
  <wp:post_date_gmt>2012-10-02 01:44:45</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>fixed_12</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>641</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://invisibleblocks.files.wordpress.com/2012/10/fixed_12.jpg</wp:attachment_url>
</item>
<item>
  <title>cantor-snowflake</title>
  <link>http://invisibleblocks.com/2012/12/26/cantors-snowflake/cantor-snowflake/#main</link>
  <pubDate>Wed, 26 Dec 2012 03:42:40 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.files.wordpress.com/2012/12/cantor-snowflake.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>666</wp:post_id>
  <wp:post_date>2012-12-25 23:42:40</wp:post_date>
  <wp:post_date_gmt>2012-12-26 03:42:40</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>cantor-snowflake</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>665</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://invisibleblocks.files.wordpress.com/2012/12/cantor-snowflake.png</wp:attachment_url>
</item>
<item>
  <title>cantor-snowflake</title>
  <link>http://invisibleblocks.com/2012/12/26/cantors-snowflake/cantor-snowflake-2/</link>
  <pubDate>Wed, 26 Dec 2012 03:49:49 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.files.wordpress.com/2012/12/cantor-snowflake.pdf</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>667</wp:post_id>
  <wp:post_date>2012-12-25 23:49:49</wp:post_date>
  <wp:post_date_gmt>2012-12-26 03:49:49</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>cantor-snowflake-2</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>665</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://invisibleblocks.files.wordpress.com/2012/12/cantor-snowflake.pdf</wp:attachment_url>
</item>
<item>
  <title>2012-12-15 10.25.46</title>
  <link>http://invisibleblocks.com/?attachment_id=727</link>
  <pubDate>Thu, 23 May 2013 01:23:54 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.files.wordpress.com/2013/05/2012-12-15-10-25-46.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>727</wp:post_id>
  <wp:post_date>2013-05-22 21:23:54</wp:post_date>
  <wp:post_date_gmt>2013-05-23 01:23:54</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>2012-12-15-10-25-46</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://invisibleblocks.files.wordpress.com/2013/05/2012-12-15-10-25-46.jpg</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_context</wp:meta_key>
    <wp:meta_value><![CDATA[custom-background]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_is_custom_background</wp:meta_key>
    <wp:meta_value><![CDATA[pub/bonpress]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>fountain-millennium-park_65517_990x742</title>
  <link>http://invisibleblocks.com/?attachment_id=728</link>
  <pubDate>Thu, 23 May 2013 01:24:32 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.files.wordpress.com/2013/05/fountain-millennium-park_65517_990x742.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>728</wp:post_id>
  <wp:post_date>2013-05-22 21:24:32</wp:post_date>
  <wp:post_date_gmt>2013-05-23 01:24:32</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>fountain-millennium-park_65517_990x742</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://invisibleblocks.files.wordpress.com/2013/05/fountain-millennium-park_65517_990x742.jpg</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_context</wp:meta_key>
    <wp:meta_value><![CDATA[custom-background]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_is_custom_background</wp:meta_key>
    <wp:meta_value><![CDATA[pub/truly-minimal]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>cantor-snowflake-detail-small</title>
  <link>http://invisibleblocks.com/?attachment_id=729</link>
  <pubDate>Thu, 23 May 2013 01:30:10 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.files.wordpress.com/2013/05/cantor-snowflake-detail-small.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>729</wp:post_id>
  <wp:post_date>2013-05-22 21:30:10</wp:post_date>
  <wp:post_date_gmt>2013-05-23 01:30:10</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>cantor-snowflake-detail-small</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://invisibleblocks.files.wordpress.com/2013/05/cantor-snowflake-detail-small.jpg</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_context</wp:meta_key>
    <wp:meta_value><![CDATA[custom-background]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_is_custom_background</wp:meta_key>
    <wp:meta_value><![CDATA[pub/ryu]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>4.dark</title>
  <link>http://invisibleblocks.com/?attachment_id=783</link>
  <pubDate>Tue, 17 Dec 2013 03:29:25 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <!--                      http://invisibleblocks.files.wordpress.com/2013/12/4-dark.png-->
  <guid isPermaLink="false">http://invisibleblocks.files.wordpress.com/2013/12/4-dark.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>783</wp:post_id>
  <wp:post_date>2013-12-16 23:29:25</wp:post_date>
  <wp:post_date_gmt>2013-12-17 03:29:25</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>4-dark</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://invisibleblocks.files.wordpress.com/2013/12/4-dark.png</wp:attachment_url>
</item>
<item>
  <title>overlapping circles</title>
  <link>http://invisibleblocks.com/2013/12/17/circle-pictures/overlap/#main</link>
  <pubDate>Tue, 17 Dec 2013 04:08:21 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.files.wordpress.com/2013/12/overlap.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>788</wp:post_id>
  <wp:post_date>2013-12-17 00:08:21</wp:post_date>
  <wp:post_date_gmt>2013-12-17 04:08:21</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>overlap</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>784</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://invisibleblocks.files.wordpress.com/2013/12/overlap.png</wp:attachment_url>
</item>
<item>
  <title>Jorge Luis Borges (1)</title>
  <link>http://invisibleblocks.com/2013/12/17/circle-pictures/borges1/#main</link>
  <pubDate>Tue, 17 Dec 2013 04:12:45 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.files.wordpress.com/2013/12/borges1.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>790</wp:post_id>
  <wp:post_date>2013-12-17 00:12:45</wp:post_date>
  <wp:post_date_gmt>2013-12-17 04:12:45</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>borges1</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>784</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://invisibleblocks.files.wordpress.com/2013/12/borges1.jpg</wp:attachment_url>
</item>
<item>
  <title>Jorge Luis Borges (2)</title>
  <link>http://invisibleblocks.com/2013/12/17/circle-pictures/borges2/#main</link>
  <pubDate>Tue, 17 Dec 2013 04:12:46 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.files.wordpress.com/2013/12/borges2.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>791</wp:post_id>
  <wp:post_date>2013-12-17 00:12:46</wp:post_date>
  <wp:post_date_gmt>2013-12-17 04:12:46</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>borges2</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>784</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://invisibleblocks.files.wordpress.com/2013/12/borges2.jpg</wp:attachment_url>
</item>
<item>
  <title>Paul Erdos</title>
  <link>http://invisibleblocks.com/2013/12/17/circle-pictures/erdos/#main</link>
  <pubDate>Tue, 17 Dec 2013 04:12:47 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.files.wordpress.com/2013/12/erdos.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>792</wp:post_id>
  <wp:post_date>2013-12-17 00:12:47</wp:post_date>
  <wp:post_date_gmt>2013-12-17 04:12:47</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>erdos</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>784</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://invisibleblocks.files.wordpress.com/2013/12/erdos.jpg</wp:attachment_url>
</item>
<item>
  <title>Toulouse-Lautrec</title>
  <link>http://invisibleblocks.com/2013/12/17/circle-pictures/toulouse-lautrec/#main</link>
  <pubDate>Tue, 17 Dec 2013 04:12:53 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.files.wordpress.com/2013/12/lautrec.jpg</guid>
  <description/>
  <content:encoded><![CDATA[Henri (Marie Raymond) Toulouse-Lautrec (1864 - 1901), the French painter and lithographer who  was famous for his portrayals of prostitutes and bar maids.    (Photo by Hulton Archive/Getty Images)]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>793</wp:post_id>
  <wp:post_date>2013-12-17 00:12:53</wp:post_date>
  <wp:post_date_gmt>2013-12-17 04:12:53</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>toulouse-lautrec</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>784</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://invisibleblocks.files.wordpress.com/2013/12/lautrec.jpg</wp:attachment_url>
</item>
<item>
  <title>1.dark</title>
  <link>http://invisibleblocks.com/2013/12/17/circle-pictures/1-dark/#main</link>
  <pubDate>Tue, 17 Dec 2013 04:20:15 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.files.wordpress.com/2013/12/1-dark.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>801</wp:post_id>
  <wp:post_date>2013-12-17 00:20:15</wp:post_date>
  <wp:post_date_gmt>2013-12-17 04:20:15</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>1-dark</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>784</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://invisibleblocks.files.wordpress.com/2013/12/1-dark.png</wp:attachment_url>
</item>
<item>
  <title>1.light</title>
  <link>http://invisibleblocks.com/2013/12/17/circle-pictures/1-light/#main</link>
  <pubDate>Tue, 17 Dec 2013 04:20:17 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.files.wordpress.com/2013/12/1-light.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>802</wp:post_id>
  <wp:post_date>2013-12-17 00:20:17</wp:post_date>
  <wp:post_date_gmt>2013-12-17 04:20:17</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>1-light</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>784</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://invisibleblocks.files.wordpress.com/2013/12/1-light.png</wp:attachment_url>
</item>
<item>
  <title>2.dark</title>
  <link>http://invisibleblocks.com/2013/12/17/circle-pictures/2-dark/#main</link>
  <pubDate>Tue, 17 Dec 2013 04:20:19 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.files.wordpress.com/2013/12/2-dark.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>803</wp:post_id>
  <wp:post_date>2013-12-17 00:20:19</wp:post_date>
  <wp:post_date_gmt>2013-12-17 04:20:19</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>2-dark</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>784</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://invisibleblocks.files.wordpress.com/2013/12/2-dark.png</wp:attachment_url>
</item>
<item>
  <title>2.light</title>
  <link>http://invisibleblocks.com/2013/12/17/circle-pictures/2-light/#main</link>
  <pubDate>Tue, 17 Dec 2013 04:20:22 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.files.wordpress.com/2013/12/2-light.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>804</wp:post_id>
  <wp:post_date>2013-12-17 00:20:22</wp:post_date>
  <wp:post_date_gmt>2013-12-17 04:20:22</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>2-light</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>784</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://invisibleblocks.files.wordpress.com/2013/12/2-light.png</wp:attachment_url>
</item>
<item>
  <title>3.dark</title>
  <link>http://invisibleblocks.com/2013/12/17/circle-pictures/3-dark/#main</link>
  <pubDate>Tue, 17 Dec 2013 04:20:24 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.files.wordpress.com/2013/12/3-dark.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>805</wp:post_id>
  <wp:post_date>2013-12-17 00:20:24</wp:post_date>
  <wp:post_date_gmt>2013-12-17 04:20:24</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>3-dark</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>784</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://invisibleblocks.files.wordpress.com/2013/12/3-dark.png</wp:attachment_url>
</item>
<item>
  <title>3.light</title>
  <link>http://invisibleblocks.com/2013/12/17/circle-pictures/3-light/#main</link>
  <pubDate>Tue, 17 Dec 2013 04:20:25 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.files.wordpress.com/2013/12/3-light.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>806</wp:post_id>
  <wp:post_date>2013-12-17 00:20:25</wp:post_date>
  <wp:post_date_gmt>2013-12-17 04:20:25</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>3-light</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>784</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://invisibleblocks.files.wordpress.com/2013/12/3-light.png</wp:attachment_url>
</item>
<item>
  <title>4.dark</title>
  <link>http://invisibleblocks.com/2013/12/17/circle-pictures/4-dark-2/#main</link>
  <pubDate>Tue, 17 Dec 2013 04:20:28 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.files.wordpress.com/2013/12/4-dark1.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>807</wp:post_id>
  <wp:post_date>2013-12-17 00:20:28</wp:post_date>
  <wp:post_date_gmt>2013-12-17 04:20:28</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>4-dark-2</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>784</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://invisibleblocks.files.wordpress.com/2013/12/4-dark1.png</wp:attachment_url>
</item>
<item>
  <title>4.light</title>
  <link>http://invisibleblocks.com/2013/12/17/circle-pictures/4-light/#main</link>
  <pubDate>Tue, 17 Dec 2013 04:20:30 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.files.wordpress.com/2013/12/4-light.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>808</wp:post_id>
  <wp:post_date>2013-12-17 00:20:30</wp:post_date>
  <wp:post_date_gmt>2013-12-17 04:20:30</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>4-light</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>784</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://invisibleblocks.files.wordpress.com/2013/12/4-light.png</wp:attachment_url>
</item>
<item>
  <title>5.dark</title>
  <link>http://invisibleblocks.com/2013/12/17/circle-pictures/5-dark/#main</link>
  <pubDate>Tue, 17 Dec 2013 04:23:30 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.files.wordpress.com/2013/12/5-dark.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>810</wp:post_id>
  <wp:post_date>2013-12-17 00:23:30</wp:post_date>
  <wp:post_date_gmt>2013-12-17 04:23:30</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>5-dark</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>784</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://invisibleblocks.files.wordpress.com/2013/12/5-dark.png</wp:attachment_url>
</item>
<item>
  <title>5.light</title>
  <link>http://invisibleblocks.com/2013/12/17/circle-pictures/5-light/#main</link>
  <pubDate>Tue, 17 Dec 2013 04:23:33 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.files.wordpress.com/2013/12/5-light.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>811</wp:post_id>
  <wp:post_date>2013-12-17 00:23:33</wp:post_date>
  <wp:post_date_gmt>2013-12-17 04:23:33</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>5-light</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>784</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://invisibleblocks.files.wordpress.com/2013/12/5-light.png</wp:attachment_url>
</item>
<item>
  <title>6.dark</title>
  <link>http://invisibleblocks.com/2013/12/17/circle-pictures/6-dark/#main</link>
  <pubDate>Tue, 17 Dec 2013 04:23:36 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.files.wordpress.com/2013/12/6-dark.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>812</wp:post_id>
  <wp:post_date>2013-12-17 00:23:36</wp:post_date>
  <wp:post_date_gmt>2013-12-17 04:23:36</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>6-dark</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>784</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://invisibleblocks.files.wordpress.com/2013/12/6-dark.png</wp:attachment_url>
</item>
<item>
  <title>6.light</title>
  <link>http://invisibleblocks.com/2013/12/17/circle-pictures/6-light/#main</link>
  <pubDate>Tue, 17 Dec 2013 04:23:38 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.files.wordpress.com/2013/12/6-light.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>813</wp:post_id>
  <wp:post_date>2013-12-17 00:23:38</wp:post_date>
  <wp:post_date_gmt>2013-12-17 04:23:38</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>6-light</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>784</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://invisibleblocks.files.wordpress.com/2013/12/6-light.png</wp:attachment_url>
</item>
<item>
  <title>7.dark</title>
  <link>http://invisibleblocks.com/2013/12/17/circle-pictures/7-dark/#main</link>
  <pubDate>Tue, 17 Dec 2013 04:23:40 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.files.wordpress.com/2013/12/7-dark.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>814</wp:post_id>
  <wp:post_date>2013-12-17 00:23:40</wp:post_date>
  <wp:post_date_gmt>2013-12-17 04:23:40</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>7-dark</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>784</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://invisibleblocks.files.wordpress.com/2013/12/7-dark.png</wp:attachment_url>
</item>
<item>
  <title>7.light</title>
  <link>http://invisibleblocks.com/2013/12/17/circle-pictures/7-light/#main</link>
  <pubDate>Tue, 17 Dec 2013 04:23:42 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.files.wordpress.com/2013/12/7-light.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>815</wp:post_id>
  <wp:post_date>2013-12-17 00:23:42</wp:post_date>
  <wp:post_date_gmt>2013-12-17 04:23:42</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>7-light</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>784</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://invisibleblocks.files.wordpress.com/2013/12/7-light.png</wp:attachment_url>
</item>
<item>
  <title>cow</title>
  <link>http://invisibleblocks.com/2013/12/17/circle-pictures/cow/#main</link>
  <pubDate>Tue, 17 Dec 2013 04:24:24 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.files.wordpress.com/2013/12/cow.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>816</wp:post_id>
  <wp:post_date>2013-12-17 00:24:24</wp:post_date>
  <wp:post_date_gmt>2013-12-17 04:24:24</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>cow</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>784</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://invisibleblocks.files.wordpress.com/2013/12/cow.png</wp:attachment_url>
</item>
<item>
  <title>sunflower</title>
  <link>http://invisibleblocks.com/2013/12/17/circle-pictures/sunflower/#main</link>
  <pubDate>Tue, 17 Dec 2013 04:24:30 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.files.wordpress.com/2013/12/sunflower.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>817</wp:post_id>
  <wp:post_date>2013-12-17 00:24:30</wp:post_date>
  <wp:post_date_gmt>2013-12-17 04:24:30</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>sunflower</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>784</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://invisibleblocks.files.wordpress.com/2013/12/sunflower.jpg</wp:attachment_url>
</item>
<item>
  <title>sunflower2</title>
  <link>http://invisibleblocks.com/2013/12/17/circle-pictures/sunflower2/#main</link>
  <pubDate>Tue, 17 Dec 2013 04:24:32 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.files.wordpress.com/2013/12/sunflower2.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>818</wp:post_id>
  <wp:post_date>2013-12-17 00:24:32</wp:post_date>
  <wp:post_date_gmt>2013-12-17 04:24:32</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>sunflower2</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>784</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://invisibleblocks.files.wordpress.com/2013/12/sunflower2.jpg</wp:attachment_url>
</item>
<item>
  <title>2.light</title>
  <link>http://invisibleblocks.com/?attachment_id=830</link>
  <pubDate>Wed, 01 Jan 2014 04:17:38 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.files.wordpress.com/2014/01/2-light.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>830</wp:post_id>
  <wp:post_date>2014-01-01 00:17:38</wp:post_date>
  <wp:post_date_gmt>2014-01-01 04:17:38</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>2-light-2</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://invisibleblocks.files.wordpress.com/2014/01/2-light.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_context</wp:meta_key>
    <wp:meta_value><![CDATA[custom-background]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_is_custom_background</wp:meta_key>
    <wp:meta_value><![CDATA[pub/typo]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>cropped-2-light.png</title>
  <link>http://invisibleblocks.com/?attachment_id=831</link>
  <pubDate>Wed, 01 Jan 2014 04:19:28 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.files.wordpress.com/2014/01/cropped-2-light.png</guid>
  <description/>
  <content:encoded><![CDATA[http://invisibleblocks.files.wordpress.com/2014/01/cropped-2-light.png]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>831</wp:post_id>
  <wp:post_date>2014-01-01 00:19:28</wp:post_date>
  <wp:post_date_gmt>2014-01-01 04:19:28</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>cropped-2-light-png</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://invisibleblocks.files.wordpress.com/2014/01/cropped-2-light.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_context</wp:meta_key>
    <wp:meta_value><![CDATA[custom-header]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_custom_header_last_used_pub/ryu</wp:meta_key>
    <wp:meta_value><![CDATA[1388549969]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_is_custom_header</wp:meta_key>
    <wp:meta_value><![CDATA[pub/typo]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_custom_header_last_used_pub/typo</wp:meta_key>
    <wp:meta_value><![CDATA[1388550148]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Fractal Circles 34</title>
  <link>http://invisibleblocks.com/?attachment_id=871#main</link>
  <pubDate>Sat, 20 Sep 2014 23:44:59 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.files.wordpress.com/2014/09/08_329.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>871</wp:post_id>
  <wp:post_date>2014-09-20 19:44:59</wp:post_date>
  <wp:post_date_gmt>2014-09-20 23:44:59</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>08_329</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>866</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://invisibleblocks.files.wordpress.com/2014/09/08_329.png</wp:attachment_url>
</item>
<item>
  <title>Fractal Circles 33</title>
  <link>http://invisibleblocks.com/?attachment_id=872#main</link>
  <pubDate>Sat, 20 Sep 2014 23:45:01 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.files.wordpress.com/2014/09/08_332.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>872</wp:post_id>
  <wp:post_date>2014-09-20 19:45:01</wp:post_date>
  <wp:post_date_gmt>2014-09-20 23:45:01</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>08_332</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>866</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://invisibleblocks.files.wordpress.com/2014/09/08_332.png</wp:attachment_url>
</item>
<item>
  <title>Fractal Circles 32</title>
  <link>http://invisibleblocks.com/?attachment_id=873#main</link>
  <pubDate>Sat, 20 Sep 2014 23:45:03 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.files.wordpress.com/2014/09/08_337.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>873</wp:post_id>
  <wp:post_date>2014-09-20 19:45:03</wp:post_date>
  <wp:post_date_gmt>2014-09-20 23:45:03</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>08_337</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>866</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://invisibleblocks.files.wordpress.com/2014/09/08_337.png</wp:attachment_url>
</item>
<item>
  <title>Fractal Circles 31</title>
  <link>http://invisibleblocks.com/?attachment_id=874#main</link>
  <pubDate>Sat, 20 Sep 2014 23:45:05 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.files.wordpress.com/2014/09/08_388.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>874</wp:post_id>
  <wp:post_date>2014-09-20 19:45:05</wp:post_date>
  <wp:post_date_gmt>2014-09-20 23:45:05</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>08_388</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>866</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://invisibleblocks.files.wordpress.com/2014/09/08_388.png</wp:attachment_url>
</item>
<item>
  <title>Fractal Circles 30</title>
  <link>http://invisibleblocks.com/?attachment_id=875#main</link>
  <pubDate>Sat, 20 Sep 2014 23:45:07 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.files.wordpress.com/2014/09/08_407.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>875</wp:post_id>
  <wp:post_date>2014-09-20 19:45:07</wp:post_date>
  <wp:post_date_gmt>2014-09-20 23:45:07</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>08_407</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>866</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://invisibleblocks.files.wordpress.com/2014/09/08_407.png</wp:attachment_url>
</item>
<item>
  <title>What's all this, then?</title>
  <link>http://invisibleblocks.com/about/</link>
  <pubDate>Mon, 03 Jul 2006 15:14:04 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false"/>
  <description/>
  <content:encoded><![CDATA[<blockquote>"The programmer, like the poet, works only slightly removed from pure thought-stuff. He builds his castles in the air, from air, creating by exertion of the imagination." -- Fred Brooks, The Mythical Man-Month</blockquote>

Not being as eloquent as Fred Brooks, I say "Invisible Blocks: for building invisible machines", where he says "castles in the air."

I write software, for a living, and for fun. I tinker, more than toil. As professional programmers go, I have a slight bias towards math-y, computer-science-y topics, but I actually write more about how software makes you think. I also think about design (both software-specifically, and in general). I'm an auto-didact. Lately, I've been doing more and more with generative art. I also make <a href="http://wordcram.org">WordCram</a>.

Come see me at a <a href="http://newhaven.io">newhaven.io</a> meetup.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2</wp:post_id>
  <wp:post_date>2006-07-03 15:14:04</wp:post_date>
  <wp:post_date_gmt>2006-07-03 15:14:04</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>about</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>page</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[292320]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>9805</wp:comment_id>
    <wp:comment_author><![CDATA[Cristopher Kiri (@Crisciple)]]></wp:comment_author>
    <wp:comment_author_email>Crisciple@twitter.example.com</wp:comment_author_email>
    <wp:comment_author_url>http://twitter.com/Crisciple</wp:comment_author_url>
    <wp:comment_author_IP>122.61.165.240</wp:comment_author_IP>
    <wp:comment_date>2011-09-17 03:54:08</wp:comment_date>
    <wp:comment_date_gmt>2011-09-17 07:54:08</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Hi Dan! As a newcomer to your blog, what posts do you recommend reading to a person in my position? I stumbled upon your post concerning finding out an average without using the sum of values.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1316246048</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:14:"1316246048.266";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_post_as</wp:meta_key>
      <wp:meta_value>twitter</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_avatar</wp:meta_key>
      <wp:meta_value>http://a1.twimg.com/profile_images/1399913266/eightbit-34e8b5f9-8a9d-4fbb-8be5-8ef80ca2f3d9_normal.png</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_foreign_user_id</wp:meta_key>
      <wp:meta_value>42356007</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2011-09-17 07:54:08</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9806</wp:comment_id>
    <wp:comment_author><![CDATA[Daniel Bernier]]></wp:comment_author>
    <wp:comment_author_email>danbernier@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://invisibleblocks.wordpress.com/</wp:comment_author_url>
    <wp:comment_author_IP>69.0.37.235</wp:comment_author_IP>
    <wp:comment_date>2011-09-18 09:00:34</wp:comment_date>
    <wp:comment_date_gmt>2011-09-18 13:00:34</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Hello Cristopher,

I mostly write here about software, via JavaScript, Ruby, C#, and Java. Here are some posts I think are decent, but don't get as much traffic as the more google-able ones:

<a href="http://invisibleblocks.wordpress.com/2008/03/22/a-faster-cheaper-fibonacci-definition/" rel="nofollow">A Faster, Cheaper Fibonnaci Definition</a>
<a href="http://invisibleblocks.wordpress.com/2008/01/04/why-functional-javascript/" rel="nofollow">Why Functional JavaScript?</a>
<a href="http://invisibleblocks.wordpress.com/2007/10/22/fear-uncertainty-and-doubt/" rel="nofollow">Fear, Uncertainty, and Doubt</a>
<a href="http://invisibleblocks.wordpress.com/2008/12/24/simplifying-boolean-expressions/" rel="nofollow">Simplifying Boolean Expressions</a>
<a href="http://invisibleblocks.wordpress.com/2008/04/29/passing-by-reference-and-dog-leashes/" rel="nofollow">Passing by reference, and dog leashes</a>
<a href="http://invisibleblocks.wordpress.com/2008/04/05/why-we-abstract-and-what-to-do-when-we-cant/" rel="nofollow">Why We Abstract, and What to Do When We Can't</a>
<a href="http://invisibleblocks.wordpress.com/2010/02/02/array-prototype-tostring/#comment-9720" rel="nofollow">Array.prototype.toString</a>
<a href="http://invisibleblocks.wordpress.com/2009/10/20/a-javascript-war-story/" rel="nofollow">A JavaScript War Story</a>

I hope you like them!

I should really update this page one of these days...]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>9805</wp:comment_parent>
    <wp:comment_user_id>292320</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1316350834</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1316350834.6501";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:11:"bonsaigiant";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2011-09-18 13:00:34</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>10773</wp:comment_id>
    <wp:comment_author><![CDATA[Marc Maserati]]></wp:comment_author>
    <wp:comment_author_email>marc.maserati@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>https://www.facebook.com/marc.maserati.9</wp:comment_author_url>
    <wp:comment_author_IP>189.112.168.80</wp:comment_author_IP>
    <wp:comment_date>2014-11-21 05:44:00</wp:comment_date>
    <wp:comment_date_gmt>2014-11-21 09:44:00</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Dan, very interesting stuff here!]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>hc_post_as</wp:meta_key>
      <wp:meta_value>facebook</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_avatar</wp:meta_key>
      <wp:meta_value/>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_foreign_user_id</wp:meta_key>
      <wp:meta_value>794733703</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value>1416563040</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1416563040</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";d:1416563040.3590319156646728515625;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Hackers and Painters</title>
  <link>http://invisibleblocks.com/2005/01/05/hackers-and-painters/</link>
  <pubDate>Wed, 05 Jan 2005 19:10:22 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">https://invisibleblocks.wordpress.com/2005/01/05/hackers-and-painters/</guid>
  <description/>
  <content:encoded><![CDATA[I'm reading the book <a href="http://www.paulgraham.com/hackpaint.html">Hackers and Painters</a>. In it, Paul Graham compares hackers (in the original sense of the word, not in the sense of people who break into things) to painters and other "makers" (composers, writers, etc). His point is that hacking is less precise, less calculated, than non-programmers probably think; that it's more of a creative process, where a project can evolve as it progresses. [Contrast that with <a href="http://www.virtualschool.edu/mon/Quality/PirsigZen/part1.html">Zen and the Art of Motorcycle Maintenance</a>: "It's all of technology they can't take...Sylvia's irritation at a friend who thought computer programming was 'creative'."]

I like the idea that programmers are creative about what they do, and that writing code is more organic than inorganic.  You can take it too far, and imagine programmers randomly slinging code around, creating some kind of binary modern art (maybe I should try it!), but the original idea has merit.  It explains why programmers get so excited about good code, and so irritated at bad code.  It explains why they sink into code sessions, and surface hours later with only a vague idea of how much time has passed.  It fits much better with the actual experience of coding than the traditional view.

For a good look at hacker culture, check out the <a href="http://catb.org/~esr/jargon/html/">jargon file</a>.
]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>7</wp:post_id>
  <wp:post_date>2005-01-05 19:10:22</wp:post_date>
  <wp:post_date_gmt>2005-01-05 19:10:22</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>hackers-and-painters</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="recommended-reading"><![CDATA[Recommended Reading]]></category>
  <category domain="category" nicename="software-thinking"><![CDATA[Software Thinking]]></category>
</item>
<item>
  <title>Improving usability, and fighting the status quo</title>
  <link>http://invisibleblocks.com/2005/02/28/improving-usability-and-fighting-the-status-quo/</link>
  <pubDate>Mon, 28 Feb 2005 15:03:00 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">https://invisibleblocks.wordpress.com/2005/02/28/improving-usability-and-fighting-the-status-quo/</guid>
  <description/>
  <content:encoded><![CDATA[Occasionally, when designing how software should work, the question comes up:  the existing user interface or use case is bad, and we think we can improve it.  Should we?  A change for the better is still a change -- does the benefit outweigh the pain of re-learning?  Or, more pessimistically, the users are familiar with bad technology, so why bother making improvements?

I've heard computer game controls discussed this way.  The usual recommendation is, don't invent your own player control system, unless you have a vastly superior system -- players are already so familiar with the existing system (and its flaws) that the pain of learning a new system will probably not out-weigh the pain of living with the existing system's flaws.

In the realm of computer games, I suppose this makes sense.  The player control system is a fairly complex thing, navigating a 3D space with a 2D control (the mouse), and there have been so many games produced that the problem is pretty well hashed-out.

But how many of us build software that generic?  How many of us build software that deals with such a well-known problem domain?  If you're a developer in that situation, then you can rely on what's been done before.  But I think more often than not, people put too much faith in what's already been done.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>8</wp:post_id>
  <wp:post_date>2005-02-28 15:03:00</wp:post_date>
  <wp:post_date_gmt>2005-02-28 15:03:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>improving-usability-and-fighting-the-status-quo</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="software-thinking"><![CDATA[Software Thinking]]></category>
</item>
<item>
  <title>Keeping to the vision</title>
  <link>http://invisibleblocks.com/2005/03/04/keeping-to-the-vision/</link>
  <pubDate>Fri, 04 Mar 2005 15:41:00 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">https://invisibleblocks.wordpress.com/2005/03/04/keeping-to-the-vision/</guid>
  <description/>
  <content:encoded><![CDATA[Maybe this echoes back to my days making music. I remember wondering whether a band needed to have a "leader," a single member who wrote most of the words and music, and provided a psychological unity to the band. Gave it a personality.

I wonder whether software teams need the same thing. Typically, gathering software requirements is a bunch of people throwing details around. These people have different views of the system they're designing, they understand the constraints on it differently, they have different goals and pressures on them. Seldom is there one person who makes all the decisions, and steers the overall project. Seldom is there any coherent vision of how things should work. Seldom is there any clarity. Is it any wonder that a lot of the software out there sucks?

Amazon.com is a good example of software with a cohesive usage paradigm. Users understand the entire process of buying things from Amazon. They understand shopping carts, check-out, addresses, coupons, and shipping. They understand how all these parts fit together. Granted, all of these concepts are carry-overs from real-world retail, so Amazon had it easy. In fact, anyone who builds software that models a real-world process has this part easy: email is so simple to use because it mirrors a real-world process.

However, this kind of clear understanding is lacking in many software systems. Making users understand the "components" of a software system (the shopping cart, the coupons, etc), and how they hang together to be useful, I think is the essence of usable software.

As I think more about this, I think that a lot of software models a real-world process, because a lot of software is about automating some real-world system. In these cases, maybe the trick is to recognize that you're automating a real-world system.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>9</wp:post_id>
  <wp:post_date>2005-03-04 15:41:00</wp:post_date>
  <wp:post_date_gmt>2005-03-04 15:41:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>keeping-to-the-vision</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="software-thinking"><![CDATA[Software Thinking]]></category>
</item>
<item>
  <title>"The interface IS the application"</title>
  <link>http://invisibleblocks.com/2005/03/11/the-interface-is-the-application/</link>
  <pubDate>Fri, 11 Mar 2005 16:59:00 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">https://invisibleblocks.wordpress.com/2005/03/11/the-interface-is-the-application/</guid>
  <description/>
  <content:encoded><![CDATA["The interface is the application."  You hear that a lot when someone's trying to remind you to consider the end-user's perspective.  It's a good reminder, too -- to the user, the inner workings of your application are probably about as interesting as the inner workings of a warehouse.  N-tier?  Components?  Who cares?  At the end of the day, if people don't use your software, is it really any good?

It's important, though, to remember how this statement is used: it's a context-shifter, a facetious phrase intended to jar you into thinking -- not a statement of fact.  Accepting it as factual, and making decisions based on it, is like saying your skin is the entire organism, or that your car seat and dashboard are the whole car.  I rarely think about the transmission (unless it's not working), but that doesn't mean that the radio moves the car.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>10</wp:post_id>
  <wp:post_date>2005-03-11 16:59:00</wp:post_date>
  <wp:post_date_gmt>2005-03-11 16:59:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>the-interface-is-the-application</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="software-thinking"><![CDATA[Software Thinking]]></category>
</item>
<item>
  <title>Why do they think "doing it right" means taking longer?</title>
  <link>http://invisibleblocks.com/2005/04/04/why-do-they-think-doing-it-right-means-taking-longer/</link>
  <pubDate>Mon, 04 Apr 2005 12:20:00 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">https://invisibleblocks.wordpress.com/2005/04/04/why-do-they-think-doing-it-right-means-taking-longer/</guid>
  <description/>
  <content:encoded><![CDATA[Often when I suggest a better way to do things, some kind of process improvement, people say, "I think that's an excellent idea.  Unfortunately, we're on a very aggressive schedule.  In a perfect world, I think your idea would be a wonderful way to do things, but we just don't have the time now."  This is said about all kinds of reviews (requirements, design, and code), prototyping, usability testing, building strategically, unit testing...

I think the crux of this misunderstanding is this:  "doing it right" is harder than "doing it easy", and "doing it right" is something people made up because they're nit-picks.  It's almost like etiquette -- "In a perfect world, I would set the table properly, but I just don't have the time.  Tonight, to save time, we'll eat off paper plates with paper towels."

The problem with this is that these practices are meant to save time, effort, and money.  Skipping them hurts, not helps.  Skipping them actually creates the problem you're trying to solve when you skip them!  I say these practices are as superfluous as a doctor sanitizing his hands before he operates on me.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>11</wp:post_id>
  <wp:post_date>2005-04-04 12:20:00</wp:post_date>
  <wp:post_date_gmt>2005-04-04 12:20:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>why-do-they-think-doing-it-right-means-taking-longer</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="job"><![CDATA[Job]]></category>
  <category domain="category" nicename="software-thinking"><![CDATA[Software Thinking]]></category>
  <wp:comment>
    <wp:comment_id>1549</wp:comment_id>
    <wp:comment_author><![CDATA[a]]></wp:comment_author>
    <wp:comment_author_email>cantfindname@hotmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>205.189.49.37</wp:comment_author_IP>
    <wp:comment_date>2007-04-18 17:00:36</wp:comment_date>
    <wp:comment_date_gmt>2007-04-18 21:00:36</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Interesting

It sure is a crux.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2007-04-18 21:00:36</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Letting the ego get in the way</title>
  <link>http://invisibleblocks.com/2005/04/11/letting-the-ego-get-in-the-way/</link>
  <pubDate>Mon, 11 Apr 2005 13:58:00 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">https://invisibleblocks.wordpress.com/2005/04/11/letting-the-ego-get-in-the-way/</guid>
  <description/>
  <content:encoded><![CDATA[One of Robert Glass' <a href="http://www.amazon.com/exec/obidos/ASIN/0321117425/amzna9-1-20/ref=nosim/104-8747188-9452743?dev-t=D26XECQVNV6NDQ%26camp=2025%26link_code=xm2">Fallacies of Software Engineering</a> is that "Programming can and should be egoless." People think that ego gets in the way of writing good software -- you need to be cool, calm, and collected. No room for ego here, thanks, we're detached professionals. Glass, though, argues that ego is part of what makes a programmer good -- it provides incentive, personal attachment, motivation. Your software reflects on you, so make it good. This is all fine, and makes some sense to me. However, I want to talk about another aspect of ego that I think is less discussed, and more of a problem.

Maybe I should start with an illustration. In a recent meeting, I was trying to understand the new requirement the customer was asking for. The BA, having a great business background but very little IT background, already understood the problem -- and solved it for me. It took some polite work for me to find out for myself what the new requirement was about, so I could design an appropriate solution. Part of the new requirement meant that I'd have to interface with an existing enterprise user profile system that stores user groups in a hierarchy. The BA couldn't understand why it had to be in a hierarchy -- she kept saying, "look, can't we just get a list of the users, and use that?  It just seems easier to me."

I think this illustrates a common problem. Customers who have limited IT skills will insist that you use the solution they came up with. When you hear someone say, "I just see this in my head...why can't we do that?", you're probably facing this.

If you're building a system, you're working with someone who understands the problem that system should solve. I'll just call him the customer, although I think sometimes, this also applies to business analysts. Whoever it is, he also has an ego (he's human, isn't he?). He has an idea, at some level, how the system should solve the problem, and this is where the ego gets in the way.

Now, if you write software for a living, then you probably have more experience building systems than this person does. It's what you do. This person does something else, by definition. You're probably better able to imagine complex systems, deal with complex algorithms and data structures, and foresee the consequences of different design or solution decisions. Not because you're smarter than the customer, but because, again, it's what you do.

But when a customer has an idea for a system, it's his idea. He's thought some about this, and brought you his idea to be implemented. The more he's thought about it, probably the firmer he is about the idea. If he identifies with it, if it's "his idea," you'll have a hard time making him see any of its flaws. On the flip side, if you suggest a solution that he can't readily understand, it can scare him away. You get that look that says "what kind of whack-o would want to deal with something that complex?"

I guess this is one of those situations where you can't fix it, you can only deal with it.  But understanding that customers and BAs may have this kind of attachment can provide a lot of calm in these situations, and calm is the path you want to take.

---
Here's a <a href="http://www-106.ibm.com/developerworks/rational/library/2073.html">review</a> of Glass' Facts and Fallacies of Software Engineering that I just found, but haven't read yet.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>12</wp:post_id>
  <wp:post_date>2005-04-11 13:58:00</wp:post_date>
  <wp:post_date_gmt>2005-04-11 13:58:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>letting-the-ego-get-in-the-way</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="job"><![CDATA[Job]]></category>
  <category domain="category" nicename="software-thinking"><![CDATA[Software Thinking]]></category>
</item>
<item>
  <title>Hang on to that idea...</title>
  <link>http://invisibleblocks.com/2005/05/16/hang-on-to-that-idea/</link>
  <pubDate>Mon, 16 May 2005 16:07:00 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">https://invisibleblocks.wordpress.com/2005/05/16/hang-on-to-that-idea/</guid>
  <description/>
  <content:encoded><![CDATA[I was talking with a co-worker today, an excellent developer, about how ideas fade, while the changes they cause remain.

We were recently on a team whose task was to gather a list of software engineering best practices; teams in our department would rate themselves against it, and look for ways to improve performance. The biggest impact the list seems to have had is to add action items to project plans, and the miserable phrase "...in accordance with the software engineering best practices."

When we considered each software practice, we clarified what it entailed. We discussed how it affects a team. We explored what a team is like without it. We weighed practice against practice. When we released the first version of the list to management, there was already significant time spent on it, and much thought, discussion, and healthy argument behind it.

The project began as a chance to change our work environment; it ended as more meaningless process. The thing that's lost in that transition is the original idea, and its context. 

The same pattern is repeated in different contexts: religions begin as inspiration, and end as commandments. Laws begin as an idea or loose social consensus, and end as rigid edicts, filled with loop-holes. Software designs begin simple and elegant, and wind up crufty and confusing.

It's even visible in this old <a href="http://uufn.org/body_uufn_reflections.html#dec16">joke (http://uufn.org/body_uufn_reflections.html#dec16)</a>:

<blockquote>A young girl is watching her mother make a roast. The mother cuts off the two ends of the roast, puts the rest in the pan and pops it in the oven. "Mom," the girl asks, "how come when we make a roast, we cut off the ends before we cook it?" The mother replies, "I don't know; that's the way I've always done it. Let's ask grandma." Grandma is in the sitting room, so mother and daughter ask her why they cut off the ends before cooking the roast. Grandma's reply: "My mother did it that way and so have I. You'll have to ask great Gramma". The next day, they all get in the car, daughter, mother, and grandma, and go to see great Gramma. "Great Gramma," the young girl asks, "how come when we cook a roast, we cut off the ends before putting it in the oven." "Well," great Gramma replies, "my roasting pan isn't big enough for a whole roast." </blockquote>

I wish I had some tip to offer for getting around this problem, but I don't. All I can say is, try to notice when the original idea has been lost, and see if you can recover it.
]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>14</wp:post_id>
  <wp:post_date>2005-05-16 16:07:00</wp:post_date>
  <wp:post_date_gmt>2005-05-16 16:07:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>hang-on-to-that-idea</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="software-thinking"><![CDATA[Software Thinking]]></category>
</item>
<item>
  <title>Remove clutter, leave clarity</title>
  <link>http://invisibleblocks.com/2005/05/20/remove-clutter-leave-clarity/</link>
  <pubDate>Fri, 20 May 2005 12:30:00 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">https://invisibleblocks.wordpress.com/2005/05/20/remove-clutter-leave-clarity/</guid>
  <description/>
  <content:encoded><![CDATA[I just heard from a friend &amp; co-worker about a book called <a href="http://www.amazon.com/exec/obidos/ASIN/1400101530/amzna9-1-20/ref=nosim/104">Why Business People Speak like Idiots</a>, and a book Amazon offers with it, <a href="http://www.amazon.com/exec/obidos/tg/detail/-/0691122946/ref=pd_bxgy_img_2/">On Bullshit</a>.  These both sound pretty interesting.  They remind me of, in no particular order, Orwell's <a href="http://orwell.ru/library/essays/politics/english/e_polit">"On Polictics and the English Language"</a>, <a href="http://www.edwardtufte.com/tufte/">Edward Tufte's </a>work, and Strunk's <a href="http://www.bartleby.com/141">Elements of Style</a>:  all efforts to remove clutter, and leave clarity.  I think I'll buy one and see for myself.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>15</wp:post_id>
  <wp:post_date>2005-05-20 12:30:00</wp:post_date>
  <wp:post_date_gmt>2005-05-20 12:30:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>remove-clutter-leave-clarity</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="software-thinking"><![CDATA[Software Thinking]]></category>
  <wp:comment>
    <wp:comment_id>9666</wp:comment_id>
    <wp:comment_author><![CDATA[sandrar]]></wp:comment_author>
    <wp:comment_author_email>sandrar@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://google.com/zsxdg</wp:comment_author_url>
    <wp:comment_author_IP>81.64.144.120</wp:comment_author_IP>
    <wp:comment_date>2009-09-10 17:44:29</wp:comment_date>
    <wp:comment_date_gmt>2009-09-10 21:44:29</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Hi! I was surfing and found your blog post... nice! I love your blog.  :) Cheers! Sandra. R.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2009-09-10 21:44:29</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Separation of concerns</title>
  <link>http://invisibleblocks.com/2005/05/20/separation-of-concerns/</link>
  <pubDate>Fri, 20 May 2005 12:57:00 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">https://invisibleblocks.wordpress.com/2005/05/20/separation-of-concerns/</guid>
  <description/>
  <content:encoded><![CDATA[In some fun work-time conversation today, my friend Tom &amp; I discussed <a href="http://en.wikipedia.org/wiki/Numerical_control">Computerized Numerical Control (CNC)</a> systems, and how they're being used to turn 3D models of an object into physical sculptures. You can 3D-scan an object, tweak the model if you want, ship the digital file to one of these companies, and they ship you back a physical copy of it. There areother companies that similarly create resin sculptures from digital models.

This made me think of <a href="http://www.cafepress.com/">cafepress</a>, where they've separated the business of creating and ordering merchandise like T-shirts, mugs, and clocks, from the business of actually producing, selling, and shipping them.  You find it used by many humor sites to earn some money off short-lived, sudden popularity (I'm thinking <a href="http://www.savetoby.com/">SaveToby.com</a> and <a href="http://lionvs40midgets.uk-directory.com/">Lions vs. 40 midgets</a>): make a quick .jpeg with your site's name, ship it to cafepress, click "T-shirt, clock", and link to your new online store right from your website.

This all ties back to (have you guessed yet?) separation of concerns. If you have something that does two things, break it into two things. You find this over and over in software. Components/objects/commands with clean interfaces can be easily re-used by other components/objects/commands, in ways that their creators didn't envision. That's one of the touted benefits of service-oriented architectures, as well. It's what ESR calls Unix's <a href="http://www.faqs.org/docs/artu/ch01s06.html#id2877537">Rule of Modularity</a>.  It's present in many of the building kits you can buy for children (no matter how
hold they are):  <a href="http://www.lego.com/">Legos</a>, <a href="http://www.knex.com/">K'nex</a>, the old <a href="https://en.wikipedia.org/wiki/Construx">Construx</a>...

CNC scultpors and modular software are just a grown-up's building toys.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>16</wp:post_id>
  <wp:post_date>2005-05-20 12:57:00</wp:post_date>
  <wp:post_date_gmt>2005-05-20 12:57:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>separation-of-concerns</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="software-thinking"><![CDATA[Software Thinking]]></category>
</item>
<item>
  <title>Building a Turing Machine out of Legos</title>
  <link>http://invisibleblocks.com/2005/08/03/building-a-turing-machine-out-of-legos/</link>
  <pubDate>Wed, 03 Aug 2005 11:44:00 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">https://invisibleblocks.wordpress.com/2005/08/03/building-a-turing-machine-out-of-legos/</guid>
  <description/>
  <content:encoded><![CDATA[<a href="http://mapageweb.umontreal.ca/cousined/lego/5-Machines/Turing/Turing.html">This</a> looks like a worthy summer project.  Too bad summer's almost over...]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>17</wp:post_id>
  <wp:post_date>2005-08-03 11:44:00</wp:post_date>
  <wp:post_date_gmt>2005-08-03 11:44:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>building-a-turing-machine-out-of-legos</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="weird"><![CDATA[Weird]]></category>
</item>
<item>
  <title>Help, I've been outsourced, and The Vendor's code is a mess!</title>
  <link>http://invisibleblocks.com/2005/09/13/help-ive-been-outsourced-and-the-vendors-code-is-a-mess/</link>
  <pubDate>Tue, 13 Sep 2005 20:44:00 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">https://invisibleblocks.wordpress.com/2005/09/13/help-ive-been-outsourced-and-the-vendors-code-is-a-mess/</guid>
  <description/>
  <content:encoded><![CDATA[I've been working as tech. lead, going full-speed on a project since February. Last May, we learned it would be outsourced to The Vendor in India. Since my team has never outsourced anything before, we suddenly had to figure out how the whole thing would work (of course, there's no extra time). We already did a decent amount of design work...would The Vendor repeat that work? Or would they work from what we provided them? How would they tie in to our build process? How about our internal services that use our own SOA framework? [We use proprietary, built-in-house frameworks for anything. We're just now (yes, now) moving off our proprietary MVC framework to the latest, greatest, cutting-edge Struts 1.1 MVC framework. w00t!]

Anyway, it was a hard summer, trying to figure all this new stuff out, finish the design, and not get all gloomy over my career going to India (hence the relative quiet here for the past months). I have some more posts coming about the whole experience, but for now, I wanted to say something about the quality of the code we're starting to see from The Vendor.

It sucks. The code absolutely sucks. I've occasionally seen code this bad from very junior programmers with not much talent. People keep saying "but surely they just haven't polished it up yet!" To them I say, the mess it's in makes it, oh, three times harder to understand then if they'd just keep it somewhat clean to begin with. It's not that I'm expecting a 5-lane highway and getting a dirt road, it's that I'm expecting a dirt road and getting the thickest, nastiest, buggiest (har har) jungle undergrowth that almost totally prohibits movement. We're not supposed to code at all on this project, or fix any bugs (the contract says The Vendor will do that), but I've had to whip out my trusty refactoring machete and cut some trails through the thicket just to understand the mess. Even the liason seems embarrassed.

Now I admit I like clean code, but I am not being a code priss here. I like to see evidence of thought. I like to see (say) naming conventions. Consistent capitalization would at least be nice. I like to see computer resources being used intelligently. I see none of that here. I'm not pouting that my job is being outsourced, and taking it out on the poor guys in India. This code is far below anything I'd tolerate from my team members -- even a junior programmer I'm mentoring.

I don't want to believe the programmers in India are brain-dead. I imagine, since this was a fixed-bid project that they underestimated, and since it's their first contract with my employer, that they were eager to impress, and now find themselves trying to do something impossible. [We all know how sales over-promises, and engineering suffers.] I know for a fact that they're working around 70 hour weeks, and I feel for them. Maybe there are a bunch of coders there running amok, just trying to get the thing thrown together and shipped. But then I think about some of the specific examples I've seen, and it almost defies belief. One good example will give a picture. The paraphrased code:

[sourcecode lang='java']
List counties = LoadList("countries");
session.save ("states", counties);
[/sourcecode]

Yes, you read that right. Load a list of countries, store it in a variable called "counties", and store it in session as "states". Is it a list of counties? countries? states? Who knows? [I know, I know -- maybe "counties" is just a typo of "countries", but we do deal with counties. If this was the only problem, I'd give them the benefit of the doubt.]

What I really think is going on here (now that I finally get to it) is that the coders in India have a wide talent margin. I think there are coders there who've been coding for (maybe) three months longer than they've been employed. It's been said elsewhere, and this isn't a new thought, but coders in India are in huge demand, and the barrier to entry is very low. So many of them need to make a living, and with demand so high, software is easy money. It's like the dot-com bubble here, when people who had no business coding were able to make scads of money. My advice for anyone working on a project that's been off-shored is beware of the newbie programmers -- and you'll probably have some on your project. The Vendor will have some slick, talented people on their team who know what they're doing, but for every great programmer there's at least one dud.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>18</wp:post_id>
  <wp:post_date>2005-09-13 20:44:00</wp:post_date>
  <wp:post_date_gmt>2005-09-13 20:44:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>help-ive-been-outsourced-and-the-vendors-code-is-a-mess</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="outsourcing"><![CDATA[Outsourcing]]></category>
</item>
<item>
  <title>Why do Americans tell themselves they'll survive off-shoring by being more creative than the rest of the world?</title>
  <link>http://invisibleblocks.com/2005/09/22/why-do-americans-tell-themselves-theyll-survive-off-shoring-by-being-more-creative-than-the-rest-of-the-world/</link>
  <pubDate>Thu, 22 Sep 2005 16:49:00 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">https://invisibleblocks.wordpress.com/2005/09/22/why-do-americans-tell-themselves-theyll-survive-off-shoring-by-being-more-creative-than-the-rest-of-the-world/</guid>
  <description/>
  <content:encoded><![CDATA[I've been reading and thinking more and more about off-shoring.  One thing that keeps coming up is the idea that Americans are generally more mentally flexible, or something.  People talking about off-shoring say "yes, you'll lose your mundane jobs, your grunt-work.  But you'll excel by being creative!  That's what Americans are good at!"  Two pieces of the idea:
<ul>   <li>We value trouble-makers.  People who say "screw off," and go do it their own way.  Cowboys, mavericks, smart-alecks, rebels, scrappy little kids. Clever, resourceful people.  Iconoclasts.  Main benefit: we feel it's a Good Thing to charge off and try something, no matter how stupid the idea seems.  We take risks, and sometimes that stupid idea pays off.  Go figure.</li>   <li>We don't have a rigid class system.  We believe, as a kind of core cultural value, that any poor bum with talent has a chance of using his talent to get rich.  Call it the American dream.  Main benefit: we believe that anyone can be rich/famous/president/CEO, so why not you?  Why can't you be C-E-freakin'-O?</li> </ul> These qualities make us skeptical of old ideas, and eager to embrace new ones.  I suppose both of those points go back to how the country was founded:  a bunch of poor people said "screw off" (or were kicked out, whatever), went to a different continent, and gradually became a really successful country.  At least, that's the gist of the story as we learn it (I have no interest in talking about how much of that is exactly accurate).  But no matter where these values come from, they make us more mentally flexible, more creative.  That's the idea, at least.

In contrast, the Chinese, the Indians, the Japanese all have very rigid societies.  They value stability.  Respect.  Honor.  Protocol.  The vendor liason I worked with had worked in both Japan and the US, and said that as you move from East to West, the culture becomes less rigid, less formal.  Apparently in Japanese meetings, only the two people of the highest rank actually talk, while everyone else listens.  The underlings silently shake their heads to indicate whether they agree.  In this kind of culture, there's no "thinking outside the box" (you know you were just waiting for me to say that).  The liason said that India was nicely situated between Japan and the US:  not-too-rigid, not-too-loose.  Able to deal with both cultures.  [I guess this is a different kind of flexibility.]

On my off-shored project, I only saw two bits of evidence of this.  1) The Indians were hesitant to criticize our ideas at first:  until they became comfortable with us, they erred on the polite side...but that's hardly being inflexible.  2) -- the real piece.  They were very reluctant to figure out any problems we threw at them.  Any part of the design we left for them to solve, no matter how trivial, they asked us to fill in.  [This after repeatedly being told by management, "these guys are geniuses -- lean on them, learn from them.  Working with them will improve us."  Whatever.]  Whenever we expected them to take a pro-active approach to things, to apply creativity or intelligence, we had problems.  It seemed like they preferred to grind things out, code-monkey-style, without thinking about it.  This puzzles me, because that stuff is the part that I like about my job -- figuring things out, solving problems.

Now this all sounds very one-sided to me.  Why is it only Americans can be creative?  What kind of crock are we telling ourselves?  I'd love to hear other perspectives on this -- but spare me the "non-US programmers can be innovative, too, jackass!"  I know they can.  Has anyone seen evidence of this?  Any evidence against it?  Other than "oh, such-and-such Indian company is very innovative, if you look at their homepage..."?  I'm looking for stories from people who actually worked on off-shored projects, and were amazed at the creativity and talent of the off-shore team.

For a good example of this idea, check out <a href="http://www.wired.com/wired/archive/12.02/india.html">The New Face of the Silicon Age</a> from Wired.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>19</wp:post_id>
  <wp:post_date>2005-09-22 16:49:00</wp:post_date>
  <wp:post_date_gmt>2005-09-22 16:49:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>why-do-americans-tell-themselves-theyll-survive-off-shoring-by-being-more-creative-than-the-rest-of-the-world</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="outsourcing"><![CDATA[Outsourcing]]></category>
  <wp:comment>
    <wp:comment_id>2</wp:comment_id>
    <wp:comment_author><![CDATA[Anonymous]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url/>
    <wp:comment_author_IP>69.37.72.236</wp:comment_author_IP>
    <wp:comment_date>2005-09-28 17:21:00</wp:comment_date>
    <wp:comment_date_gmt>2005-09-28 17:21:00</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Linus Torvalds is finish. unless im mistaken finland is not part of the USA.

your ignorance and egotism fueled by a few annecdotes of dubious validity clearly shows the thinly veiled racism underneath. you do realize that the canadians and mexicans are also western countries without "regimented class systems" and will happily work for less than the average american right?

the things that made america strong were 1) the exploitation of slaves 2) military industrial capital 3) the low price of oil. its not that americans are mentally "more rebelious and adaptable" (paraphrasing), its that they are riding a wave that crested a long time ago.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2005-09-28 17:21:00</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>3</wp:comment_id>
    <wp:comment_author><![CDATA[Dan Bernier]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://www.blogger.com/profile/6051054</wp:comment_author_url>
    <wp:comment_author_IP>69.37.72.236</wp:comment_author_IP>
    <wp:comment_date>2005-09-28 18:00:00</wp:comment_date>
    <wp:comment_date_gmt>2005-09-28 18:00:00</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Thanks for the off-topic response that ignores the point.  I'm <I>questioning</I> the idea that Americans will survive off-shoring by being creative, so I'm not losing sleep over being called ignorant, egotistical, or racist.  I found the idea in the Wired article I mentioned at the end, and also in Thomas L. Friedman's <a HREF="http://www.amazon.com/exec/obidos/tg/detail/-/0374292884/qid=1127944329/sr=8-1/ref=pd_bbs_1/103-4978318-0407869?v=glance&amp;s=books&amp;n=507846" rel="nofollow">The World is Flat</A> (I think it was in chapter 5 or 6).  I'm asking what other people think of it.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2005-09-28 18:00:00</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>4</wp:comment_id>
    <wp:comment_author><![CDATA[Shawn Crahan]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url/>
    <wp:comment_author_IP>69.37.72.236</wp:comment_author_IP>
    <wp:comment_date>2005-09-28 18:49:00</wp:comment_date>
    <wp:comment_date_gmt>2005-09-28 18:49:00</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I love the anonymous poster, the lurker in shadows who immediately rushes masked to defend the weak against the monsters of tyranny.

Mexican's will work for shit, as will Indians, Singaporians (or is that Sinapori, or Singaporish, well whatever the poor bastards from Singapore are called) because their economy is poor and shit is still bettern than nothing.  Canadians, do not work for less than the average american though, especially when you include the joys of a moderate socialism

And lay off the fucking exploitation of slaves.  Guess what, asshole, Africans sold us those slaves. Their own black  brothers would send raiding parties to hunt down villages that were weaker, for the precious wealth it would give them.

And Linus Torvald can fuck himself, if that's the only real example you can come up with.

Sorry bout that dan, but I hate people today.  As for your thoughts on offshoring, I might have mentioned before that I hate sending work over seas, becase it's generally exploitive of a struggling economy, and the workers in developed countries who lose jobs do to that tend to be middle class americans, who act as consumers but no longer have the available funds to purchase the items needed to keep the economy circulating.  So we end up with more service jobs and other shit work, and while I'm sure I've met some creative people in those jobs, I can't say that those jobs fostered that creativity.

Oh and to Anonymous, the mighty.  If you're interested in responding, you can hit me at sc2556@columbia.edu. I'd love to hear something a little more insightful than the stupid liberal shit you've regurgitated. Hell, it's people like you that prove that you don't have to be a republican to be an asshole.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2005-09-28 18:49:00</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>5</wp:comment_id>
    <wp:comment_author><![CDATA[Anonymous]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url/>
    <wp:comment_author_IP>69.37.72.236</wp:comment_author_IP>
    <wp:comment_date>2005-09-28 19:54:00</wp:comment_date>
    <wp:comment_date_gmt>2005-09-28 19:54:00</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I've worked with American teams to which we've offshored development from Europe, and I can't really cite an example of Americans being noticeably creative, above the norm.

I'm certain that my perception would be different if I'd be subjected daily to the crude jingoistic propaganda of American news shows and to a lesser extent, other news media which accepts the same basic premises but constrains itself somewhat.

Here the media market, like the other parts of society, has had more time to mature and the people have some appreciation of the subtlety of some political differences.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2005-09-28 19:54:00</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>6</wp:comment_id>
    <wp:comment_author><![CDATA[Anonymous]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url/>
    <wp:comment_author_IP>69.37.72.236</wp:comment_author_IP>
    <wp:comment_date>2005-09-28 19:56:00</wp:comment_date>
    <wp:comment_date_gmt>2005-09-28 19:56:00</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I'm another Anonymous Coward, but I agree that your belief of what made the US was a buck-the-trend ideal is entirely wrong. It was the slaughter and enslavement of millions. This goes back to the original slaves and the slaughter of aboriginal americans, up to the present day lack of employee rights or universal health care while the CIA and military operations around the globe to keep certain nations in check.

Also, there *is* a rigid class system that people try to believe isn't there. Social mobility is heavily limited and class warfare is rife. Evidence of this is seen through the media and their preoccupation with blue collar crime (violent crimes). Ignoring the much more prevalent white collar crimes (embezzlements, fruad).

It's not my place to give you a treatise on the American culture you seem to be ignoring. Crack open a history book once in a while. Read the pink pages.

To answer your actual question: American economic survival is entirely orthogonal to offshoring of jobs. It's a distraction just like the Japanese scare stories in the 80s were a distraction. The real things you should be paying attention to are the vast amount of debt China owns, the impending Iranian petroleum exchange which will not be trading in dollars, the impending  Russian move to peg the ruble to the Euro, the effects of the recent Chinese Yuan reevaluation, and pathetic response of the federal government. Who in the US even cares that FEMA was given something like 10.5 billion USD with barely a string attached which will obviously go to the creative entrepeneurial businesses involves in construction services (the same ones profiting in Iraq).

Shawn, people from Singapore are Singalese. Other examples of non-American creativity include Skype, iPods, and almost the entire entertainment lighting industry.

I'm currently working outside the US (DONT WORRY, I AM AN AMERICAN SO DONT THROW MY OPINION AWAY JUST YET!!!) and when I work with Americans their designs sure are creative. Not the creative I would like to see... the creative that makes my eyes bleed.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2005-09-28 19:56:00</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>7</wp:comment_id>
    <wp:comment_author><![CDATA[Anonymous]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url/>
    <wp:comment_author_IP>69.37.72.236</wp:comment_author_IP>
    <wp:comment_date>2005-09-28 21:36:00</wp:comment_date>
    <wp:comment_date_gmt>2005-09-28 21:36:00</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Indian companies are learning how to work with people in the US.  I think some of them have found that things work much better when the "client" specifies everything down to the last detail.

I've been in situations where I knew my ideas were better than what the client would come up with.  However because I had worked with the client previously, I knew better than to use my ideas.  It made for a much better work environment to let the client specify everything in detail because they were more interested in getting what they asked for than getting what they needed.

Indian companies are forming opinions of American companies as they work together.  It wouldn't surprise me if workers in India are trained to ask for full specifications and to not create anything on their own.

<a HREF="http://blog.markwshead.com" rel="nofollow">Mark Shead</A>]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2005-09-28 21:36:00</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>8</wp:comment_id>
    <wp:comment_author><![CDATA[adam]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://www.blogger.com/profile/1038099</wp:comment_author_url>
    <wp:comment_author_IP>69.37.72.236</wp:comment_author_IP>
    <wp:comment_date>2005-09-29 01:04:00</wp:comment_date>
    <wp:comment_date_gmt>2005-09-29 01:04:00</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[wow, surprised by all the angry comments thus far...thought it was a fair enough question :-/

coming from an american, my guess on why we're telling ourselves creativity will save us is partly because it's true. Not because we're necessarily more creative (although I do believe our entrepreneurial culture helps), but because it's easier to produce more innovative and value-added work when you don't have to overcome the obstacles that come with outsourcing (from basic communication to decreased flow of ideas).

by having a team of creative people in one physical location, they are able to be more productive and efficient and I think it will be a while before the majority of outsourced teams can compete with local ones.

that being said, one good example of people spread across multiple locations who are still productive is <a HREF="http://www.37signals.com" rel="nofollow">37 signals</A>. Those guys seem to pump out ideas quicker than most and I think their small teams model may be the future of business.

<a HREF="http://sansladder.blogspot.com/2005/09/more-on-why-i-quit.html" rel="nofollow">some more of my thoughts on the future effects of off-shoring</A>.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2005-09-29 01:04:00</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9</wp:comment_id>
    <wp:comment_author><![CDATA[Anonymous]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url/>
    <wp:comment_author_IP>69.37.72.236</wp:comment_author_IP>
    <wp:comment_date>2005-09-29 02:24:00</wp:comment_date>
    <wp:comment_date_gmt>2005-09-29 02:24:00</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[&gt; Mexican's will work for shit, as will
&gt; Indians...
That's a narrow minded view. Certainly less in American terms, but Indian software developers are actually highly paid in Indian terms. And get your punctuation right - it's "Mexicans", not "Mexican's".

&gt; Linus Torvald can fuck himself
So can you. After all, he achieved something compared to you.

&gt; I hate sending work over seas, becase
&gt; it's generally exploitive of a
&gt; struggling economy
One more figment of your imagination. Sending work overseas provides opportunity and so causes the destination economy to grow. As I mentioned before, Indian software developers are well paid in Indian terms. Look at now India and China have grown in the past decade. Bangalore, for instance, is sprouting up big shopping malls. Where do you think shoppers are getting their money from? Yup - partly from offshoring.

I'm posting as anonymous because I don't want any more of your stupid "logic". (Looks like you're interested in verbal fights.)]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2005-09-29 02:24:00</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>10</wp:comment_id>
    <wp:comment_author><![CDATA[Anonymous]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url/>
    <wp:comment_author_IP>69.37.72.236</wp:comment_author_IP>
    <wp:comment_date>2005-09-29 02:55:00</wp:comment_date>
    <wp:comment_date_gmt>2005-09-29 02:55:00</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[good question. i have also been thinking of how and why this perception of Americans being more creative has come. i lived and educated myself in US for 4 years and now i work in India (in a big software product company) and interact with teams spread across 4 continents. I believe inherently americans are not more creative but they are more free in expressing their opinion. Indians reserve their opinion for fear of ridicule or for the fear of comitting a mistake. Indians think that they have to keep proving themselves again and again and in this process they supress their opinions which they feel might be a tad out-of-the-way. this shows up as indians not being creative enough. just living in india amid the competition forces people to be extremely creative in using the limited available resources. This is very much evident if one notices indians in other fields.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2005-09-29 02:55:00</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>11</wp:comment_id>
    <wp:comment_author><![CDATA[Dan Bernier]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://www.blogger.com/profile/6051054</wp:comment_author_url>
    <wp:comment_author_IP>69.37.72.236</wp:comment_author_IP>
    <wp:comment_date>2005-09-29 08:32:00</wp:comment_date>
    <wp:comment_date_gmt>2005-09-29 08:32:00</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Finally, some decent discussion!

Mark Shead, I'm surprised at your comment that most clients aren't interested in your ideas. Well, maybe not entirely surprised, but I know that when we engaged The Vendor on my project, we were most explicit about our interest in their creativity, intelligence, and expertise. We made it clear that we'd never done outsourcing before, and that for this project, we were banking on their expertise in certain technologies. When they couldn't follow through, it derailed the project and forced us to compromise elements of the design, it let us down, and it surprised and confused us.

All that said, I'd love to hear more Indian perspective on working with Americans. I've already talked with the Vendor guys here, and had some interesting conversations.

Adam, I think you missed my point. The stuff I've read says, essentially, "Americans will have jobs when all the grunt work is off-shored, because they'll be the creative innovators hatching ideas for the grunt-workers to implement." I know the argument that a co-located team is more agile &amp; creative than a team stretched across oceans and time zones (and I agree), but I'm on a different tack here...

anonymous 6, that's an interesting point -- I think it's the closest to what I've been looking for. Maybe it's why all these authors I've been reading assume Indians aren't as creative.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2005-09-29 08:32:00</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>12</wp:comment_id>
    <wp:comment_author><![CDATA[adam]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://www.blogger.com/profile/1038099</wp:comment_author_url>
    <wp:comment_author_IP>69.37.72.236</wp:comment_author_IP>
    <wp:comment_date>2005-09-29 15:08:00</wp:comment_date>
    <wp:comment_date_gmt>2005-09-29 15:08:00</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[You're right Dan, got a little off-track with my remark...just getting some current thoughts off my mind I guess :)

How bout this reason instead:

Americans will survive off-shoring because their economy allows them to focus on more on creative/disruptive/innovative business ventures - which they can then apply to global competition.

I think if you look at various stages of economies you'll find a kind of hierarchy of needs - first, you have to match basic customer needs, then you can work on making the process more efficient, finally, there's improving the design/experience of each product/service.

I feel like very few countries, outside of the US, Japan, and maybe parts of Europe have reached this last stage. Countries like India, China are still focused on getting things done (worrying about following the specs vs. designing them). Therefore, the US can use their expertise in efficiency and design and apply it to whatever economy is reaching the next stages.

got a feeling like this comment may still be a bit off base, but I think there may be some connection to your original question.

Looking forward to following the conversation.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2005-09-29 15:08:00</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>13</wp:comment_id>
    <wp:comment_author><![CDATA[Anonymous]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url/>
    <wp:comment_author_IP>69.37.72.236</wp:comment_author_IP>
    <wp:comment_date>2005-09-29 16:39:00</wp:comment_date>
    <wp:comment_date_gmt>2005-09-29 16:39:00</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Don't you know anything. It is about Guns, Germs and Steel! Those Papua New Guineans are more creative then us.

No its all about low TAXES! Oh shit that excludes Finland + Japan.

Oh - no I mean its all about PRODUCTIVITY!

Really its all about efficient access to CAPITAL MARKETS!! Hence the need for Microfinance.

Actually its all about EDUCATION to access those markets and be creative.

Seriously
This <a HREF="http://www.amazon.com/exec/obidos/tg/detail/-/006019247X/002-8988196-4572828?v=glance" rel="nofollow">this book</A> published a couple of years ago which tried to map the greatest creative place ever. It ended up being 4 places:
Southern england (newton et all)
Northern France, spots in Germany and northern italy. Not USA.

<a HREF="http://xminc.com/mt" rel="nofollow">Anthony</A>]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2005-09-29 16:39:00</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>14</wp:comment_id>
    <wp:comment_author><![CDATA[Shawn Crahan]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url/>
    <wp:comment_author_IP>69.37.72.236</wp:comment_author_IP>
    <wp:comment_date>2005-10-17 16:59:00</wp:comment_date>
    <wp:comment_date_gmt>2005-10-17 16:59:00</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[To the second Anonymous; you're right, America was built on the blood of innocents.  As was every other empire of the past. I'm not saying it's right, but I will be damned if poor Dan is going to be bashed as; ignorant, egotistical, or racist, because some one with an agenda won't read what he wrote before making personal judgement calls. As things are, we have economic exploitation, including moving jobs to undervalued economies (although I can concede that a more honest statement would be that ours is overvalued), which maximizes profit for a select few in the short term.

As for the rigidity of the class system, that's debatable.  Education is the key. I'm finding that out right now, it can be used to move a person from government assistance to an ivy league education. Mwalimu knew that, but he was a socialist, poor bastard, so we let him bankrupt his poor country trying to fend of Idi Amin. All of your statements concerning the dire economic situation in the US are accurate, although I still believe our Mercantilist policies is going to be responsible for the collapse.

Thanks also for the answer, Singalese.  I'd love to know if there's a standardization on that or if its just random chance that makes one the prefered. Although on a guess, it seems that colonials end in 'an', orientals end in 'ese', Western Europeans end in 'sh' and Eastern and Southern Europeans are 'ans'.  Just a guess, and I'm sure that I'll be made to account for the exceptions

As for Anonymous the the Mighty, he can still fuck himself.  A man who feels the need to offer grammatical lessons, yet feels that capitals, is lax with his own apostrophes, and will place quotations around a paraphrase is a maggot at best.  Yes Linus Torvald accomplished something, and I don't doubt the day will come that I can look back on pride with my accomplishments, be they as prosaic as doing well by my family, or as grand as developing a second best operating system who's major claim is that it doesn't crash on the scant applications that it supports.  Unless you want to throw shit to Bill Gates, who has also accomplished a little something in his life.  Although I do admit, Anonymous, there's a lot of poetry out there that bears your name, some of it's even good...]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2005-10-17 16:59:00</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>What Indians call the '@' symbol</title>
  <link>http://invisibleblocks.com/2005/09/28/what-indians-call-the-symbol/</link>
  <pubDate>Wed, 28 Sep 2005 15:08:00 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">https://invisibleblocks.wordpress.com/2005/09/28/what-indians-call-the-symbol/</guid>
  <description/>
  <content:encoded><![CDATA[One of The Vendor's guys-on-site just stopped by to ask me to email him some things. He just came onto the project, and I didn't know his email address yet, so as I prepared the email, he dictated his address to me. As he spelled out each letter, I typed it in, until he said something that sounded just like "adder-oit". I asked him to repeat it twice, and both times, it sounded just like "adder-oit". Oh shit, I thought, maybe it's one of those letters that has a weird translation, and he can't remember what it is in English. Like 'eegreck' in French means the letter 'y'. He realized I was confused, leaned over, and typed '@'.

"Oh!" I said, "you mean, 'adroit'? Is that the name you use for the 'at' symbol? We just call it 'at'." I figured it was one of those fancy names for symbols, like 'ampersand' for '&amp;' -- easy to forget, and not used all that often in the States. [Remember, Indians typically learn to speak British English, not American, so it would make sense that they learned some things like that. At least, in my version of the world it does.]

"No," he explained, "we call it 'at the rate'." He had to say it a few times for me to get it, but suddenly, I had a mental image of markets, selling stuff: "3 @ $1 ea", that kind of thing. After a laugh, he sent me some background info on @, which I Googled: here's the <a href="http://www.herodios.com/atsign.htm">original</a>.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>20</wp:post_id>
  <wp:post_date>2005-09-28 15:08:00</wp:post_date>
  <wp:post_date_gmt>2005-09-28 15:08:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>what-indians-call-the-symbol</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="outsourcing"><![CDATA[Outsourcing]]></category>
  <wp:comment>
    <wp:comment_id>10024</wp:comment_id>
    <wp:comment_author><![CDATA[yosh]]></wp:comment_author>
    <wp:comment_author_email>yoshtalwar@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>188.222.240.216</wp:comment_author_IP>
    <wp:comment_date>2012-09-12 13:48:04</wp:comment_date>
    <wp:comment_date_gmt>2012-09-12 17:48:04</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I'm Indian and I just spent 6 months in India after many years away and I must have heard "adderate" a billion times on my trip. It was fascinating to hear, but ultimately quite annoying. I do wish people would just say "at" or "at sign".]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1347472084</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";d:1347472085.0389330387115478515625;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:9:"yshtalwar";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2012-09-12 17:48:04</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Getting ready for OOPSLA</title>
  <link>http://invisibleblocks.com/2005/10/10/getting-ready-for-oopsla/</link>
  <pubDate>Mon, 10 Oct 2005 18:19:00 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">https://invisibleblocks.wordpress.com/2005/10/10/getting-ready-for-oopsla/</guid>
  <description/>
  <content:encoded><![CDATA[I have no idea what I'm in for, since this is my first conference.  I signed up for two <a href="http://www.oopsla.org/2005/ShowEvent.do?id=804">DesignFest </a>sessions.  I asked for the on-line image management problem and the teamwork software for children's physical therapists...I only hope the groups I'm in are forgiving, because I expect I'll be like that kid brother you used to let tag along.  :shrug:  We'll see how it goes.

A lot of the talks sound good.  I'll post most of my thoughts here -- I have to gather them all for a Conference Attendance Presentation paper (due something like two days after I get back to work), and this should be a nice place to start collecting them.

Maybe I'll see you there.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>21</wp:post_id>
  <wp:post_date>2005-10-10 18:19:00</wp:post_date>
  <wp:post_date_gmt>2005-10-10 18:19:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>getting-ready-for-oopsla</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="conferences"><![CDATA[conferences]]></category>
</item>
<item>
  <title>Outsourcing as Bargain-Basement Software</title>
  <link>http://invisibleblocks.com/2005/10/14/outsourcing-as-bargain-basement-software/</link>
  <pubDate>Fri, 14 Oct 2005 18:47:00 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">https://invisibleblocks.wordpress.com/2005/10/14/outsourcing-as-bargain-basement-software/</guid>
  <description/>
  <content:encoded><![CDATA[Two trains of thought have been merging lately: the poor quality of the outsourced project I was working on, and "The Source Code is the Design" (see both the <a href="http://www.developerdotstar.com/mag/articles/reeves_design.html">original article at developer.*</a> and the <a href="http://xp.c2.com/TheSourceCodeIsTheDesign.html">XP Wiki page discussing it</a>).

The gist of "The Source Code is the Design" is that coding is a design activity, not a construction activity. High-level design (UML, specs, etc) still has to be done, but when you're coding, you're still doing design work, making design decisions that affect the eventual outcome. If business people and software managers want quality software, they should understand this, and avoid hiring code grunts. This makes sense to me.

On the other train of thought, I still see poor quality software being produced by off-shore programmers. I'm speaking entirely from my own experience, and the experience of people I know personally and have worked with. We'd have done a much better job. We regularly had to hobble the initial design because of pushback by The Vendor, and the code they delivered was poor beyond belief. It works, yes, but I hope never to have to plumb its depths. It violates most of our standards, and many basic principles of programming, period. Although it does work now.  After some thumping and kicking.

These two trains of thought come together at (I think) a disappointing conclusion. Track one: management has to wake up about how it thinks about programming, if it wants quality software. Track two: management is paying for cheaper, lower-quality software. Conclusion: great quality isn't what's wanted.

This first made me think of the shift from custom work to manufacturing. But with manufacturing, the final product is generally better than a custom one. Not at first, maybe, but once the production line has had the kinks worked out, the product is consistent, and warranties protect against lemons.

It's closer to buying low-quality products that are just good enough for how you intend to use them. I could buy a Mercedes, but if I drive a Kia, with the left-over cash I can do stuff that's more important to me than the experience of driving a sexy, finely-tuned sports car. Tools are a better analogy, since they're bought primarily for utility. Whether you buy a top-of-the-line model or the cheapest depends on how sensitive you are to its quality, how long you'll use it, and how important it is to do quality work. This is why professionals and hobbyists have nice gear, and amateurs and casual users have cheap stuff: pros have their reputation and customer satisfaction on the line, and hobbyists are spending their free time using it. I like to program, so I have a nice laptop. I rarely need a chainsaw, so I have a cheap, sissy little 14-inch electric one (in fact, I broke it over a month ago, and still haven't fixed it).

So if you're trying to decide which software package to buy, you want to know how much it costs, how good it is, and how good it has to be for you. If you're trying to sell a software package, you need to know how good your product is, how it compares to the competitors (both on quality and cost), and how good your customers need it to be. And then you need to sell yourself. Right now, U.S. IT departments are pricey, and don't advertise themselves very well. Off-shore IT shops are cheaper, and have great PR. Guess who's getting the business? There are other factors that make business people hesitate (just google "outsourcing risks"), but as those problems are solved, U.S. shops will have to get better at selling themselves, showcasing what they can do for the business.

I have some ideas how my IT department could do better: our business customers think we're too slow, and too expensive. I've suggested we try some agile projects, and loosen the stifling framework we work under. IT management sees it the other way: tighten the process so it's easy to integrate with cheap off-shore vendors. I haven't made much headway yet, but I think agile's emphasis on just-good-enough software and tight feedback loops might be the ticket to lowering cost and showing the business just how fast we can be.
]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>22</wp:post_id>
  <wp:post_date>2005-10-14 18:47:00</wp:post_date>
  <wp:post_date_gmt>2005-10-14 18:47:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>outsourcing-as-bargain-basement-software</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="outsourcing"><![CDATA[Outsourcing]]></category>
  <wp:comment>
    <wp:comment_id>15</wp:comment_id>
    <wp:comment_author><![CDATA[The Other Dan]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url/>
    <wp:comment_author_IP>69.37.72.236</wp:comment_author_IP>
    <wp:comment_date>2005-10-19 18:34:00</wp:comment_date>
    <wp:comment_date_gmt>2005-10-19 18:34:00</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Good thoughts...
India has done a much better job of marketing their IT abilities.  The perception is that there are millions of expert programmers ready to churn out code for pennies on the dollar.  The code that I've seen come from outsourced projects is often below average.  Which leads me to believe that many times you have a few talented developers working on a project, of course acting as the face of the outsource company,but the majority of the actual programming is done by junior programmers...could these be the grunts we're trying to avoid?

Management is drawn by the speed to market and low cost of outsourcing.  Outsourcing companies have more programmers, are better at collaborative development, and they don't have to consider ease of maintenance and other quality aspects to the extent that in-house developers would.

The business folks don't care about these quality aspects of an application, until they start costing them money.  And where is the majority of money spent (or lost  due to slow change turnaround/missed opp.,  etc.) on an application?  Maintenance

Obviously, poor code is harder to maintain than quality code.  So, it seems they are willing to trade lower development costs for higher maintenance costs.  This can have the ironic side-effect of lowering management's confidence in the maintenance team, not the outsource company. It also ends up costing the company more over the lifespan of the application.  Buyer Beware!

PS. Be a man, use an axe!]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2005-10-19 18:34:00</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Horray, The Vendor's code is improving!</title>
  <link>http://invisibleblocks.com/2005/10/27/horray-the-vendors-code-is-improving/</link>
  <pubDate>Thu, 27 Oct 2005 15:49:00 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">https://invisibleblocks.wordpress.com/2005/10/27/horray-the-vendors-code-is-improving/</guid>
  <description/>
  <content:encoded><![CDATA[I'm happy to say the code is getting much better.  This presents some new information to my thinking about off-shoring...

Along those lines, while I was at <a href="http://www.oopsla.org/2005/ShowPage.do?id=Home">OOPSLA</a> (I know, I didn't post anything from there yet -- getting to it), I talked with a developer from Holland whose company outsources regularly to Romania. Apparently, he gets much better code than our initial batch -- he wasn't worried about code quality, and even talked about leaving things for his developers to finish designing, so they don't get bored. This sounds like a much healtier working relationship. I plan on emailing him soon to talk more.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>23</wp:post_id>
  <wp:post_date>2005-10-27 15:49:00</wp:post_date>
  <wp:post_date_gmt>2005-10-27 15:49:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>horray-the-vendors-code-is-improving</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="outsourcing"><![CDATA[Outsourcing]]></category>
  <wp:comment>
    <wp:comment_id>17</wp:comment_id>
    <wp:comment_author><![CDATA[Shawn Crahan]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url/>
    <wp:comment_author_IP>69.37.72.236</wp:comment_author_IP>
    <wp:comment_date>2005-10-27 16:51:00</wp:comment_date>
    <wp:comment_date_gmt>2005-10-27 16:51:00</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Wll Dan, you seemed really horrified by the first batch of code, it ould just be a case of it being impossible to get any worse...  Kidding aside, hope the con was fun and I'm probably gonna have to call you later toorrow since I have describe a fictionalvisit I would be having from a friend for deutsch klasse.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2005-10-27 16:51:00</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Trying some agility</title>
  <link>http://invisibleblocks.com/2005/11/16/trying-some-agility/</link>
  <pubDate>Wed, 16 Nov 2005 19:45:00 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">https://invisibleblocks.wordpress.com/2005/11/16/trying-some-agility/</guid>
  <description/>
  <content:encoded><![CDATA[I had an interesting conversation with a co-worker recently. We got to discussing a small project we were on back in January '05, that basically involved creating a small dynamic questioner. You configure the interview by creating questions, and each possible answer to the question leads to either another question, or an outcome. We modelled the interview as a <a href="https://en.wikipedia.org/wiki/Directed_acyclic_graph">directed acyclic graph</a> (I know, you already knew about DAGs -- the link is for the other readers). We built a test tool that traversed the DAG, and reported all possible paths. We even (this was pretty cool) built an importer that created interviews from <a href="http://freemind.sourceforge.net/wiki/index.php/Main_Page">FreeMind</a> mind maps...basically made FreeMind our GUI. We did all this in about 3 weeks (Java and XSL, if anyone's wondering). We had fun, and both our management and our customers loved it. It's loads easier to change the questions now than it would've been if the questions were just hard-coded, the way everyone expected it to be done. I think we even beat the estimate for that approach.

Anyway. We realized the other day that our approach for that mini-project could be called agile. On the project, we tackled as much of the problem as we could understand, just trying to make things better. Dozens of special-case rules for which question is asked when? Let's make that generic, and configure the questions. Redundant branches in that hierarchical question tree? Let's optimize it into a DAG. Hard to write all that XML? Let's use FreeMind for its nodes-to-XML interface, and transform it. Hard to test all 30,000-odd paths through this mess? Automatic tester. Build a little, see a little further, build a little more.

Now, I'm on a much larger, higher-profile project: replace our hand-grown portal (pretty cheesy) with a commercial portal product. How we implement the portal product will impact a lot of future development, since a number of other teams will be building for the portal, and learning from or building on our work. [This is what I'm hearing, anyway.] No one on the project has any experience with this portal product (horray!). After spinning my wheels a bit, I realized the only way we could get anything done was to start building, and find our way as we go. We need experience with this tool, we need scabs on our knees from falling down with it. So our approach this time will be more agile -- more intentionally agile.

This makes my project manager a tad nervous, and with good reason, I think -- agile isn't what you'd call popular around the shop. Not that it's been proven as a bad idea, it's just that (I suspect) all these methods that emphasize coding and doing things without lots of up-front planning sound completely irresponsible to upper management. I think if I talked to some IT execs and said I had no concrete plan for implementing this portal product, they'd respond like my mom did when I said I had no concrete plan for getting through college.

But all that aside, we're doing it anyway.  It seems to me like the only real solution.  I was encouraged when my manager (an ex-architect) said he'd be nervous if we weren't doing it this way.  What most surprised me about all this, though, was how easy it was to get everyone to agree.  My PM is new to the company, my manager loves a good skunk-works project, the other developers on the project were interested -- like all the stars aligned, or something.  And to emphasize that effect, right after everyone agreed to it, I saw Raganwald's post <a href="http://weblog.raganwald.com/2005/10/just-do-it.html">Just do it</a>.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>24</wp:post_id>
  <wp:post_date>2005-11-16 19:45:00</wp:post_date>
  <wp:post_date_gmt>2005-11-16 19:45:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>trying-some-agility</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="job"><![CDATA[Job]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[292320]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>18</wp:comment_id>
    <wp:comment_author><![CDATA[Reginald Braithwaite]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://www.blogger.com/profile/3914785</wp:comment_author_url>
    <wp:comment_author_IP>69.37.72.236</wp:comment_author_IP>
    <wp:comment_date>2005-11-21 16:53:00</wp:comment_date>
    <wp:comment_date_gmt>2005-11-21 16:53:00</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Good luck, Dan! Let us know how it goes.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2005-11-21 16:53:00</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Talking about Software and the Nac Mac Feegle</title>
  <link>http://invisibleblocks.com/2005/12/02/talking-about-software-and-the-nac-mac-feegle/</link>
  <pubDate>Fri, 02 Dec 2005 12:11:00 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">https://invisibleblocks.wordpress.com/2005/12/02/talking-about-software-and-the-nac-mac-feegle/</guid>
  <description/>
  <content:encoded><![CDATA[I was talking with a co-worker about how people imagine obstacles that aren't really there.  You ask them to do something perfectly reasonable, and they tell you it's impossible, because of these imaginary obstacles.  You have to first show them the obstacle isn't there, and then things can proceed.  "Oh," I said, "it's just like First Sight.  Have you ever read the <a href="http://www.amazon.com/gp/product/0060012366/002-9363972-8117650?v=glance&amp;n=283155">Wee Free Men</a>?"  This is a first for me -- talking about software, communication, going from idea to implementation...and referencing a children's book about small blue fighting Scotsmen known as the Nac Mac Feegle, or Wee Free Men.  It's one of Terry Pratchett's Discworld novels.

The idea of First Sight is that you see what's actually there, instead of seeing only what you want to see.  It goes along with Third Thoughts -- First Thoughts are regular thoughts, Second Thoughts are thoughts about the first thoughts, and Third Thoughts are thoughts about your thinking.  Kind of meta-thoughts.

If you haven't read the Wee Free Men, it's a short read, and a lot of fun.  It has so far one sequel, <a href="http://www.amazon.com/gp/product/0060586605/ref=pd_bxgy_text_b/002-9363972-8117650?%5Fencoding=UTF8">A Hat Full of Sky</a>.

"Nac Mac Feegle! The Wee Free Men! Nae King! Nae quin! Nae Laird! Nae master! We willna' be fooled agin!"]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>25</wp:post_id>
  <wp:post_date>2005-12-02 12:11:00</wp:post_date>
  <wp:post_date_gmt>2005-12-02 12:11:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>talking-about-software-and-the-nac-mac-feegle</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="software-thinking"><![CDATA[Software Thinking]]></category>
  <category domain="post_tag" nicename="weird"><![CDATA[Weird]]></category>
  <wp:comment>
    <wp:comment_id>19</wp:comment_id>
    <wp:comment_author><![CDATA[Shawn]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url/>
    <wp:comment_author_IP>69.37.72.236</wp:comment_author_IP>
    <wp:comment_date>2005-12-19 03:14:00</wp:comment_date>
    <wp:comment_date_gmt>2005-12-19 03:14:00</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[<I>Nac Mac Feegle's!?!</I> Dan, you are a dork!]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2005-12-19 03:14:00</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>JavaScript OO and Function Pointers</title>
  <link>http://invisibleblocks.com/2006/01/10/javascript-oo-and-function-pointers/</link>
  <pubDate>Tue, 10 Jan 2006 22:03:00 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">https://invisibleblocks.wordpress.com/2006/01/10/javascript-oo-and-function-pointers/</guid>
  <description/>
  <content:encoded><![CDATA[A few things converged nicely for me this week:  function pointers in JavaScript, and hacking the browser's DOM.  I think I'll talk about function pointers and JavaScript's OO, and leave browser DOM hacking for the next post.

I picked up function pointers from Ruby.  They're there in lots of languages, but Ruby's where I discovered them.  Even though I've been using JavaScript for years, I never saw them staring me in the face.  Now that I get them, I finally get JavaScript's OO paradigm.  When you say:
[sourcecode language='jscript']function PublicSpeaker() {
    this.greet = _greet;
}
function _greet() {
    alert("Hello, everyone.");
}
new PublicSpeaker().greet();[/sourcecode]
...the deal is that <code>this.greet</code> is an instance variable of PublicSpeaker whose value is a function pointer, and JavaScript interprets <code>new PublicSpeaker().greet()</code> as "since <code>greet</code> is a function pointer, call the function it points to" (naturally).  And when you say:
[sourcecode language='jscript']function BadPublicSpeaker() {
    this.inheritFrom = PublicSpeaker;
    this.inheritFrom();
}[/sourcecode]
...you're setting the object's instance variable <code>inheritFrom</code> to the
PublicSpeaker function (bummer that you have to explicitly call the super constructer, though).

[I know I can use the <code>prototype</code> method of establishing inheritance, but I'm not entirely comfortable with it yet...I don't grok it, and I do grok this.  And just in case, here's <a href="http://www.ibiblio.org/lou/old/ball/chronicle/jargon.grok.html">what grok means</a>.]

It seems most of JavaScript's object-orientedness is based on function pointers.  This probably explains why I hated JavaScript's OO:  I didn't grok function pointers, so I was missing most of the picture.  I could never remember that wacky syntax.  I used to call it "object-scented" (oh, the hilarity).

All this improved understanding of JavaScript makes it much easier to start hacking the browser's DOM (among other things), which I'll get to later.  In the meantime, you can dig on <a href="http://www.webreference.com/js/column79/">Object-Oriented Programming with JavaScript</a>.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>26</wp:post_id>
  <wp:post_date>2006-01-10 22:03:00</wp:post_date>
  <wp:post_date_gmt>2006-01-10 22:03:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>javascript-oo-and-function-pointers</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="javascript"><![CDATA[JavaScript]]></category>
  <category domain="category" nicename="programming"><![CDATA[Programming]]></category>
  <wp:comment>
    <wp:comment_id>9714</wp:comment_id>
    <wp:comment_author><![CDATA[Jayapal Chandran]]></wp:comment_author>
    <wp:comment_author_email>jayapalchandran@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://vikku.info</wp:comment_author_url>
    <wp:comment_author_IP>122.165.53.27</wp:comment_author_IP>
    <wp:comment_date>2010-05-26 04:28:48</wp:comment_date>
    <wp:comment_date_gmt>2010-05-26 08:28:48</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[i want to do like this but it dosent work in IE6.

function request(param,path,obj)
{
	var jax = createAjax();
	jax.open("POST",path,true)
	jax.setRequestHeader('Content-Type','application/x-www-form-urlencoded')
	jax.onreadystatechange = obj
	jax.send(param)

}

	var param = makeParam("command,addvideo,url,url");
	request(param,jaxpath, function () { if(this.readyState==4) {
		alert(this.responseText)
	}})

because in ie6 this refers to window object and not like the c++ object rules.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2010-05-26 08:28:48</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9674</wp:comment_id>
    <wp:comment_author><![CDATA[Michelle]]></wp:comment_author>
    <wp:comment_author_email>michmy@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>208.237.178.229</wp:comment_author_IP>
    <wp:comment_date>2009-09-16 14:00:24</wp:comment_date>
    <wp:comment_date_gmt>2009-09-16 18:00:24</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[couldn't we do

function BadPublicSpeaker() {  
     this.inheritFrom = PublicSpeaker();  
}  

?]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2009-09-16 18:00:24</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9675</wp:comment_id>
    <wp:comment_author><![CDATA[Daniel Bernier]]></wp:comment_author>
    <wp:comment_author_email>danbernier@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://invisibleblocks.wordpress.com/</wp:comment_author_url>
    <wp:comment_author_IP>63.164.47.227</wp:comment_author_IP>
    <wp:comment_date>2009-09-24 23:14:43</wp:comment_date>
    <wp:comment_date_gmt>2009-09-25 03:14:43</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Hey Michelle,

You know, you probably could.  I'd test it out and see -- "a test is worth a thousand expert opinions," and I'm not even an expert.  I'd test it out myself now, but I'm on my wife's netbook in an airport, and I don't want to bother with notepad.  Call me lazy. :) 

It's been a *long* time since I wrote this post, and my JavaScript style has changed substantially.  I think I'd do things very differently now, like perhaps avoiding class-style OO in JavaScript.  Check out Douglas Crockford's "JavaScript: The Good Parts," it's a good read, and very short.  http://www.amazon.com/JavaScript-Good-Parts-Douglas-Crockford/dp/0596517742]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>292320</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2009-09-25 03:14:43</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Hacking the Browser's DOM for Fun</title>
  <link>http://invisibleblocks.com/2006/01/18/hacking-the-browsers-dom-for-fun/</link>
  <pubDate>Wed, 18 Jan 2006 18:44:00 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">https://invisibleblocks.wordpress.com/2006/01/18/hacking-the-browsers-dom-for-fun/</guid>
  <description/>
  <content:encoded><![CDATA[Hacking the browser's DOM is about traversing its structure, changing it around, and generating content.  It's the sexy half of <a href="http://en.wikipedia.org/wiki/AJAX">Ajax</a> -- the part that changes the page <em>before your very eyes!</em>  I won't go into Ajax here, as there are other places that cover it far better than I can.  Without Ajax's other half, asynchronous HTTP, I'm not entirely sure how useful DOM hacking is, but it's fun, and I've found at least a few good uses for it.  YMMV -- others on my team find it somewhat less attractive than I do.  Along the way I'll talk about function pointers, and throw in some recursion.

<h3>DOM Traversal</h3>
If you want to do anything interesting with the DOM, you have to see what's in there first.  The standard methods <code>document.getElementById()</code> and <code>document.getElementsByTagName()</code> are pretty useful here, but let's create a third option, one that's more flexible, and shows off our new function pointers knowledge:
[sourcecode language='jscript']
function getElements (evalFunc, node) {
   if (!node) node = document.documentElement;

   var matches = new Array();  // storage space
   if (evalFunc(node))         // if it's a match...
       matches.push(node);     // store it

   var child = node.firstChild;
   while (child) {                // search thru each child
       matches = matches.concat(getElements(evalFunc, child));
       child = child.nextSibling;
   }

   return matches;
}
var headers = getElements(
   function(node) {
       return node.nodeName.length == 2 &&
       node.nodeName.charAt(0) == "H";
   });
[/sourcecode]
Let's start with <code>getElements()</code>.  First, notice that it defaults <code>node</code> to <code>document.documentElement</code>, so if you call it without a node parameter, it'll cover the whole document.  Groovy, now we can forget about that.  Now notice the <a href="http://en.wikipedia.org/wiki/Recursion#Recursion_in_computing">recursion</a>, and the structure of what it does -- return an Array of nodes that meet <code>evalFunc</code>'s criteria.  It's classic recursive behavior:  work on <code>this</code>, then work on <code>this</code>'s children (if any), and collect all the results.

It might seem like overkill, creating a whole new function -- but look at how it's used, and the power it gives you.  We can get an Array of header tags by defining what a header looks like.  "If the node name is 2 long, and starts with 'H', include it."  We could use a regular expression if we wanted to.  We can pick nodes that match any criteria we can express in JavaScript.
[sourcecode language='jscript']var leafNodes = getElements (function(node) {
   return !node.hasChildNodes(); // no children = a leaf node
});

var imagesWithAltText = getElements (
   function(node) {
       if (node.nodeName == "IMG") {
           return node.getAttribute("alt") != "";
       }
       return false;
   });
[/sourcecode]
See how handy function pointers are?  They're like little nuggets of code you can throw around.  This "evaluator function" approach reminds me both of Ruby's <code>Enumerable.find_all</code> method, and Java's <code>FileFilter</code> and <code>FilenameFilter</code> interfaces.  Or really, any case where you want lots of control over how you select items from a collection.  Note that because Java doesn't have function pointers like Ruby and JavaScript, it makes you wrap your function in a class (technically called a <em>functor</em>).

<h3>Creating Nodes</h3>
So now we can pick out nodes, let's start creating new ones.  This is pretty easy, except for the usual browser differences.  I run Firefox 1.5 and IE 6, and my code for here will work in IE 6.  I'll note some basic Firefox issues as I go, but nothing too extensive.

In IE 6, you create a new node like this:
[sourcecode language='jscript']
var myDivNode = document.createElement("&lt;div&gt;");
[/sourcecode]
You can stuff any valid HTML in there, as far as I know, except it has to be an empty node.  If you want to create, say, a hyperlink, you create both the anchor node and the text node, and append the text node into the anchor node:
[sourcecode language='jscript']
var linkNode = document.createElement("&lt;a href='http://www.google.com'&gt;&lt;/a&gt;");
var linkLabel = document.createTextNode("Google");
linkNode.appendChild(linkLabel);
[/sourcecode]
In Firefox 1.5, you only pass the tag name to <code>document.createElement()</code>, and you call <code>elem.setAttribute("attrName", "attrValue")</code> for all your attributes.  Definitely tedious.

Note that <code>linkNode.appendChild(linkLabel)</code> there.  It does just what it says:  makes <code>linkLabel</code> a child of <code>linkNode</code>.  Along with <code>insertBefore</code>, <code>removeChild</code>, and <code>replaceChild</code>, you can quickly get used to chaging the DOM at runtime.  [See this <a href="http://krook.org/jsdom/">JavaDoc-style JavaScript site</a> for the details.]

I'll stop here, and save the practical applications for another post.  Some ideas, though:
<ul>
<li>creating a table of contents from all header tags</li>
<li>putting captions on all images that have alt text</li>
<li>formatting external links differently from internal ones</li>
</ul>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>27</wp:post_id>
  <wp:post_date>2006-01-18 18:44:00</wp:post_date>
  <wp:post_date_gmt>2006-01-18 18:44:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>hacking-the-browsers-dom-for-fun</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="javascript"><![CDATA[JavaScript]]></category>
  <category domain="category" nicename="programming"><![CDATA[Programming]]></category>
</item>
<item>
  <title>Practical Applications of Browser DOM Hacking</title>
  <link>http://invisibleblocks.com/2006/01/22/practical-applications-of-browser-dom-hacking/</link>
  <pubDate>Sun, 22 Jan 2006 22:00:00 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">https://invisibleblocks.wordpress.com/2006/01/22/practical-applications-of-browser-dom-hacking/</guid>
  <description/>
  <content:encoded><![CDATA[I've been talking about hacking the browser's DOM lately.  Now, here are some situations where this might be useful -- but I'll only lightly cover them, and leave further exploration up to you.  [Not because I'm trying to be clever and educational, but because Blogger strips out bunches of my HTML snips, even if I use escape chars.  If you have any suggestions, I'm all ears.]  Ok, practical applications of <a href="{% post_url 2006-01-10-javascript-oo-and-function-pointers %}">new</a> <a href="{% post_url 2006-01-18-hacking-the-browsers-dom-for-fun %}">knowledge</a>, here we go!

<h3>Generate a Table of Contents</h3>
Suppose we have some ordinary HTML:  some h1s, h2s, h3s, ps, and imgs.  Maybe we've thrown in some handy CSS, so it looks nice.  Now we want to generate a table of contents at the top of the page, so changes to the contents are automatically reflected above.  Let's say headers make up the links in the table of contents.

Using the getElements() function from <a href="{% post_url 2006-01-18-hacking-the-browsers-dom-for-fun %}">last post</a>, we can get an Array of all the header nodes:
[sourcecode language='jscript']var headers = getElements(
    function(node) {
        return node.nodeName.length == 2 &&
        node.nodeName.charAt(0) == "H";
    });[/sourcecode]
Now, we can create a TOC that lists each header.  At the top of the page, create and insert a div to hold the table of contents -- let's call it tocDiv.  Then, for each header node, do two things:

1. Insert an anchor into tocDiv.  Set its href to <code>'#' + header.innerText</code>.  Add to it a text node (using <code>document.createTextNode()</code>) containing the header's innerText.
2. Insert a named anchor right before the header, using <code>header.parentNode.insertBefore()</code>.  Set its name to <code>header.innerText</code>, so the TOC link points to it.

Now, at the top of the page, you have a list of links...each one linking to a header tag below, with the same text as the header it links to.  You can do some neat formatting with CSS, too...for the tocDiv links, set their CSS class attribute to something like <code>'toc_' + header.nodeName</code>. Then add CSS class definitions for <code>toc_h1</code>, <code>toc_h2</code>, etc, to make it look more like an outline (you know, make the h1's big and bold, the h2's smaller, that kind of thing).  If you want to get really fancy, you can wrap each header node in an anchor that links up to the table of contents...even give it a title of "Back to Table of Contents" using <code>node.setAttribute("title", "Back to Table of Contents")</code>.

<h3>Make a "List of figures", and put captions on images</h3>
This one's also geared towards creating an outline, and will be pretty similar to the table of contents. Suppose you have images that aren't there for decoration or formatting, but are supposed to convey information (diagrams, charts, etc).  Let's assume that each has a meaningful alt tag.  We can create a list of figures that lists the title of the image (i.e., the alt text), and links to it.

First, like we did for the table of contents, insert a node into the document to hold your list of figures.  Let's say it's a div called figList.

Get all the images using <code>document.getElementsByTagName("img")</code>, and make a link pointing to each one. For each img node, again do two things:

1. Add an anchor to figList.  Get the img's alt text via <code>img.getAttribute("alt")</code> -- then use it for the anchor's text, and set the anchor's href to <code>'#' + altText</code>.
2. Insert a named anchor before each img node, and set its name to altText.

Adding captions is really simple.  While you're looping through the list of img nodes, insert a span after each one, with class set to "caption".  Set the text to <code>"Figure " + i + ": " + altText</code>, and you've got automatically numbered caption images.

<h3>Format hyperlinks based on where they lead</h3>
I think I read a <a href="http://www.useit.com">Jakob Nielsen</a> article that suggested telling users before they click on a link that it'll take them to another site.  Why not put an icon next to each link whose href starts with "http://"?
[sourcecode language="jscript"]
var externalLinks = getElements(
    function(node) {
        // nodeType == 1 means it's an Element
        if (node.nodeType == 1 && node.nodeName == "A") { 
            return node.getAttribute("href").indexOf("http://") <= 0;
        }
    });
[/sourcecode]
Using <a href="http://en.wikipedia.org/wiki/AJAX">AJAX</a>, you can get really crazy -- make a server-side component that returns the file size of a given URL.  Now, grab all the links that point to a .pdf, .doc, .zip, or whatever, get the actual size from the server, and tell the user up-front how big the file is.

<h3>Checking our sanity</h3>
Just to reiterate, we're talking about changing the HTML structure at runtime.  Let's step back a sec and talk about that.

1. The server delivers a stream of text to the browser.
2. The browser parses it and builds a "mental" model of what it says.
3. The browser renders some text and color on the screen based on that model.

We're talking about changing that model around at runtime, not the bytes sent to the browser.  This means that if you View &gt; Source on your page, you'll see the original HTML, and none of the fancy nodes you added or rearranged.

To help us see the havoc we've wreaked on the DOM, we can hack up a simple bookmarklet to dump out the DOM as HTML in a new window.  It's as easy as this:

* open a window
* write out a big textarea to it (use <code>style="width:100%;height:95%"</code>)
* fill the textarea with this window's <code>document.documentElement.innerHTML</code>

<h3>Closing thoughts</h3>
There are some general ideas that I'm using in many of these suggestions:

* Use CSS classes, sometimes named after the node name, to keep your HTML-generating JavaScript clean.
* Use plain text for named anchors, like header.innerText or img.getAttribute("alt").  In programming, we usually shy away from using plain text for identifiers, because it's easy to mis-type...but if you're generating all your identifiers, who cares?
* Use function pointers as general-purpose selectors, instead of trying to support several types of limited selector.  For example, instead of getElementById(id), getElementNamed(tagName), and a hypothetical getElementWithAttribute(attrName, attrVal), why not just getElement(evalFunction)?
* Two of these ideas made the assumption that your HTML is organized a certain way, which isn't always possible.  If you have a page with lots of formatting (those pesky web designers), see if you can cordon off a section of clean HTML -- just a div with an id -- and only scan those nodes.  Another reason to use getElements() instead of the globally-scoped methods the browser provides.

Use these techniques to come up with new and exciting ways to bend the browser's DOM to your will.  Muahahahaha.

For more info:
<a href="http://krook.org/jsdom/">JavaDoc-style JavaScript</a>, pretty browser-independent
<a href="http://www.mozilla.org/docs/dom/domref/dom_shortTOC.html">Gecko DOM reference</a> for Firefox
<a href="http://en.wikipedia.org/wiki/AJAX">AJAX</a>, DOM Hacking's most typical setting]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>28</wp:post_id>
  <wp:post_date>2006-01-22 22:00:00</wp:post_date>
  <wp:post_date_gmt>2006-01-22 22:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>practical-applications-of-browser-dom-hacking</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="javascript"><![CDATA[JavaScript]]></category>
  <category domain="category" nicename="programming"><![CDATA[Programming]]></category>
  <wp:comment>
    <wp:comment_id>20</wp:comment_id>
    <wp:comment_author><![CDATA[e40]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://www.blogger.com/profile/8323039</wp:comment_author_url>
    <wp:comment_author_IP>69.37.72.236</wp:comment_author_IP>
    <wp:comment_date>2006-01-27 11:04:00</wp:comment_date>
    <wp:comment_date_gmt>2006-01-27 11:04:00</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[It would be nice if you put it all together and showed the final examples.  As is it, I find the info interesting, but have no idea how to really use it.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2006-01-27 11:04:00</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>21</wp:comment_id>
    <wp:comment_author><![CDATA[Dan Bernier]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://www.blogger.com/profile/6051054</wp:comment_author_url>
    <wp:comment_author_IP>69.37.72.236</wp:comment_author_IP>
    <wp:comment_date>2006-01-27 19:06:00</wp:comment_date>
    <wp:comment_date_gmt>2006-01-27 19:06:00</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Yeah, I originally tried to get lots more sample JavaScript into the post, but Blogger does some weird parsing things when you go between Edit HTML, Compose, Preview, and Posted modes.  I'll try to get some samples hosted somewhere soon...I know I have the Table of Contents and the Image Auto Captioner built already.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2006-01-27 19:06:00</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>22</wp:comment_id>
    <wp:comment_author><![CDATA[Dan Bernier]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://www.blogger.com/profile/6051054</wp:comment_author_url>
    <wp:comment_author_IP>69.37.72.236</wp:comment_author_IP>
    <wp:comment_date>2006-03-07 11:36:00</wp:comment_date>
    <wp:comment_date_gmt>2006-03-07 11:36:00</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[e40, I posted some examples at http://www.myjavaserver.com/~danbernier/invisibleBlocks/domHacking/domHacking.html ...give them a look.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2006-03-07 11:36:00</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Examples of DOM Hacking</title>
  <link>http://invisibleblocks.com/2006/03/06/examples-of-dom-hacking/</link>
  <pubDate>Mon, 06 Mar 2006 21:27:00 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">https://invisibleblocks.wordpress.com/2006/03/06/examples-of-dom-hacking/</guid>
  <description/>
  <content:encoded><![CDATA[Finally!  You can see a full-blown example of the techniques I've been discussing <a href="http://invisibleblocks.wordpress.com/files/2006/07/domhacking.txt">here</a> (the code's for IE only).

Sorry this took awhile, I've been a little behind lately. The good news is the code took me all of an hour to sling together...the real time was spent organizing, cleaning, and documenting it so it's easy to follow.

DOM hacking is of course most widely used as part of <a href="http://en.wikipedia.org/wiki/AJAX">Ajax</a>, to update the page with whatever data the asynchronous HTTP call brings back -- but you can still do a lot without ever leaving the client.  For example, check out the <a href="http://www.barelyfitz.com/projects/tabber/">JavaScript Tabifier</a>.  I haven't looked at the code too much, but it looks like it's in a similar vein.

There's also <a href="http://www.kryogenix.org/code/browser/sorttable/">code to make HTML tables sortable</a> from Kryogenix.com, which I've used before -- very handy. I believe it uses some of the same techniques. Maybe I'll look them both over, and do a compare/contrast with what I've written here.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>29</wp:post_id>
  <wp:post_date>2006-03-06 21:27:00</wp:post_date>
  <wp:post_date_gmt>2006-03-06 21:27:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>examples-of-dom-hacking</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="javascript"><![CDATA[JavaScript]]></category>
  <category domain="category" nicename="programming"><![CDATA[Programming]]></category>
</item>
<item>
  <title>Software and Belief</title>
  <link>http://invisibleblocks.com/2006/03/20/software-and-belief/</link>
  <pubDate>Mon, 20 Mar 2006 15:45:00 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">https://invisibleblocks.wordpress.com/2006/03/20/software-and-belief/</guid>
  <description/>
  <content:encoded><![CDATA[I spent some good time last week chasing down a bug in our J2EE app.  It turned out that I was using the wrong session attribute name.  Actually, I was using a correct name, because we store the same object in session twice, with different names (let's just not talk about that), and in some situations, the attribute name I used hadn't been populated yet.  When I wrote my code, I thought I knew what the attribute name was (and I was sort of right), but I didn't double-check.

I enjoy finding my mistakes.  I don't mean that as, "better than QA finding them for me," although I guess that's true, too.  I think I like finding them because bugs often stem from incorrect beliefs, and fixing bugs is a chance to revise your beliefs.  Software is a belief-intensive activity:  you believe the web server is configured a certain way, you believe your cookie is being deleted at a certain point in the log-out process.  We believe these things because we don't want to verify them, and as long as things work as we expect them to, we're happy.

The fun starts when our beliefs don't match our experience.  Suddenly you're faced with hard evidence that what you believe is wrong.  You can choose to ignore your experience (foolish and pointless), or take time to investigate, and replace your belief with knowledge.  What's nice about software is that you can usually do this just by looking at source code or configuration files.  Imagine how much easier science would be if we could understand a phenomenon by simply looking at its source code.

Maybe we rely so much on belief in software because it's not our job to understand everything, but to make things work a certain way.  Understanding is great, but working software pays the bills.  Of course we have to understand lots of things to do our job, but since that's not our goal, we abstract away anything we can.  I mean, isn't abstraction one of the core ideas of computing and programming?  Building up layers of abstraction is like asking the programmer to sustain belief in the lower layers.

This shows up in lots of situations:  developers arguing about whose code is causing buggy behavior, developers arguing about exactly what a tool does under the hood, developers arguing about which redundant server they're running on...  You can argue about anything you believe in, but you can't argue for long about facts.  Argument indicates conflicting perspectives or opinions, which mostly boils down to belief.

I guess the lesson here is to remember this, and not to be too certain in your (software) beliefs.  If you find yourself in an argument, try to understand the beliefs on each side, and at least acknowledge that you're stating a belief.  Remember Voltaire: "Doubt is not a pleasant condition, but certainty is absurd."

PS:  Terry Pratchett's The Bromeliad Trilogy (<a href="http://www.amazon.com/o/asin/0060094966">Truckers</a>, <a href="http://www.amazon.com/o/asin/006009494X">Diggers</a>, and <a href="http://www.amazon.com/o/asin/0060094958">Wings</a>) is a great story about when belief and experience collide.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>30</wp:post_id>
  <wp:post_date>2006-03-20 15:45:00</wp:post_date>
  <wp:post_date_gmt>2006-03-20 15:45:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>software-and-belief</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="software-thinking"><![CDATA[Software Thinking]]></category>
  <wp:comment>
    <wp:comment_id>34</wp:comment_id>
    <wp:comment_author><![CDATA[jpmccusker]]></wp:comment_author>
    <wp:comment_author_email>jim@nepaug.com</wp:comment_author_email>
    <wp:comment_author_url>http://subluminal.wordpress.com/</wp:comment_author_url>
    <wp:comment_author_IP>71.234.116.236</wp:comment_author_IP>
    <wp:comment_date>2006-07-20 23:33:57</wp:comment_date>
    <wp:comment_date_gmt>2006-07-21 03:33:57</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[So... It sounds like it was written in C++, then. Says the ex-C++er.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>318630</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2006-07-21 03:33:57</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>23</wp:comment_id>
    <wp:comment_author><![CDATA[Reed]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url/>
    <wp:comment_author_IP>69.37.72.236</wp:comment_author_IP>
    <wp:comment_date>2006-03-22 14:17:00</wp:comment_date>
    <wp:comment_date_gmt>2006-03-22 14:17:00</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[That was inciteful, I particularly enjoyed the metaphor you used to understand science.  If only the universe was written in C++...]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2006-03-22 14:17:00</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>24</wp:comment_id>
    <wp:comment_author><![CDATA[Dan Bernier]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://www.blogger.com/profile/6051054</wp:comment_author_url>
    <wp:comment_author_IP>69.37.72.236</wp:comment_author_IP>
    <wp:comment_date>2006-03-24 14:49:00</wp:comment_date>
    <wp:comment_date_gmt>2006-03-24 14:49:00</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[If the universe was written in C++, 1) it would take God's intellect to understand it all, and 2) can you imagine all the bugs?]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2006-03-24 14:49:00</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>The New -Blue and Orange- Invisible Blocks</title>
  <link>http://invisibleblocks.com/2006/03/24/the-new-blue-and-orange-invisible-blocks/</link>
  <pubDate>Fri, 24 Mar 2006 09:57:00 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">https://invisibleblocks.wordpress.com/2006/03/24/the-new-blue-and-orange-invisible-blocks/</guid>
  <description/>
  <content:encoded><![CDATA[Time for a new look!  After reading about <a href="http://pro.html.it/articoli/id_599/idcat_31/pag_1/pag.html">Nifty Corners</a>, I decided it was time to go for that simpler, cleaner look I wanted.  It's still a bit bumpy, and I'm working things out slowly.  If you see something amiss, or even if you love/hate the new look, feel free to let me know...

Update:  Scratch that.  That was a bad idea.  Let's see if these colors are less offensive.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>31</wp:post_id>
  <wp:post_date>2006-03-24 09:57:00</wp:post_date>
  <wp:post_date_gmt>2006-03-24 09:57:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>the-new-blue-and-orange-invisible-blocks</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="meta-blog"><![CDATA[Meta-blog]]></category>
  <wp:comment>
    <wp:comment_id>25</wp:comment_id>
    <wp:comment_author><![CDATA[Anonymous]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url/>
    <wp:comment_author_IP>69.37.72.236</wp:comment_author_IP>
    <wp:comment_date>2006-04-13 17:37:00</wp:comment_date>
    <wp:comment_date_gmt>2006-04-13 17:37:00</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[The orange reminds me of big pumpkins!]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2006-04-13 17:37:00</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>26</wp:comment_id>
    <wp:comment_author><![CDATA[Reed]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url/>
    <wp:comment_author_IP>69.37.72.236</wp:comment_author_IP>
    <wp:comment_date>2006-04-14 07:41:00</wp:comment_date>
    <wp:comment_date_gmt>2006-04-14 07:41:00</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[yes... blue and orange blocks are definitely better suited then the previous green blocks. I approve - Reed]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2006-04-14 07:41:00</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>New Job, No School!</title>
  <link>http://invisibleblocks.com/2006/04/20/new-job-no-school/</link>
  <pubDate>Thu, 20 Apr 2006 09:44:00 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">https://invisibleblocks.wordpress.com/2006/04/20/new-job-no-school/</guid>
  <description/>
  <content:encoded><![CDATA[I've been working for over 6 years for large corporations, but last week I accepted a job offer to work at a much smaller company -- I'll be employee 6 (or 7, if you count the intern).  I'm really excited, my family's excited, my current co-workers keep telling me I'll be missed, and my new co-workers can't wait for me to start, so it's a pretty good time.  And just because that's how life goes, I'll also earn my B.S. in Computer Science after 10 years of full- and part-time study.

But why mention it here?  A few reasons:

* The new job is with .Net, and my background (so far) is in J2EE.  I like the thought of seeing the other side, and doing a balanced compare-and-contrast.  To borrow from <a href="http://www.cryptonomicon.com/beginning.html">Neal Stephenson</a>, "nothing teaches you about your home country like visiting a different one."  [My first impression of the differences is that Java aims to be open, but at the cost of consistency, completeness, and cohesiveness; .Net is more consistent, complete, and cohesive, but closed.  That's very general, so flame away.]  Outcome: new posts.
* My copy of the <a href="http://www.amazon.com/o/asin/0974514055">pick-axe</a> just came in.  I'll spend the week between jobs learning some .Net, of course, but also firming up my Ruby skills.  Meta-programming, dynamic typing, closures, continuations...So many neat things to learn about!  Outcome: new posts.
* I think it's safe to call me an <a href="http://en.wikipedia.org/wiki/Autodidact">autodidact</a>.  Going to school was frustrating because there are so many neat things to learn, and I have to follow the curriculum. [What a whiner!] In any case, no class means I can brush off <a href="http://en.wikipedia.org/wiki/GEB">G.E.B.</a>, maybe <a href="http://en.wikipedia.org/wiki/Zen_and_the_art_of_motorcycle_maintenance">Zen</a>, finish <a href="http://en.wikipedia.org/wiki/Flatterland">Flatterland</a>, and some other things.  Outcome: probably new posts.
I'm really looking forward to the new job, and to no school.  All within a few weeks of each other.  It should be a good summer...]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>32</wp:post_id>
  <wp:post_date>2006-04-20 09:44:00</wp:post_date>
  <wp:post_date_gmt>2006-04-20 09:44:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>new-job-no-school</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="learning"><![CDATA[Learning]]></category>
  <category domain="post_tag" nicename="life"><![CDATA[Life]]></category>
  <wp:comment>
    <wp:comment_id>27</wp:comment_id>
    <wp:comment_author><![CDATA[jeff houser]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://www.jeffryhouser.com</wp:comment_author_url>
    <wp:comment_author_IP>69.37.72.236</wp:comment_author_IP>
    <wp:comment_date>2006-04-21 09:51:00</wp:comment_date>
    <wp:comment_date_gmt>2006-04-21 09:51:00</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Congrats on the new job; and the small company.  I'm sure you'll end up with a much more varied skill set in the long run.

 .NET is an interesting beast; I like it based on my usage.  Are you going to be doing ASP.NET specifically, or generic .NET?

 Are you actually going to be using Ruby on the job, or is it just something you want to learn?]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2006-04-21 09:51:00</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>28</wp:comment_id>
    <wp:comment_author><![CDATA[Dan Bernier]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://www.blogger.com/profile/6051054</wp:comment_author_url>
    <wp:comment_author_IP>69.37.72.236</wp:comment_author_IP>
    <wp:comment_date>2006-04-21 14:11:00</wp:comment_date>
    <wp:comment_date_gmt>2006-04-21 14:11:00</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Thanks!

I'll be using both ASP.Net and general .Net, I believe.  [Any of the guys there can correct me...I'm still learning.]

Ruby is just for fun, I think.  I've been trying to learn it for awhile, but school and life make time scarce. My main thought is that it's a fun language, and pretty different from Java, so it's broadening my horizons. There IS a library for embedding Ruby in .Net, though...  ;-)]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2006-04-21 14:11:00</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>29</wp:comment_id>
    <wp:comment_author><![CDATA[RepellR]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://www.blogger.com/profile/6273528</wp:comment_author_url>
    <wp:comment_author_IP>69.37.72.236</wp:comment_author_IP>
    <wp:comment_date>2006-04-24 14:55:00</wp:comment_date>
    <wp:comment_date_gmt>2006-04-24 14:55:00</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Dan,

As you know, and stated, we are very excited to have you join us.  It is my personal opinion that you will be the 6.5th employee, but that is up for argument.

Anyway, you were correct in your answer to Jeff's question.  We use .NET for everything.  It is the framework that our product is built on.  Because it is mainly a web-based application, you will be primarily working in ASP.NET.  But we do use the .NET framework for other applications, such as web services, command line interfaces, Win Forms, etc.  I believe that is what Jeff is referring to as "generic" .NET.

As for Ruby, we were looking at some tools and you might just get a chance to get paid to play.  Now that you are joining us, you have opened a few more doors.  So, some of your playtime may pay off!]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2006-04-24 14:55:00</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>30</wp:comment_id>
    <wp:comment_author><![CDATA[Dennis]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url/>
    <wp:comment_author_IP>69.37.72.236</wp:comment_author_IP>
    <wp:comment_date>2006-04-27 23:07:00</wp:comment_date>
    <wp:comment_date_gmt>2006-04-27 23:07:00</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Congrats on the new job. Speaking as a "co-slacker", you will surely be missed ofcourse. But, I am very excited about your new gig. It was definatly time for you to move on. Congrats again &amp; Good Luck...

P.S -- I will keep a look out for status on how the new project is going.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2006-04-27 23:07:00</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Conway's "Game of Life", the Glider, and Hackers</title>
  <link>http://invisibleblocks.com/2006/04/21/conways-game-of-life-the-glider-and-hackers/</link>
  <pubDate>Fri, 21 Apr 2006 17:04:00 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">https://invisibleblocks.wordpress.com/2006/04/21/conways-game-of-life-the-glider-and-hackers/</guid>
  <description/>
  <content:encoded><![CDATA[I just ran across <a href="http://www.catb.org/hacker-emblem/">ESR's proposal</a> to adopt the <a href="http://en.wikipedia.org/wiki/The_glider">Glider from Conway's "Game of Life"</a> as a "Universal Hacker Emblem".  I'm no hacker, but as he says, "hacker":
<blockquote>...is a title of honor that generally has to be <a href="http://www.catb.org/%7Eesr/jargon/html/H/hacker.html">conferred by others</a> rather than self-assumed.
</blockquote>[If you're curious as to why anyone would want to associate or identify with hackers, you might be interested to see <a href="http://www.catb.org/%7Eesr/jargon/html/H/hacker.html">how hackers define themselves</a>.]

So for some time-boxed fun, I threw together a <a href="http://www.myjavaserver.com/%7Edanbernier/processing/conwaysGameOfLife/">my own version of Conway's Game of Life</a>, using <a href="http://www.processing.org">processing</a>.  The <a href="http://www.myjavaserver.com/%7Edanbernier/processing/conwaysGameOfLife/conwaysGameOfLife.pde">source</a> is available for the curious.  I love how easy it is to do graphics with processing, even if the editor is horrible.  But modeling it in Java really made me want to use Ruby, mostly because it got pretty verbose at the end.  I've squeezed it down some, but it still feels clunky to me.  Once I get around to bolting JRuby into processing, I'll revise it.  In the meantime, I'd be interested in hearing what people think of it...]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>33</wp:post_id>
  <wp:post_date>2006-04-21 17:04:00</wp:post_date>
  <wp:post_date_gmt>2006-04-21 17:04:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>conways-game-of-life-the-glider-and-hackers</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="graphics"><![CDATA[Graphics]]></category>
  <category domain="post_tag" nicename="hackers"><![CDATA[Hackers]]></category>
</item>
<item>
  <title>Ruby, Meta-programming, and Watir</title>
  <link>http://invisibleblocks.com/2006/06/14/ruby-meta-programming-and-watir/</link>
  <pubDate>Wed, 14 Jun 2006 12:08:00 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">https://invisibleblocks.wordpress.com/2006/06/14/ruby-meta-programming-and-watir/</guid>
  <description/>
  <content:encoded><![CDATA[
<h3>WATIR – Web App Testing In Ruby</h3>
I've been playing with <a href="http://wtr.rubyforge.org">Watir</a> recently (thanks for the tip, Ken!), since the folks at my new job have (ahem) no real QA team or process.  Watir lets you create and drive an Internet Explorer browser with Ruby (via the Win32 API library), so you       can script (and save, and frequently run) a whole suite of regression tests.  It's a great library—it's easy, clean, immediately rewarding, lots of fun, and implemented fairly simply.  Let's   use it to search Google for ‘Watir':
[sourcecode language='ruby']
require 'watir'
ie = Watir::IE.new  # launch a new IE browser
ie.goto("http://www.google.com")   # send it to Google

# Get the query input (the text field named "q"),
# and set it to "Watir"
ie.text_field(:name, "q").set("Watir")

# Get the search button (whose value, or text, matches the
# Regexp /search/), and click it
ie.button(:value, /search/i).click

# Find the link that includes "web application testing",
# and click it
ie.link(:text, /web application testing/i).click[/sourcecode]
I did that all from memory, and made only two mistakes (I forgot the Regexps should be case-insensitive, and I looked for the "Search" button by :label instead of :value).  Go ahead—install ruby, run <code>gem install watir</code> (what's <a href="http://www.rubygems.org/read/chapter/1">gem</a>?), and try it out.

Watir makes it easy to find any HTML element on the page, if it has a name, id, title, or value...but it <i>doesn't</i> let you search by CSS class, which I consider a significant omission (plenty of generated HTML has consistent style names, but generated IDs).  Looking at the source, I think the authors assumed you would be only looking for one element (<code>ie.text_field(:name, "q")</code>), or all of a given kind of element (<code>ie.divs</code>).

Also, suppose you grabbed that paragraph about avocados, and now want the second link <i>inside</i> that paragraph—<code>ie.p(:name, 'avocados').links(:index, 2)</code> <i>doesn't work</i>.  If the HTML elements you want have no id or name, the ability to traverse the DOM hierarchy is pretty important.  This also is a problem for me.

So I set about trying to improve Watir, to see if I could add this functionality.  Along the way, I decided to write my own wrapper around IE's DOM interface (exposed through Ruby's WIN32OLE object), and I'll try to re-write the DOM parts of Watir using it.  If it goes well, I'll submit it to the Watir team, but even if it doesn't, I'm learning a <i>lot</i> about Ruby, and really starting to like it.  Call me a fanboy.

Here, I'm writing about the prizes I find along the way—things I'm learning, the neat approaches, or things that confused me at first.  It's aimed at someone who (hey, just like me!) has learned enough Ruby to do the basics, but wants more information on the parts of Ruby that aren't found in C-based, OO languages.  If you stop reading here, you've already picked up a great tip—go download <a href="http://wtr.rubyforge.org/">Watir</a>.  The curious rest of you, let's proceed...
<h3>Delegation Made Trivial</h3>
[sourcecode language='ruby']class Node
    # Auto-wrap the @ole_node
    def method_missing(method_id)
        @ole_node.send(method_id.id2name)
    end
end[/sourcecode]
Watir hands out the OLE Document object, and the Node class (and its subclasses) wraps it, adding some functionality and OO pleasantness...but there are times we'd like to access the WIN32OLE's methods.  We could expose the OLE through an accessor method, but what we really want is to talk to the Node like it's the OLE.  Here's the part I like: instead of writing a hundred lines of delegator methods, we implement <code>method_missing</code>.  If a Node is sent a message it doesn't understand (a call to a method it doesn't implement), it just forwards the message to its WIN32OLE.

To do this, we override Object's method_missing method—it's a hook for just this situation.  We're passed the name of the missing method, and we can use the <code>object.send("method_name")</code> syntax for calling methods.  My example is really simple—<i>every</i> method of WIN32OLE is exposed through Node, with the same name.  To restrict it, I'll probably add an Array of methods I want to expose, and only delegate <code>if wrapped_methods.include? method_name</code>.  If I want to get fancy, I'll use a Hash to map the method names, so <code>node.tag</code> delegates to <code>@ole_node.tagName</code>.

This trick, I think, is possible because Ruby is <a href="http://en.wikipedia.org/wiki/Dynamic_typing">dynamically typed</a>.  Ruby's willingness to send any message to any object is what makes this work.
<h3>Meta-programming, and Then Some</h3>
[sourcecode language='ruby']searchable_tags = %w[a p div span input table]

searchable_tags.each { |tag|
    code = <<METHOD_TEMPLATE
        def #{tag}s (*args, &proc)
            proc ||= make_filter(args)
            self.find_all { |n|
                n.tagName.upcase == "#{tag.upcase}" and proc.call(n)
            }
        end
METHOD_TEMPLATE
    module_eval(code)
}[/sourcecode]
This is maybe a bit a dense...I'll explain first.
<h3>Let's Just Find the Divs</h3>
I like Watir's style of searching for elements: <code>ie.div(:name, "header")</code> returns the div named ‘header', and <code>ie.divs</code> returns all divs.  I decided to copy this, but make it a bit more general:  both versions (div and divs) should accept multiple filter parameters, so you can search by zero, one, or more attributes.  The singular version (div) should return the first match, the plural (divs) should return all matches.  For example:
[sourcecode language='ruby']doc.div  # the first div
doc.div(:class, "blue_text") # the first div whose class is "blue_text"
doc.divs  # all divs
doc.divs(:class, "blue_text") # all divs whose class is "blue_text"

# all divs whose class is "blue_text", and whose title contains 'porpoise'
doc.divs(:class, "blue_text", :title, /porpoise/)[/sourcecode]
And just for <a href="http://invisibleblocks.wordpress.com/2006/01/18/hacking-the-browsers-dom-for-fun/">fun</a>, let's let people pass in their own filter blocks:
[sourcecode language='ruby']doc.divs { |div|
    div.hasChildNodes
}[/sourcecode]
The code for the divs method will look like this:
[sourcecode language='ruby']def divs (*args, &proc)
    proc ||= make_filter(args)

    # Find all sub-nodes for which this block evaluates to 'true'
    self.find_all { |n|
        n.tagName.upcase == "div".upcase and proc.call(n)
    }
end[/sourcecode]

For those new to Ruby, <code>*args</code> wraps all the method's parameters (arguments) in an array, so you can accept variable lists of them...it's how the method supports calls like <code>doc.divs(:class, "blue_text", :title, /porpoise/)</code>.  Also, if the method was called with a block, instead of calling it via <code>yield</code>, we can treat it as a variable by putting <code>&amp;proc</code> in the method definition, and run it later via <code>proc.call</code>.

Speaking of that proc...if a block was passed, we'll use that, but if we got a list of filter parameters, we want to make a filter proc out of them (via <code>make_filter(args)</code>).  Enter Ruby's <code>||=</code> shortcut: <code>x ||= y</code> is the same as <code>x = x || y</code>.  If x is non-null, then y doesn't have to be checked, so <code>x || y</code> evaluates to the value of x.  If x is null, then <code>x || y</code> evaluates to the value of y.  It's a nice idiom for setting optional parameters to default values:  "if a value was passed, use it, but otherwise, use this default."  Here, <code>proc ||= make_filter(args)</code> sets proc either to the block that was passed, or to the proc that <code>make_filter(args)</code> returns.  From there, it's simple: find all elements where the tag is "DIV", and the filter procedure returns true.

<h3>Generating Other Finder Methods</h3>
Now that's fine for divs, but we want to search for <i>lots</i> of elements this way!  I don't want copy-paste versions of that method for span, a, p, img, table, and the rest of them...what a mess.  Instead, I'll write Ruby code to generate them for me, from a template.  Let's work from the inside out.

<code>module_eval(code)</code> takes a string of Ruby code, and evaluates it in the context of the current module.  In other words, if you pass in code that defines a method, you can then execute that method for the module.  Here, we'll use it to add methods to the Element class.

But who wants to cram a bunch of code onto one line, in a string variable?  Let's use Ruby's multi-line string:
[sourcecode language='ruby']code = <<METHOD_TEMPLATE
    def #{tag}s (*args, &proc)
        proc ||= make_filter(args)
        self.find_all { |n|
            n.tagName.upcase == "#{tag.upcase}" and proc.call(n)
        }
    end
METHOD_TEMPLATE[/sourcecode]
Everything between <code>&lt;&lt;METHOD_TEMPLATE</code> and <code>METHOD_TEMPLATE</code> is interpreted as a string, and stored in the code variable (the names "code" and "METHOD_TEMPLATE" can be whatever you want—they're not specific to generating methods).Sharp readers will notice that that string won't evaluate without a variable named ‘tag' in scope, so let's add that:
[sourcecode language='ruby']searchable_tags = %w[a p div span input table]

searchable_tags.each { |tag|
    code = <<METHOD_TEMPLATE
        def #{tag}s (*args, &proc)
            proc ||= make_filter(args)
            self.find_all { |n|
                n.tagName.upcase == "#{tag.upcase}" and proc.call(n)
            }
        end
METHOD_TEMPLATE
    module_eval(code)
}[/sourcecode]
This shows off Ruby's nice <code>%w[ ... ]</code> short-cut for declaring an array of strings.
[sourcecode language='ruby']
# Normal syntax
searchable_tags = ["a", "p", "div", "span", "input", "table"]

# %w cleans things up!
searchable_tags = %w[a p div span input table][/sourcecode]
Once you're used to it, the code is much clearer.  Thanks to Greg Brown and his <a href="http://www.oreillynet.com/ruby/blog/2006/06/nubygems_simple_array_definiti_1.html">Nuby Gems column</a> for shedding the light.
<h3>Meta-programming Wrap Up</h3>
Specifically from this example, I've learned:

* Meta-programming is like a mini <a href="http://en.wikipedia.org/wiki/Code_generator">run-time code generator</a> built right into Ruby, and it'll save you lots of typing—it's great for keeping your code light.  Remember: module_eval affects classes, instance_eval affects objects.
* For meta-programming, those multi-line strings make a nice template mechanism.  Just remember:  the end label <i>must</i> come right after a newline—no leading whitespace for indenting.  That stumped me for a bit.
* Ruby's ||= is handy—just remember that <code>a ||= b</code> means <code>a = a || b</code>.  If a is null, then a evaluates to false, so a is assigned the value of b.

If you want to read more about meta-programming, I'd suggest <a href="http://www.visibleworkings.com/little-ruby/">A Little Ruby, a Lot of Objects</a>, even though it's only partly about meta-programming.  <a href="http://poignantguide.net/dwemthy/">Dwemthy's Array</a> is fun (and deranged), but I found it hard to see the meta-programming through the other stuff.  I'm currently chewing on <a href="http://www.whytheluckystiff.net/articles/seeingMetaclassesClearly.html">these</a> <a href="http://www.32768.com/bill/weblog/2005/08/15/selectively_marshal-a-little-ruby-metaprogramming/">bits</a>.  I still need to crack the <code>metaclass = (class &lt; self; self; end)</code> nut that I keep reading about...any advice?
<h3>One Last Thing—On-line Documentation</h3>
As much as I'm coming to really like the <a href="http://www.amazon.com/o/asin/0974514055">pickaxe</a>, these <a href="http://ruby.outertrack.com/">Ruby API docs</a>, made with <a href="http://rannotate.rubyforge.org/">RAnnotate</a>, are really handy.  As we start to really invest in Watir, I'll probably set this up for us locally.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>34</wp:post_id>
  <wp:post_date>2006-06-14 12:08:00</wp:post_date>
  <wp:post_date_gmt>2006-06-14 12:08:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>ruby-meta-programming-and-watir</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="meta-programming"><![CDATA[Meta-programming]]></category>
  <category domain="post_tag" nicename="ruby"><![CDATA[Ruby]]></category>
  <wp:postmeta>
    <wp:meta_key>_oembed_f455a3dd9994da450658873c939c3a86</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>31</wp:comment_id>
    <wp:comment_author><![CDATA[Bret Pettichord]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://www.pettichord.com</wp:comment_author_url>
    <wp:comment_author_IP>69.37.72.236</wp:comment_author_IP>
    <wp:comment_date>2006-06-21 15:17:00</wp:comment_date>
    <wp:comment_date_gmt>2006-06-21 15:17:00</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[You should take a look at Watir 1.5. It's still in development, but it includes most of the features that you talk about here. And we'd love to have your help with the rest.

Bret]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2006-06-21 15:17:00</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>32</wp:comment_id>
    <wp:comment_author><![CDATA[Dan Bernier]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://www.blogger.com/profile/6051054</wp:comment_author_url>
    <wp:comment_author_IP>69.37.72.236</wp:comment_author_IP>
    <wp:comment_date>2006-06-22 21:03:00</wp:comment_date>
    <wp:comment_date_gmt>2006-06-22 21:03:00</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Bret, glad to hear these features are getting into Watir 1.5!  I'll check it out, and I'd be glad to help out on the project.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2006-06-22 21:03:00</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>40</wp:comment_id>
    <wp:comment_author><![CDATA[Emptiness]]></wp:comment_author>
    <wp:comment_author_email>ryan.maki@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://emptiness.mtness.com/</wp:comment_author_url>
    <wp:comment_author_IP>70.213.116.14</wp:comment_author_IP>
    <wp:comment_date>2006-08-04 20:25:51</wp:comment_date>
    <wp:comment_date_gmt>2006-08-05 00:25:51</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Oddly enough, I've been working in Ruby for almost a year now, using the obj.send() you describe for OLE embedding... but I never quite grasped the "meta" part of the meta-programming that was going on.  This despite the best efforts of several local Ruby enthusiasts.  (OK, I'm QA, not Dev...)

For whatever reason, I've had an ah-ha moment reading your comments on the searchable_tags.

Now I'll have to gem install watir just to read the source.  Thanks much for whatever combination of words made it happen!]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2006-08-05 00:25:51</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>58</wp:comment_id>
    <wp:comment_author><![CDATA[James]]></wp:comment_author>
    <wp:comment_author_email>james@architectbook.com</wp:comment_author_email>
    <wp:comment_author_url>http://duckdown.blogspot.com</wp:comment_author_url>
    <wp:comment_author_IP>69.0.55.147</wp:comment_author_IP>
    <wp:comment_date>2006-09-07 07:17:07</wp:comment_date>
    <wp:comment_date_gmt>2006-09-07 11:17:07</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[So, it would be interesting for you to comment on what it would take for folks at your old job to embrace Ruby...]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2006-09-07 11:17:07</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>45</wp:comment_id>
    <wp:comment_author><![CDATA[Dan Bernier]]></wp:comment_author>
    <wp:comment_author_email>danbernier@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://invisibleblocks.wordpress.com/</wp:comment_author_url>
    <wp:comment_author_IP>69.0.91.147</wp:comment_author_IP>
    <wp:comment_date>2006-08-08 21:34:58</wp:comment_date>
    <wp:comment_date_gmt>2006-08-09 01:34:58</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Emptiness, glad I could help.  I had the same kind of thing with OO JavaScript -- I was using basic JavaScript, kludging together objects only when I really had to.  Once I started reading about functions as first-class members of the language, it clicked for me.

That's great that you're involved with the local Ruby scene.  I keep wanting to go visit the one near me...for some reason, physically chatting with people makes it so much easier for me to pick things up.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>292320</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2006-08-09 01:34:58</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>59</wp:comment_id>
    <wp:comment_author><![CDATA[Dan Bernier]]></wp:comment_author>
    <wp:comment_author_email>danbernier@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://invisibleblocks.wordpress.com/</wp:comment_author_url>
    <wp:comment_author_IP>64.252.187.14</wp:comment_author_IP>
    <wp:comment_date>2006-09-14 20:09:27</wp:comment_date>
    <wp:comment_date_gmt>2006-09-15 00:09:27</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[James, that could be a whole post on its own!  You could be sneaky, or up-front about it.

Some sneaky things that might work:

1. Use Rails for rapid prototyping.  Share the prototype w/ the customers.  Then, once it's pretty solid, explain why you have to re-write it in Java.
2. A skunk-works Rails project that's important enough to stay around and influence other apps, but not important enough to get you fired.

If you wanted to be more up-front, you could replace those super-complicated build batch scripts with Ruby...it'd be MUCH more flexible.  I can expound, if you like...

Why, are you trying to start a Ruby revolution there?  ;-)]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>292320</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2006-09-15 00:09:27</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>95</wp:comment_id>
    <wp:comment_author><![CDATA[Stefan Storakers]]></wp:comment_author>
    <wp:comment_author_email>storakers@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>90.227.221.193</wp:comment_author_IP>
    <wp:comment_date>2006-10-16 11:56:18</wp:comment_date>
    <wp:comment_date_gmt>2006-10-16 15:56:18</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[&gt;&gt;I still need to crack the metaclass = (class  \]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2006-10-16 15:56:18</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>96</wp:comment_id>
    <wp:comment_author><![CDATA[Stefan Storakers]]></wp:comment_author>
    <wp:comment_author_email>storakers@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>90.227.221.193</wp:comment_author_IP>
    <wp:comment_date>2006-10-16 11:58:41</wp:comment_date>
    <wp:comment_date_gmt>2006-10-16 15:58:41</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[A third time then:
"why.." has written more about meat programming:
http://whytheluckystiff.net/articles/seeingMetaclassesClearly.html]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2006-10-16 15:58:41</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>97</wp:comment_id>
    <wp:comment_author><![CDATA[Dan Bernier]]></wp:comment_author>
    <wp:comment_author_email>danbernier@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://invisibleblocks.wordpress.com/</wp:comment_author_url>
    <wp:comment_author_IP>12.178.84.66</wp:comment_author_IP>
    <wp:comment_date>2006-10-16 13:16:38</wp:comment_date>
    <wp:comment_date_gmt>2006-10-16 17:16:38</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Stefan,

Thanks for the _why link.  I've read it before, but it doesn't have the kind of "what the hell is going on here?" answers I'm looking for.

Ola Bini has a nice post about the Ruby Singleton class at http://ola-bini.blogspot.com/2006/09/ruby-singleton-class.html -- that was much more helpful to me.

The thing that initially confused me is that the GoF Singleton is (I think) a substantially different concept than the Ruby Singleton.  Ola lays it out pretty well, and explains the class &lt;&lt; self thing.  I'm still thinking it over, though, and I'm considering doing a write-up here, once it clicks for me.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>292320</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2006-10-16 17:16:38</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>94</wp:comment_id>
    <wp:comment_author><![CDATA[Stefan Storakers]]></wp:comment_author>
    <wp:comment_author_email>storakers@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>90.227.221.193</wp:comment_author_IP>
    <wp:comment_date>2006-10-16 11:54:17</wp:comment_date>
    <wp:comment_date_gmt>2006-10-16 15:54:17</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[&gt;&gt;I still need to crack the metaclass = (class ]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2006-10-16 15:54:17</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>402</wp:comment_id>
    <wp:comment_author><![CDATA[iccar]]></wp:comment_author>
    <wp:comment_author_email>zhkjsjchrl@126.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>219.136.106.1</wp:comment_author_IP>
    <wp:comment_date>2006-12-26 03:43:53</wp:comment_date>
    <wp:comment_date_gmt>2006-12-26 07:43:53</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[my "assert" can not work,  when i run it, it return "nil is not true". 

it does not either due to the expression error, or declare error]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2006-12-26 07:43:53</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>403</wp:comment_id>
    <wp:comment_author><![CDATA[Dan Bernier]]></wp:comment_author>
    <wp:comment_author_email>danbernier@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://invisibleblocks.wordpress.com/</wp:comment_author_url>
    <wp:comment_author_IP>72.232.131.23</wp:comment_author_IP>
    <wp:comment_date>2006-12-26 08:41:43</wp:comment_date>
    <wp:comment_date_gmt>2006-12-26 12:41:43</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[iccar,

I'm assuming you mean assert from Ruby's <code>Test::Unit::TestCase</code>.  From what little you said, it sounds like you're calling <code>assert(true, someObj)</code>, and <code>someObj</code> is nil.

Also, for future reference, you might want to read <a href="http://catb.org/~esr/faqs/smart-questions.html" rel="nofollow">How To Ask Questions The Smart Way</a>.  It'll help you get more useful answers to your questions.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>292320</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2006-12-26 12:41:43</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9502</wp:comment_id>
    <wp:comment_author><![CDATA[Murugesan]]></wp:comment_author>
    <wp:comment_author_email>murugesan67@yahoo.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>203.143.177.253</wp:comment_author_IP>
    <wp:comment_date>2008-08-20 10:23:57</wp:comment_date>
    <wp:comment_date_gmt>2008-08-20 14:23:57</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Hi I need some help in programing watir for accessing the headers in internet explorer, something like to play with the tools bar in the hedaer. Can any one help me on that.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2008-08-20 14:23:57</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9586</wp:comment_id>
    <wp:comment_author><![CDATA[Val]]></wp:comment_author>
    <wp:comment_author_email>val.hoffman@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://www.talentjr.com</wp:comment_author_url>
    <wp:comment_author_IP>212.143.150.26</wp:comment_author_IP>
    <wp:comment_date>2009-02-20 16:07:36</wp:comment_date>
    <wp:comment_date_gmt>2009-02-20 20:07:36</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Actually came here to learn about *args, &amp;proc and got a good explanation about other things as well. Thanks.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2009-02-20 20:07:36</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Invisible Blocks moves to WordPress</title>
  <link>http://invisibleblocks.com/2006/07/13/invisible-blocks-moves-to-wordpress/</link>
  <pubDate>Fri, 14 Jul 2006 03:12:38 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">https://invisibleblocks.wordpress.com/2006/07/13/invisible-blocks-moves-to-wordpress/</guid>
  <description/>
  <content:encoded><![CDATA[Here's the <a href="http://invisibleblocks.wordpress.com/feed/">new RSS feed</a>.  JavaScript redirects should bring everyone over to the new site.  Please let me know at danbernier - at - gmail if you find anything wrong.

After about 18 months at <a href="http://www.blogger.com">Blogger</a>, I decided to look for something better.  I've been playing with <a href="http://www.wordpres.com">WordPress</a> for about a month, and like it a lot:

* Editing is easier, especially for code.
* It seems to save and publish faster.
* The sidebar is easy to customize, and it requires no mucking with the blog template.  In fact, you <em>can't</em> muck with the template, which only seems like a drawback until you consider my graphic design skills.
* You can upload small files (I still have to play with this) -- perfect for code examples.
* It has categories, pages, and built-in blog statistics.
* It imported my entire blog in only a few minutes.  Sweet...
]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>35</wp:post_id>
  <wp:post_date>2006-07-13 23:12:38</wp:post_date>
  <wp:post_date_gmt>2006-07-14 03:12:38</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>invisible-blocks-moves-to-wordpress</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="meta-blog"><![CDATA[Meta-blog]]></category>
  <wp:comment>
    <wp:comment_id>35</wp:comment_id>
    <wp:comment_author><![CDATA[James]]></wp:comment_author>
    <wp:comment_author_email>james@architectbook.com</wp:comment_author_email>
    <wp:comment_author_url>http://duckdown.blogspot.com</wp:comment_author_url>
    <wp:comment_author_IP>64.252.48.195</wp:comment_author_IP>
    <wp:comment_date>2006-07-30 07:12:50</wp:comment_date>
    <wp:comment_date_gmt>2006-07-30 11:12:50</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Don't forget to include the all-important feature known as trackback. Dialogs should be two-way...]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2006-07-30 11:12:50</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>36</wp:comment_id>
    <wp:comment_author><![CDATA[Dan Bernier]]></wp:comment_author>
    <wp:comment_author_email>danbernier@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://invisibleblocks.wordpress.com/</wp:comment_author_url>
    <wp:comment_author_IP>64.252.52.253</wp:comment_author_IP>
    <wp:comment_date>2006-08-01 21:16:17</wp:comment_date>
    <wp:comment_date_gmt>2006-08-02 01:16:17</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Good point!  They're already on -- WordPress shows trackbacks as comments.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>292320</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2006-08-02 01:16:17</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Who's Afraid of Functional Programming?</title>
  <link>http://invisibleblocks.com/2006/08/01/whos-afraid-of-functional-programming/</link>
  <pubDate>Wed, 02 Aug 2006 01:06:51 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">https://invisibleblocks.wordpress.com/2006/08/01/functional-programming/</guid>
  <description/>
  <content:encoded><![CDATA[Joel Spolsky just published a <a href="http://www.joelonsoftware.com/items/2006/08/01.html">great (and very brief) explanation of functional programming</a>.  There's also a <a href="http://webcast.berkeley.edu/courses/rss/archive.php?seriesid=1906978270">podcast</a> of Berkeley's CS 61A <a href="http://mitpress.mit.edu/sicp/">SICP</a> course from Spring '06 that I found -- the first few lectures on functional programming are really worth your time.  And finally, for a rambling, evening-discussion style explanation of functional programming, complete with historical anecdotes, there's <a href="http://www.defmacro.org/ramblings/fp.html">Functional Programming for the Rest of Us</a>.  [You might want to save that one, and come back when you have some time...but do come back to it.]

Joel's article got me thinking.  I'm not really working on applications (at work or for fun) that really need massive concurrency, so that benefit of functional programming never swayed me much.  Most of the uses I see for functional programming are simple things, like the selector filters I wrote about in <a href="{% post_url 2006-01-18-hacking-the-browsers-dom-for-fun%}">Hacking the Browser's DOM for Fun</a>...given an array, use a function to specify which elements you're interested in.  Just like Ruby's <code>find</code> and <code>find_all</code> methods, and Java's <code>FileFilter</code> and <code>FileNameFilter</code> classes.  It's like I'm using a Maserati just to commute.  Well, <a href="http://www.amazon.com/o/asin/0262560992">The Little Schemer</a> <em>is</em> on my wishlist...it'll be fun to try the examples in both Scheme and Ruby.  Maybe even JavaScript.

Now, I went to a <a href="http://www.joelonsoftware.com/articles/ThePerilsofJavaSchools.html">Java School</a>, so I only heard about functional programming, LISP, Scheme, Ruby, and all these strange beasts once I started teaching myself off the internet.  No one at any of my jobs ever mentioned them.    How is it that our field can have such a rich heritage, and almost no one knows about it?  Ask the person in the next cube over whether they've ever heard of functional programming, whether they know what it is, or can explain it to you.  I guess 80% of you get blank looks.  [This offer void at telcos and good universities.]

<a href="http://paulgraham.com/avg.html">Quite</a> a <a href="http://www.dehora.net/journal/2004/04/better_is_better_improving_productivity_through_programming_languages.html"> few</a> <a href="http://www.cabochon.com/~stevey/blog-rants/bob-paradox.html">people</a> call that a competitive advantage.  And they're right -- having scarce information puts you ahead of those without that information.  But it seems short-sighted to me to gloat over that temporary advantage, when you're missing the contributions that the people in the dark could be making.

<strong>UPDATE:</strong>  It occurs to me that this might sound like I think functional programming should be used for everything -- hardly the case, especially given my lack of experience with it, which I readily admit to.  My point is, why don't more of us know about it?  Why isn't it taught in more universities, or talked about at work?]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>38</wp:post_id>
  <wp:post_date>2006-08-01 21:06:51</wp:post_date>
  <wp:post_date_gmt>2006-08-02 01:06:51</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>whos-afraid-of-functional-programming</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="functional-programming"><![CDATA[Functional Programming]]></category>
  <category domain="category" nicename="learning"><![CDATA[Learning]]></category>
  <category domain="category" nicename="programming"><![CDATA[Programming]]></category>
  <category domain="category" nicename="software-thinking"><![CDATA[Software Thinking]]></category>
  <wp:comment>
    <wp:comment_id>37</wp:comment_id>
    <wp:comment_author><![CDATA[Jeff Houser]]></wp:comment_author>
    <wp:comment_author_email>invisibleBlocks@farcryfly.com</wp:comment_author_email>
    <wp:comment_author_url>http://www.jeffryhouser.com</wp:comment_author_url>
    <wp:comment_author_IP>69.183.115.182</wp:comment_author_IP>
    <wp:comment_date>2006-08-03 11:56:13</wp:comment_date>
    <wp:comment_date_gmt>2006-08-03 15:56:13</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I thought we went to the same school?  Did you end up at CCSU, or finish up elsewhere? 

 When I was there it was not a Java school.  They were just replacing Pascal in the CS intro classes with Java when I graduated.

 I took a course in LISP.  I can't envision a use for it in the 'real world' though.  Apparently it gets a lot of use in Artificial Intelligence.

 There are four ways to approach programming, and languages are bult to reflect one of the approaches.

 You can approach it from the perspective of the computer, and this is procedural programming.

 Functional languages try to approach the problem from the perspective  of the process.

 Logic oriented languages are built to attack the problem from the programmer's perspective.  SQL is the only logical-oriented language I know.  

 The Object Oriented approach is based on the perspective of the problem.

 Many languages, today, claim to be object oriented but actually have features of the other approaches to software development.  This is called "Distributed Parallel", which  just combines different aspects of multiple approaches in an effort to create something better.

 I once had a teacher say that most people who use C++ aren't using Object Oriented Development (Despite what they may claim).  I've heard the same thing said about Java programmers.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2006-08-03 15:56:13</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>38</wp:comment_id>
    <wp:comment_author><![CDATA[Dan Bernier]]></wp:comment_author>
    <wp:comment_author_email>danbernier@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://invisibleblocks.wordpress.com/</wp:comment_author_url>
    <wp:comment_author_IP>69.177.19.131</wp:comment_author_IP>
    <wp:comment_date>2006-08-03 12:43:44</wp:comment_date>
    <wp:comment_date_gmt>2006-08-03 16:43:44</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I finished at CCSU -- all courses used Java.  The point in calling it a Java School is to say that nothing looked beyond imperative procedural programming.  In the AI course I took, LISP was introduced only briefly, because "most students pick it up naturally."  Maybe enough for AI study, but there's apparently some very compelling reasons to use LISP for real-world work, like its expressiveness -- none of this was mentioned in any classes I took.  In fact, there was little-to-no talk comparing languages on any terms, outside of the one "Programming Languages" course (which I regret not taking).  Compared to Yale, Berkely, or MIT, where the first CS course uses SICP as the text, this seems pretty poor to me.

It seems specious to say there are only four approaches to programming.  Your descriptions of OO and functional programming don't really match my understanding, but you're a little vague, so it's hard to be certain.  For instance, what do you mean by "approach the problem from the perspective of the process"?  If logic-oriented languages attack the problem from the programmer's perspective, does that imply that programmers are always logical?  I'm not sure I agree with that -- programmers are people, after all.  ;-)

I don't know whether you could say -most- C++/Java programmers aren't doing OO.  I've seen -many- programmers use Java procedurally, but -most- sounds to me like "almost all of them".  And now we reach the point of niggling over semantics.  =)]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>292320</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2006-08-03 16:43:44</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>39</wp:comment_id>
    <wp:comment_author><![CDATA[Jeff Houser]]></wp:comment_author>
    <wp:comment_author_email>invisibleBlocks@farcryfly.com</wp:comment_author_email>
    <wp:comment_author_url>http://www.jeffryhouser.com</wp:comment_author_url>
    <wp:comment_author_IP>69.183.115.182</wp:comment_author_IP>
    <wp:comment_date>2006-08-03 22:21:01</wp:comment_date>
    <wp:comment_date_gmt>2006-08-04 02:21:01</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[The "four" approaches to programming comes from one of my schooling, and I grabbed it out of one of the textbooks [at one point].  I'm willing to accept that my ramblings were vague.  To quote (well, me):

[ start quote ] 

 A programming language exist to tell a computer how to solve a problem...a programming language is designed for communication between a computer and a person.

 The four aspects of a programming language are the programmer, who tells the computer what to do, the computer, which solves the problem, the process that the program performs, and the problem that needs to be solved.  Programming languages can be classified into the following five different types, the first four of which are based on the perspective of one of these aspects, and the fifth of which comnbines all aspects...

[ end quote ] 

And the four types are:
Imperative, based on the perspective of the computer
functional, based on the perspective of the process
logic-oriented, based on the perspective of the programmer
object-oriented, based on the perspective of the problem

( and distributed parallel, which combines the other four types in some manner )


 (BTW: let me know of your new e-mail address)]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2006-08-04 02:21:01</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>46</wp:comment_id>
    <wp:comment_author><![CDATA[Dan Bernier]]></wp:comment_author>
    <wp:comment_author_email>danbernier@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://invisibleblocks.wordpress.com/</wp:comment_author_url>
    <wp:comment_author_IP>64.252.50.41</wp:comment_author_IP>
    <wp:comment_date>2006-08-09 07:17:52</wp:comment_date>
    <wp:comment_date_gmt>2006-08-09 11:17:52</wp:comment_date_gmt>
    <wp:comment_content><![CDATA["Functional, based on the perspective of the process."

I'm chewing on that.  Note that this is the thinking of someone who gets, not groks, functional programming.  I can see that it's based on the perspective of the process, since all the state management happens on the stack, instead of explicitly.  But couldn't you say -lots- of things focus on the perspective of the process?  Couldn't assembly code fit that, too?  "Process" sounds almost more algorithmic to me.  Help me out on this one.

Also, what exactly is the "programmer's perspective"?  I would think the programmer's perspective would include the other approaches, instead of having its own.  I see it as the programmer explaining to the computer what it's supposed to do.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>292320</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2006-08-09 11:17:52</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>49</wp:comment_id>
    <wp:comment_author><![CDATA[Dan Bernier]]></wp:comment_author>
    <wp:comment_author_email>danbernier@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://invisibleblocks.wordpress.com/</wp:comment_author_url>
    <wp:comment_author_IP>69.177.19.131</wp:comment_author_IP>
    <wp:comment_date>2006-08-11 12:19:06</wp:comment_date>
    <wp:comment_date_gmt>2006-08-11 16:19:06</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Jeff, if you don't mind me asking, what text/class did you get those from?]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>292320</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2006-08-11 16:19:06</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>50</wp:comment_id>
    <wp:comment_author><![CDATA[Jeff Houser]]></wp:comment_author>
    <wp:comment_author_email>invisibleBlocks@farcryfly.com</wp:comment_author_email>
    <wp:comment_author_url>http://www.jeffryhouser.com</wp:comment_author_url>
    <wp:comment_author_IP>69.183.115.182</wp:comment_author_IP>
    <wp:comment_date>2006-08-14 10:29:15</wp:comment_date>
    <wp:comment_date_gmt>2006-08-14 14:29:15</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I was actually quoting "ColdFusion: The Complete Reference" by me.  The info comes filtered through my mind from "Programming Languages: Structures and Models" by Herbert Dershem and michael Jipping.  

http://www.amazon.com/gp/product/0534947409/sr=8-1/qid=1155564785/ref=sr_1_1/102-4484582-4835337?ie=UTF8

 This gets heavy into textbook territory, so I have no idea how to get a copy of the book.  I don't remember which class used this book, though.  Possibly a genric "Programming Languages" class.  

 I've been using languages in practice for so long, I can't say that I could properly differentiate between all perspectives from a theoretical standpoint.  Everything appears to be a hybrid approach these days.

 I think that the 'programmer perspective' is probably misnamed, and it should probably be called the "user perspective".  

 You seem to be thinking of functional programming in terms of its' implementation.  The 'perspective' should be thought about in terms of application design, independent of the implementation.

 On another note; Is there a subscribe function to this blog? It'd be great to be e-mailed when comments go out to a post I've commented on.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2006-08-14 14:29:15</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>57</wp:comment_id>
    <wp:comment_author><![CDATA[Dan Bernier]]></wp:comment_author>
    <wp:comment_author_email>danbernier@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://invisibleblocks.wordpress.com/</wp:comment_author_url>
    <wp:comment_author_IP>69.37.177.183</wp:comment_author_IP>
    <wp:comment_date>2006-09-06 19:57:13</wp:comment_date>
    <wp:comment_date_gmt>2006-09-06 23:57:13</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[No, no subscribe feature that I know of.  I'm doing free, hosted WordPress, so I'm at their mercy as to features. =)  For a part-time blog, the price is right.

We'll have to talk more about this once I've played more with functional programming...]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>292320</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2006-09-06 23:57:13</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Programming, Zen, and...Origami</title>
  <link>http://invisibleblocks.com/2006/08/01/programming-zen-and-origami/</link>
  <pubDate>Wed, 02 Aug 2006 01:47:29 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">https://invisibleblocks.wordpress.com/2006/08/01/programming-zen-and-origami/</guid>
  <description/>
  <content:encoded><![CDATA[I've started re-reading <em>Zen and the Art of Motorcycle Maintenance</em>.  There are so many gems in it that I'll probably start a page in my <a href="http://www.backpackit.com">backpack</a> for them.  Here's one I like:

<blockquote>
        ";...I've a set of instructions at home which open up great realms for the improvement of technical writing. They begin, `Assembly of Japanese bicycle require great peace of mind.'";<br><br>This produces more laughter, but Sylvia and Gennie and the sculptor give sharp looks of recognition.<br><br>"That's a good instruction,"; the sculptor says. Gennie nods too.<br><br>"That's kind of why I saved it,"; I say. "At first I laughed because of memories of bicycles I'd put together and, of course, the unintended slur on Japanese manufacture. But there's a lot of wisdom in that statement."; ... "Peace of mind isn't at all superficial, really,"; I expound. "It's the whole thing. That which produces it is good maintenance; that which disturbs it is poor maintenance. What we call workability of the machine is just an objectification of this peace of mind. The ultimate test's always your own serenity. If you don't have this when you start and maintain it while you're working you're likely to build your personal problems right into the machine itself.";
    </blockquote>

I think this peace of mind is needed if you want to achieve that <a href="http://c2.com/cgi/wiki?MentalStateCalledFlow">mental state called flow</a>.  I'll bet that "workability of the machine"; translates nicely into the design of the [programming language, platform, library] you're using - I like Ruby because it gives me greater peace of mind! - but that's another discussion.  For now, I want to talk about two ways I have of getting back that peace of mind, when I lose it.

<h2>Origami!</h2>

I learned all the origami I know from a book I got in Disney World when I was 10, and I've been folding on and off since then.  I'm good enough to impress people who either have never tried it, or are very polite.  Man, did I get tired of doing those <a href="http://www.lisashea.com/lisabase/cruise/money/bowtie.html">dollar-bill bow-ties</a> for relatives to leave as fancy restaurant tips.

Folding origami is a really interesting way to spend time (no joking!).  You line up edges and folds as perfectly as you can, because the first few times, when you weren't so careful, it came out like crap, and you learned that origami is a precise art.  So you check twice before creasing the paper, and get it as perfect as you can.  But the paper gets in the way!  If you fold paper over itself enough times, you find that its thickness only <em>seems</em> negligible.  You can get really thin paper and try to ignore this, but eventually, it's always a factor.  If that's not enough, try remaking a fold that didn't come out right&#8212;remake it enough times, and that crease starts to remind you of the maps in the car.  Balancing geometric precision against the paper's physical limits, the abstract ideal against the actual reality, is a lesson that applies beyond origami.  How about when applying software design principles?  Hiding your object's data is a good idea, but 50 private variables with 50 getters and 50 setters is decidedly not.  If your code reads like an illustrated tour of the GoF Design Patterns, you should chew on this.

Origami philosophy aside, it's relaxing to do, once your fingers are accustomed to it.  After folding a few thousand pieces, finding the sweet spot between the geometry and the paper is almost meditative.  How well I achieve that balance is my measure of a piece's quality.

Origami requires a light focus&#8212;just enough to let your mental peripheral vision wander.  It's an easy jog for your brain, somewhere bewteen sitting on the couch and running up a mountain.  The same way some people need constraints to be creative, my mind needs something tiny to do, for it to really relax.  All this sounds very zen to me: beginner's mind, nothingness, mindfulness&#8230;I have to think about this some more.

<h2>Juggling!</h2>

I started juggling two weeks ago.  Ok, started <em>trying</em> to juggle two weeks ago, and started something-almost-like-juggling in the last few days.  Maybe I'll start juggling this week&#8230;I can feel myself getting close.  At any rate, I'm at the point where it's not so frustrating, so I'm even more apt to practice (be warned, my cats).

Juggling also requires a light focus.  It's also kind of medidative.  Until I drop a ball, which always happens, but up to that point, it's really pleasant.

<h2>In Closing, Back to Zen</h2>

There's something that connects movement and brainpower, I'm sure.  I don't know nearly enough about it to say anything conclusive or probably even convincing, so I'll just end with some words from <a href="http://catb.org/~esr/faqs/hacker-howto.html#style">ESR</a>, and if that doesn't convince you, well&#8230;

> Train in a martial-arts form. The kind of <strong>mental discipline required for martial arts seems to be similar in important ways to what hackers do</strong>. ...The most hackerly martial arts are those which emphasize <strong>mental discipline, relaxed awareness, and control</strong>, rather than raw strength, athleticism, or physical toughness.

[The emphasis is of course mine.]]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>39</wp:post_id>
  <wp:post_date>2006-08-01 21:47:29</wp:post_date>
  <wp:post_date_gmt>2006-08-02 01:47:29</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>programming-zen-and-origami</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="programming"><![CDATA[Programming]]></category>
  <category domain="category" nicename="software-thinking"><![CDATA[Software Thinking]]></category>
</item>
<item>
  <title>In the new office!</title>
  <link>http://invisibleblocks.com/2006/10/03/in-the-new-office/</link>
  <pubDate>Tue, 03 Oct 2006 13:53:04 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.wordpress.com/2006/10/03/in-the-new-office/</guid>
  <description/>
  <content:encoded><![CDATA[My company moved its office last week -- this is our first week at home in the new digs.  My desk is against a great brick wall, and next to a window <em>that actually opens!</em>  I have a great view of Talcott Mountain, which should soon start turning to fall colors.

&lt;div class='gallery'&gt;
<img src="https://invisibleblocks.files.wordpress.com/2006/10/new_desk.jpg" alt="My new desk" width="400" /><br>
<img src="https://invisibleblocks.files.wordpress.com/2006/10/the_view.jpg" alt="The view" width="400" />
&lt;/div&gt;

Shameless bragging aside, now that the move's finished, I'm about ready to get a new post up.  The next one will be about arguing (or debating) on the job.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>40</wp:post_id>
  <wp:post_date>2006-10-03 09:53:04</wp:post_date>
  <wp:post_date_gmt>2006-10-03 13:53:04</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>in-the-new-office</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="job"><![CDATA[Job]]></category>
  <wp:comment>
    <wp:comment_id>114</wp:comment_id>
    <wp:comment_author><![CDATA[james]]></wp:comment_author>
    <wp:comment_author_email>james@architectbook.com</wp:comment_author_email>
    <wp:comment_author_url>http://duckdown.blogspot.com</wp:comment_author_url>
    <wp:comment_author_IP>64.252.167.93</wp:comment_author_IP>
    <wp:comment_date>2006-10-22 19:04:35</wp:comment_date>
    <wp:comment_date_gmt>2006-10-22 23:04:35</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I got a nice dirty cubicle waiting for you when you get bored with all that fresh air...]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2006-10-22 23:04:35</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>137</wp:comment_id>
    <wp:comment_author><![CDATA[Dan Bernier]]></wp:comment_author>
    <wp:comment_author_email>danbernier@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://invisibleblocks.wordpress.com/</wp:comment_author_url>
    <wp:comment_author_IP>69.0.39.94</wp:comment_author_IP>
    <wp:comment_date>2006-11-05 10:13:13</wp:comment_date>
    <wp:comment_date_gmt>2006-11-05 14:13:13</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[James, your comment was marked as spam...I didn't even see it until just now.  That's what you get for putting the word "dirty" in a comment, I guess...  =)]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>292320</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2006-11-05 14:13:13</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Why is Ant in XML?</title>
  <link>http://invisibleblocks.com/2006/11/13/why-is-ant-in-xml/</link>
  <pubDate>Mon, 13 Nov 2006 22:02:44 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.wordpress.com/2006/11/13/why-is-ant-in-xml/</guid>
  <description/>
  <content:encoded><![CDATA[<h2>Before we start...</h2>
"I'm about ready to get a new post up".  Heh.  That'll teach me to go on the record with my predictions.  That post about arguing is still in with the drafts, but it's stalled somehow.  In the meantime, here's something else, something exciting, something dramatic, something...nevermind, I can hear my wife snickering at me now.

<h2>The Nature of Ant and Builds</h2>
I bring this up now because I'm wading back into Ant territory, setting up a nightly build with NAnt.  I'll refer to Ant, because all of what I'm saying applies to both Ant and NAnt, and NAnt really falls under the Ant umbrella anyway.  I can't say I ever liked Ant -- it's better than nothing, but I never worked on a build script and said "whoa, that was cool!"

Why is Ant based on <span class="caps">XML</span>?  It's not a neat-o library that lets you whip together some honkin' <span class="caps">XML</span> file to <em>describe</em> a build process.  It's an interpreter for a domain-specific language for builds.  The Ant implementors just took the lazy way around writing an interpreter.

Let's step back a sec.  What's a build process look like?  Get the source files.  Compile them into binaries.  Run some unit tests on those binaries.  Package them.  Deploy them somewhere.  Move around some config files, maybe some page templates.  Restore, and maybe update, the database.  Run some regression tests.  Run some source code profilers.  Gather up the results.  Tell everyone what happened.

<h2>Imperative, or Declarative?</h2>
Each of those sentences is a command, an order.  Wikipedia tells us it's called the <a href="http://en.wikipedia.org/wiki/Imperative_mood#Imperative_mood">imperative mood</a>, which "expresses commands, direct requests, and prohibitions.";  We're telling the build engine, the builder, what to do.  Let's personify the builder, and call him Bob (Bob the Builder, HAHAHA!)&#8212;we're ordering Bob around, like a mouthy foreman.  We are <em>not</em> describing to Bob what should happen.  You could look at it that way, of course, but that's not really how we think about it.  "Bob, the source files live on this server.  The <span class="caps">CVS</span> login id and password are &#8216;build' and &#8216;aloha'.  There's a nifty directory called &#8216;src' on this build machine over here&#8230;";  Is that what runs through your head as you put together an Ant file?  I didn't think so.  "Bob!  Login to <span class="caps">CVS</span>!  Copy the files from /src, down to /build/src!  Compile into /bin!  Zip /bin!";  That's more like it.

So a build process is mostly imperative, not declarative.  Then, shouldn't we program a build process <a href="http://en.wikipedia.org/wiki/Imperative_programming">imperatively</a>, not <a href="http://en.wikipedia.org/wiki/Declarative_programming">declaratively</a>?  Go ahead an scan the first bits of those wikipedia articles, they're easy reading.  Back?  Ok.  Now, I'm not saying do builds with shell scripts:  I've spent enough time dealing with Windows batch scripts, I'll take declarative <span class="caps">XML</span> over that any day.  Why?  Because Ant makes it easy to <em>modularize</em> your code!  Sure, shell scripts can do that, sort of, but it's a messy pain.  There are hard problems, and there are problems that just <em>seem</em> hard&#8230;using the wrong tool for the job is category two.  Ant makes it easy to wrap up a sequence of steps, and name it something meaningful, and that's great!  Holy cow, Ant has subroutines!  Yeah, C has them, too, and while C has a lot of merits, I don't think ease of maintenance is one of them.  Why not use Java, or C#, or Ruby, or Python, or <em>any</em> OO language out there, as your build language?

Imagine this (I'm making this all up on the fly): you include the ant.jar.  Make a subclass of <code>ant.AntBuild</code>.  That <code>ant</code> package has classes that let you do build-y things, like get source from source control (different subpackages for <span class="caps">CVS</span>, Subversion, <span class="caps">VSS</span>, PVCS, whatever), get all the files in a directory, call out to the compiler, move files around, <span class="caps">FTP</span>, run unit tests, send email, and whatever else you think would be useful.  You can recreate your whole build process right in Java!

<h2>The Money Shot</h2>
And here's why we really <em>should</em> do it this way.  Here's the <em>raison d'être</em> for this post, the main idea:  your local builds just compile, and run unit tests; your QA builds need to do that, plus deploy to QA servers and run regression tests and code profilers; your Production builds need to do all that, minus the profilers, but with different servers...and you don't run that <span class="caps">HTTP</span> Proxy in QA.  That build.xml just became insufficient.  <em>Use basic OO ideas to customize your builds by environment.</em>  It's trivial, we do this sort of thing all the time.  Just not for builds.

Now, the funny part is that Ant is, I believe, already kind of structured this way.  You can extend it with your own tasks, Java classes that subclass some <code>Task</code> class in Ant.  Why not just expose the engine itself?  I'm sure the classes should be reorganized, since they weren't designed with this kind of use in mind.  But all those Tasks are already built, just sitting there, waiting for us to use them.  There's at least one precedent, too: Ruby has <a href="http://rake.rubyforge.org/">Rake</a>, which I realized is exactly what I'm talking about.  In fact, when I googled Rake for a good link, I came across this <a href="http://www.martinfowler.com/articles/rake.html">Martin Fowler article</a> that I'd like to quote from:

<blockquote>
	All the build languages I've used (make, ant (Nant), and rake) use a dependency based style of computation rather than the usual imperative style. That leads us to think differently about how to program them.

</blockquote>

Martin Fowler treats these ideas much better than I did here, and goes way beyond me, into some interesting territory.

A few other thoughts that come out of this:

* **Extensions become trivial.**  Add your own Task subclass.  There's not even a separate "recognize my extension"; mechanism:  you just include your class.
* **Documentation is easy.**  What tasks are available?  How do I use them?  JavaDoc.  This also gives us pop-up help, or Intellisense in .Net.
* **Design** of your build is simplified.  How do I organize all these tasks, get those dependencies right, and all that?  We're used to thinking in imperative OO.  Let's bring that to bear on this problem.

<h2>In Closing</h2>

A build process is like a lot of other imperative programming we do, so we might as well use an imperative language for it.  While we're at it, let's pick a language we're used to using and thinking in, and one that has some decent abstractions built-in.  Bringing all that to bear on builds should make automating them a snap.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>46</wp:post_id>
  <wp:post_date>2006-11-13 18:02:44</wp:post_date>
  <wp:post_date_gmt>2006-11-13 22:02:44</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>why-is-ant-in-xml</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="programming"><![CDATA[Programming]]></category>
  <wp:comment>
    <wp:comment_id>235</wp:comment_id>
    <wp:comment_author><![CDATA[Dan]]></wp:comment_author>
    <wp:comment_author_email>dpmtime@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>12.150.2.254</wp:comment_author_IP>
    <wp:comment_date>2006-11-27 14:24:40</wp:comment_date>
    <wp:comment_date_gmt>2006-11-27 18:24:40</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Interesting points.  Not all application builders are programmers,though.  Let alone OO programmers.  Implementing a build in an imperative OO language would make it more difficult to use for many.  I think one of the reason Ant is so popular is its ease of use across skill sets...one doesn't have to know Java to build a J2EE application. This is directly attributable to the ubiquitousness of xml.  As always, there are trade-offs to consider.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2006-11-27 18:24:40</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>236</wp:comment_id>
    <wp:comment_author><![CDATA[Dan Bernier]]></wp:comment_author>
    <wp:comment_author_email>danbernier@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://invisibleblocks.wordpress.com/</wp:comment_author_url>
    <wp:comment_author_IP>69.37.179.150</wp:comment_author_IP>
    <wp:comment_date>2006-11-27 20:15:37</wp:comment_date>
    <wp:comment_date_gmt>2006-11-28 00:15:37</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Dan, I think that's analogous to HTML and the web.  HTML is declarative and simple, and while that helped it spread <i>everywhere</i>, it makes it a poor fit for specifying behavior, which is what apps are about.  Same goes for XML.

Taking either example (HTML for web apps or XML for builds), if we started over and did it imperatively, there'd be a higher barrier to entry (much higher, if we use OO), but we'd have much more power once we were there.  There's a classic trade-off for you: let a few people do a lot, or lot of people do a little.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>292320</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2006-11-28 00:15:37</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>del.icio.us Graph Visualizer</title>
  <link>http://invisibleblocks.com/?p=47</link>
  <pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.wordpress.com/?p=47</guid>
  <description/>
  <content:encoded><![CDATA[I put this together way back in June, but never got around to publishing it.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>47</wp:post_id>
  <wp:post_date>0000-00-00 00:00:00</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="graphics"><![CDATA[Graphics]]></category>
</item>
<item>
  <title>I've been Blog-tagged??</title>
  <link>http://invisibleblocks.com/2007/01/01/ive-been-blog-tagged/</link>
  <pubDate>Mon, 01 Jan 2007 16:10:21 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.wordpress.com/2007/01/01/ive-been-blog-tagged/</guid>
  <description/>
  <content:encoded><![CDATA[<a href="http://knowledgecrisis.blogspot.com/2006/12/im-it.html">JT tagged me</a>...so here we go.  In case anyone's wondering, <a href="http://pulverblog.pulver.com/archives/006087.html">here is where it all started</a>.

### 1

I didn't have a computer until 1999 or so, when my mom had a friend help her pick out a Sony Vaio.  Vintage Windows 98.  That was about when I started working on my computer science degree (better late than never), so most of the time, I had little idea what was going on.  For homework, we had to install Java 1.1.7.  While trying to understand the difference between the classpath and the path (I'm telling you, I was clueless), I completely <em>screwed up</em> the command line -- it wouldn't even launch.  The next day, I ran into an old friend I hadn't seen in a while, we got to talking about it, and he offered to check it out.  He came by, ate a bowl of our Frooty Loops, and re-pointed the command line shortcut to cmd.exe.  That's it.  We gave him our old Nintendo Entertainment System, in thanks.

### 2

I look like my mom.  My only sibling, my 5-years younger brother, looks like my dad.  And yet, we always get told that we "look <em>just like</em> each other!"  One guy even asked if we were identical twins.  It baffles us.

### 3

I always introduce myself to strangers as Daniel.  Not because I like being called that -- call me Dan, please -- but because if I say my name is Dan, they'll hear "Dave".  It happens every time.  Unless the stranger's name is Dan, and that doesn't seem to me like it should count.  My wife never believed me, until it happened at a Starbucks, and my latte-or-whatever came back, sure enough, with "Dave" scrawled on it.  She loves telling that story now.

<a href="http://www.flickr.com/photos/97751252@N00/227876735/"><img src="http://farm1.static.flickr.com/67/227876735_5026777a20_m.jpg" style="float:right;"></a>

### 4

I'm a not-so-great photographer, and was never a very visual person, but that doesn't stop me from taking pictures.  My friend Tom has tried to explain things like visual composition to me, and some of it eventually sank in, but I just don't get it.

But sometimes, I get lucky.  This bold, patient, and strangely cooperative squirrel is a perfect example.  We ran into him (her?  I don't know) in Rocky Mountain National Park in Colorado, sitting next to a large pile of seeds, and a sign that said "Will pose for food."

I'm also into <a href="http://en.wikipedia.org/wiki/Stereoscopy">stereoscopic photography</a>.  I was pretty good at those eye-crossing 3D puzzles when I was younger, which are based on the same optics principles.  After I learned how to make stereographs in my computer graphics course, I started snapping double pictures (left eye, right eye), and stitching them together in Paint.  Here's one of Mary, on the trail down from Emerald Lake in Boulder, Colorado.  Click it for a larger version, which looks much better.

<a href="http://www.flickr.com/photo_zoom.gne?id=227962652&amp;size=l"><img src="http://farm1.static.flickr.com/71/227962652_0ca129fb75.jpg?v=0"></a>

### 5

I read a good bit (ok, that's already clear on my blog, but still).  I recently re-read <a href="http://www.amazon.com/Last-Call-Tim-Powers/dp/038072846X/">Last Call</a> and convinced my wife to read it (she'll probably finish it today).  The first time I read it, the company I worked for had free parking, but it was two or three miles away from the office, so they ran shuttles to cart us between our cars and desks.  One morning on the shuttle, while reading Last Call, the woman seated next to me asked what I was reading.  I showed her the cover, and said, "Last Call," hoping that was enough.

"What's it about?"

"Well, it's about the Fisher King in Las Vegas, and how he evicts people's soul from their body, so he can assume their body, and live forever.  He does it through this game called Assumption, which is kind of like poker, with Tarot cards."

She thought about that for maybe three seconds, and asked, "Is that a part of your belief system?"


### That's All

There's lots more I could say.  When I started, I didn't think I'd come up with five interesting things to mention, but now that I'm feeling talkative and sharing, I could probably come up with at least five more...but five's the limit.  And anyway, who really wants to hear about me all day?  Especially when you could read about <a href="http://ola-bini.blogspot.com/">Ola Bini</a>, <a href="http://duckdown.blogspot.com/">James McGovern</a>, <a href="http://blog.qualityaspect.com">Lidor Wyssocky</a>, or <a href="http://www.randsinrepose.com/">Rands in Repose</a>?  [Ok, so there's only four there.  When you get this many generations into exponential growth, you start running out of options, fast.  Ola, Rands, and Lidor, I've enjoyed reading your blogs for a while, and you appear to not have been tagged yet.  My apologies for changing that.  James, you can blame JT.]]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>48</wp:post_id>
  <wp:post_date>2007-01-01 12:10:21</wp:post_date>
  <wp:post_date_gmt>2007-01-01 16:10:21</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>ive-been-blog-tagged</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="meta-blog"><![CDATA[Meta-blog]]></category>
</item>
<item>
  <title>Dvorak: The Betamax Keyboard</title>
  <link>http://invisibleblocks.com/2006/12/31/dvorak-the-betamax-keyboard/</link>
  <pubDate>Sun, 31 Dec 2006 04:05:45 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.wordpress.com/2006/12/31/dvorak-the-betamax-keyboard/</guid>
  <description/>
  <content:encoded><![CDATA[I've been a Dvorak typist for about five months.  It took me three tries to really stick it out through the learning phase, because let me tell you—as a touch typist, any learning curve over one week sucks (and you're probably not learning Dvorak if you're a hunt-and-peck-er).  There are some things I wish I knew before I switched, so I'm feeding them to Google for others to find.  My thoughts reflect only my experience, <span class="caps">YMMV</span>, and all that.  For me, the short answer is that I'll probably switch back to <span class="caps">QWERTY</span>.  <strong>Update:</strong> I never actually did, and I'm considering writing a recant to this post.  See the bottom of the post...
<h2>How Bad is the Learning Curve?</h2>
I suspect this really varies from person to person—I've <a href="http://www.mwbrooks.com/dvorak/training.html">read</a> "Allow for about 1 hour of training for each <span class="caps">WPM</span> to regain your old <span class="caps">QWERTY</span> speed".  I don't know my old <span class="caps">QWERTY</span> speed, but I was proficient, so let's say it was 70 <span class="caps">WPM</span>.  If I "trained" all day, that's 70 hours / 8 working hours  = 8.75 days, almost two weeks.  I really type only about a third of the day, so that makes it 8.75×3 = 26.25 days, about five weeks.  In reality, it took me about two months to type without thinking.  Maybe I was faster at <span class="caps">QWERTY</span> than I thought, or maybe I'm a slow learner, but it took me longer to transition than I'd expected.

That may be because I type largely from muscle memory.  Instead of mentally spelling out each word, then finding the corresponding keys, I rely on automatic keystroke patterns for common words (I suspect most touch-typists do this).  This is especially true for keywords in programming languages: table, div, span;  class, public, void, String;  select, from, where, join.  When I started learing Dvorak, my muscle memory for different languages had to be re-learned.  Maybe this made it harder for me to feel comfortable with Dvorak, to really say "ok, I've <em>learned</em> it."  <span class="caps">HTML</span> was the worst, for some reason.  I was re-learning <span class="caps">SQL</span> at the time, and didn't have much <span class="caps">SQL</span> muscle memory, so I picked it up much faster.
<h2>Living with Dvorak</h2>
So now that I've arrived, it's keyboard bliss, right?  Almost.  I do like it better, and can definitely feel the difference, but there are some real problems with it, which basically boil down to incompatibility.  I hate to say it, but like Betamax vs. <span class="caps">VHS</span>, the inferior solution wins, by sheer ubiquity.
<h3>Keyboard Shortcuts</h3>
Of all the issues, this hit me hardest, being something of a power-user.  On Windows, a bunch of useful commands are conventionally tied to the same keyboard shortcuts, generally with the Ctrl key.  Ctrl+X is cut (like scissors).  C is Copy.  V is paste (the v points down - "put it down here").  Z is undo (I don't know why that makes perfect sense to me).  A is select All.  S is Save.  B is Bold text.  On <span class="caps">QWERTY</span>, those are all left-hand, contiguous keys - mousing with my right hand, I could edit really fast.

All this changed with Dvorak.  The left-handed Ctrl shortcuts are now scattered across the board.  I don't want to re-bind them in every app I use, and in some apps, I couldn't if I wanted to.  I got around this by buying a fancy mouse (a Logitech <span class="caps">MX400</span>) with extra buttons, and tied them to Copy and Paste.  It's not the same, but it solves 70 or 80% of the problem.
<h3>Using Other Computers</h3>
This one is bigger than I'd thought.  I know, you're thinking "How often does he use someone else's computer?"  But <span class="caps">QWERTY</span> computers are everywhere, and they're spreading.  Most kiosks and embedded devices use <span class="caps">QWERTY</span> (the rest use alphabetical order).  SmartPhones use <span class="caps">QWERTY</span>.  The TitleSleuths at Borders bookstores use it.  Even my Prius uses it.  Lots of devices offer keyboards to talk to them, and they're not supporting Dvorak.  The range of devices that I've become incompatible with is only growing.
<h3>Other People Using My Computer</h3>
This is a minor point.  Everytime someone wants to use my computer (pair programming, or whatever), I have to switch it to <span class="caps">QWERTY</span>, for <em>each application</em> they use…it's not global (is this any better on Macs or *nix?).  So I launch an app and give them the keys, but they're only OK until they launch something else.  And some apps you need to tell twice, most notably the command line.  You tell it "Dvorak", it says <span class="caps">QWERTY</span>.  "Dvorak".  <span class="caps">QWERTY</span>.  "No, dammit, <em>Dvorak!</em>"

You can get around this with the excellent <a href="http://sourceforge.net/project/showfiles.php?group_id=8799">Dvorak Assistant</a>, a little System tray tool, whose icon is either a Q or a D key.  Instead of mousing around with the Win XP Language Toolbar, you can switch layouts via Ctrl+Shift+F12—much better than WinXP's default, Ctrl+Left Alt.  I used to mash that combo all the time, and sure enough, it'd pop me right into <span class="caps">QWERTY</span>.  Even better, the Dvorak Assistant affects all apps at once.
<h2>Switch back to <span class="caps">QWERTY</span>?</h2>
Like I said earlier, I'll probably switch.  My slightly-better speed comes at the cost of compatibility with the rest of the world.  My Dvorak speed will continue to improve some, and eventually plateau, but the number of <span class="caps">QWERTY</span> keyboards around me will only increase.  This makes Dvorak a steadily growing liability.

It'll take a bit to re-train my muscle memory, but I believe it'll be much faster than learning Dvorak.  Back on <span class="caps">QWERTY</span>, I'll be able to use any keyboard that crosses my path, and I'll get all those keyboard shortcuts back.  I'll have to make those extra mouse buttons do something else.
<h2>UPDATE</h2>
<strong>2007-02-23</strong> So I still haven't switched back to QWERTY.  I've tried a few times, and it doesn't seem like it'll be <em>too</em> hard to do, but I'm lazy, and busy doing other things.  On the other hand, if it's easy enough to switch to QWERTY, I might opt instead to stay on Dvorak, and just periodically practice QWERTY.  That way, I'll have the best of both worlds.

Also, someone found this article by searching for Vista + Dvorak.  I'll try to test the Dvorak Assistant on Vista, and will let everyone know how it goes, unless someone posts with a more specific question.
<h2>UPDATE (again)</h2>
<strong>2009-01-24</strong> Somewhere in the two years since I last updated this, I decided to stay on Dvorak.  Reading over my reasons for switching back to QWERTY, they boil down to three: crappy Windows support, other people and computers, and hot-keys.

Crappy Windows support is 100% solved by the still-excellent <a href="http://www.clabs.org/blogki/index.cgi?page=/ComputersAndTechnology/DvAssist">Dvorak Assistant</a> -- I carry a copy on my thumbdrive, and it's on every machine I regularly use.  If I could pay for it, I would.  It works flawlessly on Vista.

Other people and computers is still an issue, but only a minor one.  I can comfortably hunt-and-peck QWERTY, so using any other machine (kiosk, TitleSleuth, or my Prius) is simple enough.  Even since I started pair-programming <em>all the time</em> at my new job, it hasn't been a problem -- the Dvorak Assistant lets me switch my machine when we're at my desk, and I can find my way around QWERTY easily enough at other people's machines.

Hot-keys have become less of an issue as I've gotten more used to life with Dvorak.  I'm used to using hot-keys where they are in Dvorak (Ctrl-S looks like Ctrl-semi-colon), because when I type them, I still think in terms of letters: "S for Save", and for me, it's still an S.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>49</wp:post_id>
  <wp:post_date>2006-12-31 00:05:45</wp:post_date>
  <wp:post_date_gmt>2006-12-31 04:05:45</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>dvorak-the-betamax-keyboard</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="dvorak"><![CDATA[Dvorak]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[292320]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>439</wp:comment_id>
    <wp:comment_author><![CDATA[Aníbal Rojas]]></wp:comment_author>
    <wp:comment_author_email>anibalrojas@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://www.rubycorner.com</wp:comment_author_url>
    <wp:comment_author_IP>200.82.219.192</wp:comment_author_IP>
    <wp:comment_date>2006-12-31 11:55:55</wp:comment_date>
    <wp:comment_date_gmt>2006-12-31 15:55:55</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Actually people not using your computer because of its keyboard could be seen as a benefit ;-) And no, it is not better in *nix, each app will hold its own settings.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2006-12-31 15:55:55</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>440</wp:comment_id>
    <wp:comment_author><![CDATA[Dan Bernier]]></wp:comment_author>
    <wp:comment_author_email>danbernier@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://invisibleblocks.wordpress.com/</wp:comment_author_url>
    <wp:comment_author_IP>64.252.175.24</wp:comment_author_IP>
    <wp:comment_date>2006-12-31 12:19:55</wp:comment_date>
    <wp:comment_date_gmt>2006-12-31 16:19:55</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Aníbal, that's occurred to me, believe me.  In practice, though, it just gets irritating.

It's too bad that Dvorak support is so poor.  It seems like it could be much better, especially since the Dvorak Assistant works so well.  Just confirms that Dvorak is a niche interest -- most people don't care, so the feature is poor, until someone who <i>does</i> care takes some time to do it right.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>292320</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2006-12-31 16:19:55</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>442</wp:comment_id>
    <wp:comment_author><![CDATA[Doug Bromley]]></wp:comment_author>
    <wp:comment_author_email>doug.bromley@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://blog.straw-dogs.co.uk</wp:comment_author_url>
    <wp:comment_author_IP>84.92.174.108</wp:comment_author_IP>
    <wp:comment_date>2006-12-31 15:55:33</wp:comment_date>
    <wp:comment_date_gmt>2006-12-31 19:55:33</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I was going to try a Dvorak layout on my Logitech a while back and set about switching keys round only to find two keys were different in shape so making the task impossible as I'd have to miss 4 keys out due to incompatibility.

I guess its for the best as you point out.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2006-12-31 19:55:33</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>443</wp:comment_id>
    <wp:comment_author><![CDATA[Dan Bernier]]></wp:comment_author>
    <wp:comment_author_email>danbernier@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://invisibleblocks.wordpress.com/</wp:comment_author_url>
    <wp:comment_author_IP>72.232.131.22</wp:comment_author_IP>
    <wp:comment_date>2006-12-31 16:04:13</wp:comment_date>
    <wp:comment_date_gmt>2006-12-31 20:04:13</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Doug, you were going to move the physical keys around?  That's pretty hard-core!  I left the keys in the QWERTY layout, since I don't often look at the keys.  I know you can buy stickers for the keys if you want...]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>292320</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2006-12-31 20:04:13</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>1462</wp:comment_id>
    <wp:comment_author><![CDATA[Jonathan Westbay]]></wp:comment_author>
    <wp:comment_author_email>jonathanwestbay@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>68.43.84.120</wp:comment_author_IP>
    <wp:comment_date>2007-04-15 00:53:59</wp:comment_date>
    <wp:comment_date_gmt>2007-04-15 04:53:59</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I have considered switching to Dvorak layout many times, but I just never really had the time.

I think the efficiency will be a big payoff, at least for English.  Programming languages, maybe not so much.

QWERTY is just so engrained in my memory and now I'm getting old and slow, perhaps it's too much trouble.

I am also a "keyboardist" of the piano and synthesizer variety, so I do have greater finger awareness and dexterity than most.  But since typing is less stimulating to my keen ears, it is not nearly as motivating.

Anyhow, I found this site because I quickly realized the annoyance of all my keyboard shortcuts getting screwed up.  The current shortcut/mousing system is more efficient.  I suffer more from mousing strain than keying strain (probably because I mouse more) so I don't want to revert to "hunt and click"....worse than hunt and peck when you're faced daily with screens full of options to select]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2007-04-15 04:53:59</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9382</wp:comment_id>
    <wp:comment_author><![CDATA[Sergio]]></wp:comment_author>
    <wp:comment_author_email>sergio@adsen.com</wp:comment_author_email>
    <wp:comment_author_url>http://www.pajarator.com</wp:comment_author_url>
    <wp:comment_author_IP>148.244.156.194</wp:comment_author_IP>
    <wp:comment_date>2008-04-01 18:33:33</wp:comment_date>
    <wp:comment_date_gmt>2008-04-01 22:33:33</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Yep, I did the same, changed the keyboard layout to Dvorak (I even changed the keys physically on the keyboard, they mostly fit in except for a few which had funny shapes that stuck out) and stuck with it until I learned the letter distribution... and then got into the same exact problems...
Mostly the problem was: "In which keyboard mindset am I at the moment"? Others were the same, learning curve, muscle memory, other keybs, other people...
I finally concluded: Even I had better WPM speeds, that would not be enough to counteract the bad site of it, so I gave it up as a lost cause...
Oh well... there are other and better battles to fight...]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2008-04-01 22:33:33</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9541</wp:comment_id>
    <wp:comment_author><![CDATA[veov]]></wp:comment_author>
    <wp:comment_author_email>stunts01@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>118.208.66.211</wp:comment_author_IP>
    <wp:comment_date>2009-01-24 02:19:39</wp:comment_date>
    <wp:comment_date_gmt>2009-01-24 06:19:39</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I just made the switch again after trying a few times in the past.
@the 2 people that commented about the 4 logitech keys getting stuck.

I had the same problem. I had a close look to see what the problem was and noticed I could just cut off a piece inside the keyboard and they fit perfetly now.

it sort of looks like this
<pre>
|   |
|_,_|
</pre>

you just cut off the ,]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2009-01-24 06:19:39</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9707</wp:comment_id>
    <wp:comment_author><![CDATA[Jonathan]]></wp:comment_author>
    <wp:comment_author_email>jonathan@balyeatfamily.com</wp:comment_author_email>
    <wp:comment_author_url>http://balyeatfamily.com</wp:comment_author_url>
    <wp:comment_author_IP>76.75.37.209</wp:comment_author_IP>
    <wp:comment_date>2010-01-31 01:47:22</wp:comment_date>
    <wp:comment_date_gmt>2010-01-31 05:47:22</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Oh, and on Linux at least in XFCE and Gnome you can set the keyboard switcher to be desktop wide rather than application wide... something that I miss when working in Vista... I bookmarked the Dvorak assistant.

Jonathan.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2010-01-31 05:47:22</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9712</wp:comment_id>
    <wp:comment_author><![CDATA[gigabitsu]]></wp:comment_author>
    <wp:comment_author_email>jebusan_jr@msn.com</wp:comment_author_email>
    <wp:comment_author_url>http://none</wp:comment_author_url>
    <wp:comment_author_IP>75.161.161.26</wp:comment_author_IP>
    <wp:comment_date>2010-05-15 21:15:44</wp:comment_date>
    <wp:comment_date_gmt>2010-05-16 01:15:44</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[What is weird is that QWERTY keyboard not standard around world.
germany, austria, switzerland and hungary use QWERTZ Layout, and france, belgum, and quabec use the AZERTY system and English Countries üse the QWERTY system.

I remember one time Oma having old typewriter that use Type 2 keyboard which is like german dvorak, I HATE have to use that to do homework wen visiting. 

I think QWERTZ is much better than dvorak cuz i am left handed.

I do think they should give more support for dvorak/type 2 on modern device like Prius and iPhone, they have a special dial phone app for god sake why not dvorak/type 2 or QWERTZ app also!!!!!!!!!!!111111111!!!!!!!!!!1]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2010-05-16 01:15:44</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9706</wp:comment_id>
    <wp:comment_author><![CDATA[Jonathan]]></wp:comment_author>
    <wp:comment_author_email>jonathan@balyeatfamily.com</wp:comment_author_email>
    <wp:comment_author_url>http://balyeatfamily.com</wp:comment_author_url>
    <wp:comment_author_IP>76.75.37.209</wp:comment_author_IP>
    <wp:comment_date>2010-01-31 01:45:17</wp:comment_date>
    <wp:comment_date_gmt>2010-01-31 05:45:17</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Well, I normally don't post on websites, but this is a good site that is closely related to my interests.

I had a lot of trouble switching to Dvorak, and it was a compromise to be sure. I wanted to do a cording keyboard as I have a background in piano and guitar, but found that those keyboards were to expensive and often large. (I have a small work area.)

It took me about 4 months to master Dvorak and it was hard being a touch typist that thought words rather then letters, AND I also did some SQL (now PostgreSQL.)  

I found a way around working on other people's computers. I bought a TypeMatrix keyboard after about 6 months of Dvorak, and it took another 1-3 months to master. But I still can type about 60 words a minute on a regular keyboard in Dvorak mode, after a bit (it take a bit for my brain to switch... 30 mins to an hour)

Sometimes I just switch a Vista keyboard to Dvorak if I am going to be using it for more than 30 minutes. But if not, I will just type in QWERTY and look at the keys.  The fingers can type just as fast, it just takes a second to translate where they go.

I type only about 70 words a minute even in Dvorak, but it is easier for me, and less strain on my wrists. I still use QWERTY from time to time and if I look at the keyboard I can type about 30 words a minute which is not to bad for little things.

The TypeMatrix is nice with it's middle enter key and such... I have not beeen able to afford the new one which looks even better (I have the 2020)...

Some notes on the 2020: to use the numeric keypad you have to hit caps lock and numlock (in Linux)...

To get around the programming issue (which I only do on my computer normally) I have remapped somethings and use alt chains for some others. (pull down combos)

Some things that still stump me... when I am in Vista on my wife's computer Dvorak is not recognized in the command line (I of course can switch it manually if I have my TypeMatrix hooked up)

Anyway, even though I normally use the TypeMatrix, and I am typing this on a QWERTY regular keyboard in Dvorak mode. I still am doing about 30 WPM... mostly because I keep hitting k instead of X in TypeMatrix (because in the TypeMatrix keyboard it is not as much of a reach.)

Jonathan...]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2010-01-31 05:45:17</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9603</wp:comment_id>
    <wp:comment_author><![CDATA[Al]]></wp:comment_author>
    <wp:comment_author_email>invisblocks@haxninja.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>81.236.17.224</wp:comment_author_IP>
    <wp:comment_date>2009-04-17 19:25:30</wp:comment_date>
    <wp:comment_date_gmt>2009-04-17 23:25:30</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I found this information most helpful. I wonder though, do you think it's possible to learn Dvorak and keep your Qwerty prowess? Because I'm afraid to lose my qwerty memory thus rendering me useless on such keyboards.

Thanks]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2009-04-17 23:25:30</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9604</wp:comment_id>
    <wp:comment_author><![CDATA[Daniel Bernier]]></wp:comment_author>
    <wp:comment_author_email>danbernier@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://invisibleblocks.wordpress.com/</wp:comment_author_url>
    <wp:comment_author_IP>69.37.159.159</wp:comment_author_IP>
    <wp:comment_date>2009-04-17 20:36:48</wp:comment_date>
    <wp:comment_date_gmt>2009-04-18 00:36:48</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Al, I've heard of people who can switch between QWERTY and Dvorak, though I don't know what speed they keep at either.  I don't seem to be able to, though.

It's really become a non-issue for me, because I've adjusted to Dvorak, and the occasional QWERTY.  But even so, I'd say try it.  If you find your QWERTY muscle memory slipping, switch back, and it shouldn't take too long for it to return.  You may find yourself addicted to Dvorak, though...]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>292320</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2009-04-18 00:36:48</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9606</wp:comment_id>
    <wp:comment_author><![CDATA[Brycon]]></wp:comment_author>
    <wp:comment_author_email>nevermind@inorbit.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>189.193.102.234</wp:comment_author_IP>
    <wp:comment_date>2009-04-29 02:25:51</wp:comment_date>
    <wp:comment_date_gmt>2009-04-29 06:25:51</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I've been palying with Dvorak for a few days now. I really like the feel, and actually the learning curve is one of my favourite things about it. 

But so far, I haven't been able to fix some details that vex me quite a bit: I use a VX Revolution mouse, and I have the copy and paste functions assigned to a couple buttons. Well, it behaves very weirdly in Firefox. The copy brings up the downloads window, whose shortcut is Ctrl+J, and that would make sense because the J is where the C would be in QWERTY. But I have found all the other shortcuts work normally, and I have found no fix yet, even testing deeply with layout modifications (using Microsoft Keyboard Layout Creator). I shall mention I use a spanish version, and the mouse works flawlessly in the English Dvorak.

What really sucks at this point is all the obstacles I find to be able to make full use of better input devices, because I don't feel like going back to QWERTY. 

Nice blog by the way.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2009-04-29 06:25:51</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9614</wp:comment_id>
    <wp:comment_author><![CDATA[Jack]]></wp:comment_author>
    <wp:comment_author_email>watermelonmasher@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>24.68.70.66</wp:comment_author_IP>
    <wp:comment_date>2009-05-16 06:08:30</wp:comment_date>
    <wp:comment_date_gmt>2009-05-16 10:08:30</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Thanks for the thoughts and for sharing your experiences.  It may be due to never developing more than a relatively speedy six finger, non-touch based style on Qwerty but I personally found Dvorak comfortable and easy to learn in less than a week.  Something about the way the layout is arranged just feels pleasing to me.  

I was thinking of trying Colemak but some of the design philosophies put me off, especially the similarities to Qwerty. Also while the repurposed caps lock as a second delete key is a very popular trait of the layout but I believe it may foster poor accuracy in the long run.

As for the issues with cut-copy-paste hot keys, I just assign the functions to the f13-f15 keys which sit separately from the main function keys above the home, delete and page up/down cluster on my keyboard.  This eliminates the problem of accidentally closing windows when pasting.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2009-05-16 10:08:30</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9617</wp:comment_id>
    <wp:comment_author><![CDATA[nick]]></wp:comment_author>
    <wp:comment_author_email>seventh.adept@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>203.36.157.8</wp:comment_author_IP>
    <wp:comment_date>2009-05-21 03:30:21</wp:comment_date>
    <wp:comment_date_gmt>2009-05-21 07:30:21</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[hey
i've recently (about 2 weeks ago) switched to dvorak for the 1st time.  i got a screwdriver out and changed all the keys around, only took about 2 mins ( http://twitpic.com/50qyw ). i was a pretty proficient qwerty typer - about 100wpm.  right now i'm at about 20-30wpm on dvorak.  i work in IT so i have to work on qwerty PCs all the time and as far as i can tell i'm still at full speed on them.  as someone above mentioned, sometimes while typing on dvorak i just slip back into qwerty mode and everything just goes wrong.. i put it down to mental tiredness.
i'm going to stick with it for the moment, from my very unscientific tests i'm slowly getting faster.  The shortcuts thing is definitely my most sore spot, i might try the mouse trick as i have the logitech revolution mouse as well, but i usually try and keep my hands off the mouse.

just thought i'd add my bit :)

i wish i could find somewhere that would sell decent quality dvorak keyboards :/]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2009-05-21 07:30:21</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9630</wp:comment_id>
    <wp:comment_author><![CDATA[Daniel Bernier]]></wp:comment_author>
    <wp:comment_author_email>danbernier@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://invisibleblocks.wordpress.com/</wp:comment_author_url>
    <wp:comment_author_IP>12.24.127.147</wp:comment_author_IP>
    <wp:comment_date>2009-07-01 08:04:08</wp:comment_date>
    <wp:comment_date_gmt>2009-07-01 12:04:08</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[woodelf, thanks for the info about the Mac layout.  That's a nifty idea! Though my mental command mappings are (I think) mostly letter-based, especially after 3 years of Dvorak, so I'd probably be confused by it.

For your Vista problems, like I said in the post, try out the Dvorak Assistant: http://clabs.org/dvorak.htm  In 3 years, I've never had a single problem with it, on XP or Vista.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>292320</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2009-07-01 12:04:08</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9629</wp:comment_id>
    <wp:comment_author><![CDATA[woodelf]]></wp:comment_author>
    <wp:comment_author_email>natbarmore@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>99.175.202.9</wp:comment_author_IP>
    <wp:comment_date>2009-07-01 07:02:11</wp:comment_date>
    <wp:comment_date_gmt>2009-07-01 11:02:11</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[To answer a couple unanswered questions: Macs, both OS X, and the previous versions, switch the keyboard system-wide. Under OS X, you have the choice whether to make it system-wide, or app-specific; it's been long enough since i used System 7/8/9 that I don't remember if you also had the option of doing it per-application. 

Also, for Macs there is a Dvorak keyboard layout that leaves command-keys in their qwerty locations. So, hitting the key labeled with a 'z' on the physical keyboard gives you a semicolon, and hitting shift-z, option-z, and shift-option-z all give the appropriate characters that go along with the semicolon normally. But if you type command-z, you don't get whatever command-semicolon would invoke in your app (often the preferences), but instead it invokes Cut. I'm not sure i'm explaining it well? Basically, pressing any key in conjunction with the command key matches the result you'd expect from looking at the printed keycaps on your qwerty keyboard, but anything else you do instead gives you Dvorak-ish results. So if your mental command mappings are more about muscle memory than letter associations, that could be a good option. Personally, I think of the letters, so found that more confusing than having the command keys in "funny" places. No idea if there is an equivalent key mapping for MSWindows or *nix.

As for switching and accommodating: I think the usual claims of re-learning time are optimistic. At my best, I was around 120+wpm on qwerty--and that was on a manual typewriter, so that meant without typos. By the time i switched to Dvorak, i was probably only typing 100wpm. Nonetheless, i would guess that it was a solid 3mo before i was back up to my old speed on Dvorak, and probably 3mo more before it was completely transparent, and I no longer even noticed. Maybe I'm a slow learner. 

Nonetheless, I'd never go back, and never even contemplated it at the time. It's just too much better. I think the speed claims may be overrated, but the efficiency claims definitely play out in my experience, and i get much less sore with lengthy typing. 

Oh, and I found this because of problems with Dvorak and Vista: not only is it per-application, which drives me batty, but it keeps switching back to qwerty at random times, like with each new dialog box or text field or anywhere else I might want to type. I don't have administtrative rights on the work computer, but i may have to see if i can get them to install the dvorak assistant.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>8139804</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2009-07-01 11:02:11</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9635</wp:comment_id>
    <wp:comment_author><![CDATA[Evgeny Zislis]]></wp:comment_author>
    <wp:comment_author_email>evgeny.zislis@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://blog.kesor.net</wp:comment_author_url>
    <wp:comment_author_IP>212.179.48.132</wp:comment_author_IP>
    <wp:comment_date>2009-07-07 08:08:20</wp:comment_date>
    <wp:comment_date_gmt>2009-07-07 12:08:20</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Started an attempt to learn dvorak ... since I got me a blank Das Keyboard Ultimate, my non-touch-typing qwerty typing can reach about 95wpm. Dvorak is more fun to learn though, just the homerow lessons already show a difference - way more interesting words to practice with :)]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2009-07-07 12:08:20</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9833</wp:comment_id>
    <wp:comment_author><![CDATA[Daniel Bernier]]></wp:comment_author>
    <wp:comment_author_email>danbernier@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://invisibleblocks.wordpress.com/</wp:comment_author_url>
    <wp:comment_author_IP>99.65.198.85</wp:comment_author_IP>
    <wp:comment_date>2011-10-24 08:45:49</wp:comment_date>
    <wp:comment_date_gmt>2011-10-24 12:45:49</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Hi (other) Dan,

You should give it a try. I'm still on Dvorak, and really happy with it. 

SmartPhones and kiosks aren't a problem, because you can't touch-type on them - no one lines up on home row on their phone. I didn't realize that Dvorak only matters for touch-typing, but over 7 years, it's gradually dawned on me.

&gt; About once a year I think I should switch to dvorak and every time I find this blog and re-read it. It has been very useful, thank you!

That /really/ makes me want to write a full update post, because I was so wrong on this. I just re-read the post now, and I'm amazed how all my objections have faded.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>292320</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1319460350.3391";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:11:"bonsaigiant";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1319460350</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2011-10-24 12:45:49</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9834</wp:comment_id>
    <wp:comment_author><![CDATA[Dan]]></wp:comment_author>
    <wp:comment_author_email>dannathanroberts@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>141.212.165.130</wp:comment_author_IP>
    <wp:comment_date>2011-10-24 18:16:47</wp:comment_date>
    <wp:comment_date_gmt>2011-10-24 22:16:47</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Wow, thanks for the quick response!

I'm sure a lot of people would get a lot out of an update post.

Especially if it covers any ergonomic problems, etc. you had, the keyboards you use, etc.

I sometimes use the swype keyboard on android which requires remembering where qwerty keys are because you cover them up, the rest of the time I use two thumbs to type on the regular android qwerty keyboard.

A quick search turned up some Dvorak keyboards for touchscreen android phones. There is also 8pen (http://www.8pen.com/) a totally different smartphone keyboard. I've tried it, but could never commit.

Maybe I should try 8pen first before going to Dvorak on my computer since it would be less of a productivity and lifestyle change?

Thanks again,

- Dan]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1319494608.3438";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1319494608</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2011-10-24 22:16:47</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9832</wp:comment_id>
    <wp:comment_author><![CDATA[Dan]]></wp:comment_author>
    <wp:comment_author_email>dannathanroberts@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>99.19.70.132</wp:comment_author_IP>
    <wp:comment_date>2011-10-24 04:56:13</wp:comment_date>
    <wp:comment_date_gmt>2011-10-24 08:56:13</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Hello,
About once a year I think I should switch to dvorak and every time I find this blog and re-read it.  It has been very useful, thank you!

Are you still using Dvorak?  I'm thinking about switching but my smart phones (android) seem like a sticking point.  Right now I have a touchscreen, but want to get one like a blackberry or android with a hard key keyboard.

I'm very curious about your thoughts.

- Dan from MI]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1319446574</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1319446575.5658";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2011-10-24 08:56:13</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Blogging with RedCloth and WordPress</title>
  <link>http://invisibleblocks.com/2007/01/01/blogging-with-redcloth-and-wordpress/</link>
  <pubDate>Mon, 01 Jan 2007 16:28:12 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.wordpress.com/2007/01/01/blogging-with-redcloth-and-wordpress/</guid>
  <description/>
  <content:encoded><![CDATA[I don't particularly like WordPress' built-in editor.  I don't like typing <span class="caps">HTML</span> by hand, especially since I've found Textism.  I tried using Ruby's RedCloth gem to convert my blog drafts from <a href="http://www.writeboard.com/">Writeboards</a> into <span class="caps">HTML</span> that I can stuff into WordPress, but it replaces each double-newline with `&lt;/p&gt;&lt;p&gt;`, which makes it hard as hell to read.

So I threw together this ever-so-tiny ruby script that first splits the text on double-newlines, and then pumps each paragraph to RedCloth.  It's nothing special, but after two non-techie posts, I thought I'd balance it out with at least <i>something</i>.  The Dvorak post, and this one, were written with this script.

[sourcecode lang='ruby']require 'redcloth'

post = %{
your post text goes here
}

puts post.split("\\n\\n").map { |p|
    RedCloth.new(p).to_html + "\\n\\n"
}
[/sourcecode]
]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>50</wp:post_id>
  <wp:post_date>2007-01-01 12:28:12</wp:post_date>
  <wp:post_date_gmt>2007-01-01 16:28:12</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>blogging-with-redcloth-and-wordpress</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="ruby"><![CDATA[Ruby]]></category>
</item>
<item>
  <title>Business Programming Gets Fun Again!</title>
  <link>http://invisibleblocks.com/?p=51</link>
  <pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.wordpress.com/?p=51</guid>
  <description/>
  <content:encoded><![CDATA[Reg Braithwaite continues to give me hope:  <a href="http://weblog.raganwald.com/2007/01/business-programming-standards-have.html">Business programming standards have become higher in 2007. Learn to love it.</a>

The software world offers many interesting problems to solve.  Unfortunately, we have to wade through all the nasty little problems, and as Paul Graham <a href="http://www.paulgraham.com/gh.html">warns</a>, "The distinguishing feature of nasty little problems is that you don't learn anything from them...working on nasty little problems makes you stupid."  In that case, we should follow <a href="http://steve-yegge.blogspot.com/2006/12/i-take-it-all-back-send-me-your-money.html">Steve Yegge's advice</a>:  "Never stop learning...every program you write should be the hardest you've ever written."  Avoid the nasty little problems, work on the really tough ones.  Got it.

But how do we find these tough problems?  How do we avoid the <a href="http://www.joelonsoftware.com/items/2006/10/12.html">accidental difficulties</a>, and work on the <a href="http://weblog.raganwald.com/2006/09/business-programming-simply-isnt-that.html">actual difficulties</a>?  It's not that we can't tell them apart -- that's easy -- but how do we find people who will pay us to solve them?  If I knew that, I'd be a much happier coder.

One common variety of nasty-little-problem is working in the wrong context.  When the problem you're working on just isn't handled well by your area of expertise, but is handled beautifully by another.

This usually manifests as lots of dull, manual work, to achieve very little.  Writing a hundred data-mapping objects, instead of generating them from the database schema.  Even typing manually, instead of learning how to use search-and-replace efficiently.

Maybe the least-appreciated benefit of Ruby on Rails is that it wipes out a <i>whole category</i> of accidental difficulties, clearing out the mess.

It's really aggravating when you see a program that's messy because a <a href="http://www.paulgraham.com/avg.html">Blub programmer</a> didn't know there was a better way.  The worst part is championing the different approach, and getting beaten back with scheduling.  "Well, sure, we could do that, if we had lots of extra time...but it works ok now, and I don't have time to get into that new, weird stuff."

So many hard problems are hard only because you're looking at it the wrong way.  But once you know the trick, it's easy...and sooner or later, ya gotta figure everyone's gonna know the trick.  Do you want to be the only one left out?  Do you really want to be the only one still struggling with old problems?

If Reg is right, that 2007 is the year Business Programming gets tougher

<a href="http://weblog.raganwald.com/">Reg</a>, <a href="http://www.joelonsoftware.com/">Joel</a>, <a href="http://www.paulgraham.com/">Paul</a>, and <a href="http://steve-yegge.blogspot.com/">Steve</a> -- thanks for writing.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>51</wp:post_id>
  <wp:post_date>0000-00-00 00:00:00</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="learning"><![CDATA[Learning]]></category>
  <category domain="category" nicename="programming"><![CDATA[Programming]]></category>
  <category domain="category" nicename="software-thinking"><![CDATA[Software Thinking]]></category>
</item>
<item>
  <title>Ruby, Yoga for your Brain</title>
  <link>http://invisibleblocks.com/2007/02/20/ruby-yoga-for-your-brain/</link>
  <pubDate>Tue, 20 Feb 2007 14:24:10 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.wordpress.com/2007/02/20/ruby-yoga-for-your-brain/</guid>
  <description/>
  <content:encoded><![CDATA[Just a fun little bit of writing, for a <a href="http://on-ruby.blogspot.com/2007/01/blogging-contest-february-challenge.html">contest</a>...


> LISP has jokingly been described as "the most intelligent way to misuse a computer";. I think that description a great compliment because it transmits the full flavour of liberation: it has assisted a number of our most gifted fellow humans in thinking previously impossible thoughts...The analysis of the influence that programming languages have on thinking habits of its users, and the recognition that, by now, brainpower is by far our scarcest resource, they together give us a new collection of yardsticks for comparing the relative merits of various programming languages. The competent programmer is fully aware of the strictly limited size of his own skull&#8230;
> - Edsger W. Dijkstra, <a href="http://www.cs.utexas.edu/~EWD/transcriptions/EWD03xx/EWD340.html">The Humble Programmer</a>

"Brainpower is by far our scarcest resource,"; indeed.  Why then, would I want mine blown?  I'd rather gently stretch it.  Extend it.  Liberate it.  Yoga for my brain, please.

In yoga, you honor your body's suggested threshold of pain.  If you can't do the full posture, don't hurt yourself, but try this modification, so you still benefit.  When you're ready, you can try the full posture.

Ruby is like yoga for your mind.  Ruby encourages you to stretch to your limits, and come back when you're ready for more.  You can write getters and setters, and old-school <code>for</code> loops, and Ruby won't complain&#8230;but it'll gently encourage you to try <a href="http://www.ruby-doc.org/docs/UsersGuide/rg/accessors.html"><code>attr_reader</code> and <code>attr_writer</code></a>, and <a href="http://www.artima.com/intv/closures.html">block</a> iteration.  You can write your own database access code, until you're ready to try <a href="http://wiki.rubyonrails.com/rails/pages/ActiveRecord">active record</a>.  You can write straight OO, and never leave the <a href="http://steve-yegge.blogspot.com/2006/03/execution-in-kingdom-of-nouns.html">Kingdom of Nouns</a>, until you're ready to try something more <a href="http://tech.rufy.com/2006/11/functional-programming-in-ruby.html">functional</a>.

Ruby lets you learn new things, in a familiar setting.  With Ruby, you can honor your mind's suggested threshold of pain.  Ruby hasn't blown my mind, and I trust it never will.  A <a href="http://jutopia.tirsen.com/articles/2005/10/28/why-ruby-on-rails">few</a> <a href="http://java.sun.com/products/ejb/">nasties</a> <em>have</em> <a href="http://ptrthomas.wordpress.com/2006/06/06/java-call-stack-from-http-upto-jdbc-as-a-picture/">blown</a> my mind, and it's never fun.  It takes time to recover from abuse like that.  I'd rather follow the <a href="http://weblog.raganwald.com/2007/02/but-y-would-i-want-to-do-thing-like.html">yogis</a> out there, and enjoy the benefits of life-long mental flexibility.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>52</wp:post_id>
  <wp:post_date>2007-02-20 10:24:10</wp:post_date>
  <wp:post_date_gmt>2007-02-20 14:24:10</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>ruby-yoga-for-your-brain</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="learning"><![CDATA[Learning]]></category>
  <category domain="post_tag" nicename="ruby"><![CDATA[Ruby]]></category>
</item>
<item>
  <title>Programmable Text Editing on Windows with EmEditor</title>
  <link>http://invisibleblocks.com/2007/02/21/programmable-text-editing-on-windows-with-emeditor/</link>
  <pubDate>Wed, 21 Feb 2007 18:04:49 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.wordpress.com/2007/02/21/programmable-text-editing-on-windows-with-emeditor/</guid>
  <description/>
  <content:encoded><![CDATA[Windows lacks a decent programmable text editor.

I know there's <a href="http://en.wikipedia.org/wiki/Emacs">Emacs</a> and <a href="http://www.vim.org/">Vim</a>, but I want something that looks good, and is easy to learn.  If it's free or cheap, that's good, too.  Based on screencasts I've seen, I'd say I want something like <a href="http://macromates.com/">TextMate</a>, but I've never actually used it, so that's just a guess.

It has to be programmable.  I spend lots of time working with text, and I want an editor that lets me write code to process my text.  I want to take a list of values, and generate SQL from it.  I want to auto-format HTML.  I want to insert custom code templates, based on keywords I type.

Really, I want something like Ruby's text-mashing power, built into my editor.  If I could send a buffer's contents through some code, and replace the buffer with the script's output, that'd be something.  This would let me automate probably 99% of the repeatable things I do.  It doesn't have to be Ruby, but that'd be nice.

<h3>EmEditor's Programmable Macros</h3>

I found <a href="http://www.emeditor.com/">EmEditor</a>, which gets me pretty close.  It has a 30-day trial, and it's $40 to buy.  It has programmable macros, with a decent set of variables that give you access to the buffers, editors, and all menu items.  The macros are run through the <a href="http://msdn2.microsoft.com/en-us/library/ms950396.aspx">Windows Script Host</a> (WSH), which is a little scary, but it means that you can <em>write your macros in JavaScript</em>.  Actually, since WSH is language-agnostic, you can write your macros in <em>any language</em> with a WSH interface.  Including <a href="http://arton.hp.infoseek.co.jp/">Ruby</a>.  Or <a href="http://www.haskell.org/haskellscript">Haskell</a>, or <a href="http://www.luascript.thersgb.net/luascript">Lua</a>, which makes it easier for me to experiment with them now.  And of course there's <a href="http://www.activestate.com">Python and Perl</a>.  I think this is pretty nifty.

<h3>The Downside</h3>

Since it's built on WSH, you don't have any means of including other files.  Nothing like Ruby's <code>require</code>, Java's <code>import</code>, C#'s <code>using</code>.  This means no library re-use, no utility functions.  No <a href="http://whytheluckystiff.net/ruby/redcloth/">RedCloth</a> for blog posting, no <a href="http://www.germane-software.com/software/rexml/">REXML</a> for auto-formatting XML, no <a href="http://code.whytheluckystiff.net/hpricot">Hpricot</a> for digging through generated HTML.  How about a nice, clean interface to WSH's hairy objects?  I'd love to write one!  (Well, I'd love to <em>have</em> one, so I'd be <em>willing</em> to write it.)  But you couldn't use it, if I did.  I think this is a pretty significant problem.  You have to start from scratch with each script.  Someone please tell me I'm missing something here.

None of this is stopping me from rolling up my sleeves yet.  Here are some tasks I've automated so far (you can get some of the .js files from my <a href="http://danbernier.googlepages.com/emeditormacros">Google Pages</a>...I'll put up more when I have a minute):

* Replacing "smart quotes" and other funny characters with their plain-text equivalents.  Great for copying code and data out of MS Office products.
* Delete all copies of whatever text is selected.  When I'm cleaning up generated HTML, I remove lots of code (<code>&lt;td&gt;, &lt;tr&gt;, class="foo"</code>), so I can see the parts I care about.  Just highlight, run, <em>poof</em>.  All gone.
* Make the word I just typed into an opened-and-closed HTML tag, with the cursor in between.  I have this hooked up to Ctrl-space, and Shift-Ctrl-space adds in a newline and tab indent.  "b" ctrl-space produces `&lt;b&gt;|&lt;/b&gt;`, and the cursor is where the `|` is.  "table" shift-ctrl-space "tr" shift-ctrl-space "td" ctrl-space.  Much faster.
* Run some JavaScript on each line, and replace the line with the code's return value.  You can use this for chewing on data, cleaning up formatting, calculating values, or whatever.  If you have to change many lines of similar C# or Java, you can chew each line up, and rewrite the code with this.  Powerful, easy to make a mess with, and all that.  This is probably my favorite.

Things I haven't gotten around to yet:

<ul>
<li>Tidying XML or HTML</li>
<li>Customizeable templates.  These would work like my HTML-tag-izer, where you type a word, then Ctrl-space, and your word is replaced with a template of code.  Eclipse has this, and TextMate comes with a whole mess of really nicely defined ones for Ruby.</li>
</ul>

Maybe someday, I'll have learned emacs, and I'll look back on this post and laugh at myself.  "Windows <em>Script Host??</em>  What was wrong with me?"  In the meantime, I have something that helps me along, lets me have fun automating things, and lets me explore other languages.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>53</wp:post_id>
  <wp:post_date>2007-02-21 14:04:49</wp:post_date>
  <wp:post_date_gmt>2007-02-21 18:04:49</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>programmable-text-editing-on-windows-with-emeditor</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="programming"><![CDATA[Programming]]></category>
  <category domain="post_tag" nicename="ruby"><![CDATA[Ruby]]></category>
  <wp:comment>
    <wp:comment_id>677</wp:comment_id>
    <wp:comment_author><![CDATA[Raj]]></wp:comment_author>
    <wp:comment_author_email>rrajen@comcast.net</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>68.40.170.253</wp:comment_author_IP>
    <wp:comment_date>2007-02-24 10:55:01</wp:comment_date>
    <wp:comment_date_gmt>2007-02-24 14:55:01</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Check out Intype @ http://intype.info/home/index.php

It is only an Alpha release right now, but it seems to have a lot of potential to be an outstanding editor (ala Textmate) for Windozites

In their forum there is an Intype Project Manager that someone wrote in Delphi that acts as a wrapper around the editor. The combination of the two has given me a workable solution until the product gets released.

Please do check it out.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2007-02-24 14:55:01</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>3867</wp:comment_id>
    <wp:comment_author><![CDATA[Rob Bazinet]]></wp:comment_author>
    <wp:comment_author_email>rbazinet@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://rbazinet.wordpress.com/</wp:comment_author_url>
    <wp:comment_author_IP>75.130.93.202</wp:comment_author_IP>
    <wp:comment_date>2007-06-27 09:14:11</wp:comment_date>
    <wp:comment_date_gmt>2007-06-27 13:14:11</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Dan,

I am a Windows guy trying to do Rails and Ruby and knowing how the Mac fanboys over at 37Signals and around the Rails community love TextMate I ran across E-Texteditor.  It is basically TextMate for Windows with bundles and everything like TextMate.  It is in beta but I have been using it for a few months now and it is good with frequent updates and good support.

It here - http://www.e-texteditor.com/index.html if you are interested.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>18247</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2007-06-27 13:14:11</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>3932</wp:comment_id>
    <wp:comment_author><![CDATA[Daniel Bernier]]></wp:comment_author>
    <wp:comment_author_email>danbernier@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://invisibleblocks.wordpress.com/</wp:comment_author_url>
    <wp:comment_author_IP>12.178.84.66</wp:comment_author_IP>
    <wp:comment_date>2007-07-02 09:22:52</wp:comment_date>
    <wp:comment_date_gmt>2007-07-02 13:22:52</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I really need to update this post...after playing with EmEditor for a bit, I found <a href="http://www.pnotepad.org/" rel="nofollow">Programmer's Notepad</a>.  It's opensource, free, and (my favorite) it lets you pump a buffer to any executable.  Just what I wanted!  The find-replace has some quirks, but it works, and the project is active, so I have high hopes.  I have Ctrl-Shift-R set up to run the buffer as in-line Ruby, which is awesome...I don't even use IRB anymore.

Raj, I've been checking out InType periodically, and it looks promising.  I'm sure I'll be downloading the trials a few more times, to see how it comes along.

Rob, I also checked out e, and liked it ok.  I'm not already hard-wired for TextMate, so I'd have some learning to do (no sweat).  The only thing that turns me off at all is, I want to make my own extensions...I guess I'd be making bundles, in e.  That looks like it'd be a bit more involved.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>292320</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2007-07-02 13:22:52</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9384</wp:comment_id>
    <wp:comment_author><![CDATA[Sayak]]></wp:comment_author>
    <wp:comment_author_email>sahasayak30@yahoo.co.in</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>220.227.76.2</wp:comment_author_IP>
    <wp:comment_date>2008-04-04 04:19:40</wp:comment_date>
    <wp:comment_date_gmt>2008-04-04 08:19:40</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Hi,

Please help me in running a ruby programme from EMEditor.


Thanks,
Sayak]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2008-04-04 08:19:40</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9385</wp:comment_id>
    <wp:comment_author><![CDATA[Daniel Bernier]]></wp:comment_author>
    <wp:comment_author_email>danbernier@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://invisibleblocks.wordpress.com/</wp:comment_author_url>
    <wp:comment_author_IP>12.24.127.147</wp:comment_author_IP>
    <wp:comment_date>2008-04-04 12:29:03</wp:comment_date>
    <wp:comment_date_gmt>2008-04-04 16:29:03</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Sayak,

I stopped using EmEditor about a year ago, so at this point, I'd say EmEditor's help files would be the place to go.  Assuming, of course, you successfully have both ruby and EmEditor installed and running properly.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>292320</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2008-04-04 16:29:03</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Gotham Ruby Conference</title>
  <link>http://invisibleblocks.com/2007/02/21/gotham-ruby-conference/</link>
  <pubDate>Wed, 21 Feb 2007 14:22:27 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.wordpress.com/2007/02/21/gotham-ruby-conference/</guid>
  <description/>
  <content:encoded><![CDATA[This April 21, in Google's Manhattan offices, for $100, you can check out the <a href="http://www.goruco.com">Gotham Ruby Conference</a>.

These <a href="http://www.ruby-lang.org/en/community/conferences/">regional Ruby conferences</a> are a great idea, I think.  If your job won't pay for you to attend a huge (more expensive) Ruby conference, plus travel expenses, you can take advantage of the smaller, cheaper, local conferences springing up all around.  Even if you're a relative Ruby newbie, the price makes it a low-risk investment.  For $100, and a full day of Ruby, it's a bargain.  Just as a cost comparison, I'm about to start another day of .Net training, and that costs about $500 a day.

See you there...]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>54</wp:post_id>
  <wp:post_date>2007-02-21 10:22:27</wp:post_date>
  <wp:post_date_gmt>2007-02-21 14:22:27</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>gotham-ruby-conference</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="conferences"><![CDATA[conferences]]></category>
  <category domain="post_tag" nicename="goruco2007"><![CDATA[goruco2007]]></category>
  <category domain="post_tag" nicename="ruby"><![CDATA[Ruby]]></category>
</item>
<item>
  <title>How to Design A Domain Specific Language, with David Pollak</title>
  <link>http://invisibleblocks.com/2007/02/21/how-to-design-a-domain-specific-language-with-david-pollak/</link>
  <pubDate>Thu, 22 Feb 2007 02:08:31 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.wordpress.com/2007/02/21/how-to-design-a-domain-specific-language-with-david-pollak/</guid>
  <description/>
  <content:encoded><![CDATA[I just finished watching David Pollack's presentation at Google, <a href="http://video.google.com/videoplay?docid=-8103284744220333344&amp;q=ruby">How to Design A Domain Specific Language</a>.  It's only an hour, and it's got some interesting ideas.  A nice jog, good for your mental health.

His main theme is bringing computing closer to the business users.  Computers exist to help us solve problems, but most people can't program, so we need all these programmers to translate for the business people, but the translation is often imperfect, so we go back and forth like couriers between the business and the machine.  Don't we have better things to be doing?  This idea of letting business users program often riles programmers who fear being automated out of a job, but I think there's enough hard stuff out there for anyone who's up for cracking some hard nuts.  I say, let's make the drudge work easier, so we can get on with the real work.

The essence of a DSL is building the semantics of the business into a mini-language, so the business people can read the code.  [Sure, they could probably write it themselves, but most don't want to.]  And if they can read the code, they can <em>sign off</em> on the code.  Why translate specs from business-speak into Java?  Why not make the code so clear, it <em>is</em> the spec?

Pollack points out that if you try this, you have to convince the business that the translation works.  I've seen this before...when your code is readable by the business, they'll forget that it's code.  "How do we know the software does what the requirements say?"  Because the requirements basically <em>are</em> the software.  Once they grok it, though, you can almost remove yourself from the equation.  Pollack says of his DSL SiteMap:

<blockquote>We were able to go through with...the business users themselves, to figure out [the navigation rules] for each page...We never had a failure where the business user didn't get something they were expecting to get.  We had to demonstrate early...that the implementation of the code matched the semantics of the DSL.  Once we proved that, the code reviews went really really quick.</blockquote>

That's a great place to be.

BTW, thanks to <a href="http://www.rubyinside.com/3-ruby-lectures-and-presentations-given-at-google-388.html">Peter Cooper</a> for sharing that video.  He also shared <a href="http://video.google.com/videoplay?docid=1541014406319673545&amp;q=ruby">Code Generation With Ruby with Jack Herrington</a>...Herrington's book <a href="http://www.amazon.com/Code-Generation-Action-Jack-Herrington/dp/1930110979">Code Generation in Action</a> has been on my wishlist ever since I read the sample chapters Manning let me download, so I'm really looking forward to the video.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>55</wp:post_id>
  <wp:post_date>2007-02-21 22:08:31</wp:post_date>
  <wp:post_date_gmt>2007-02-22 02:08:31</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>how-to-design-a-domain-specific-language-with-david-pollak</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="programming"><![CDATA[Programming]]></category>
  <category domain="category" nicename="software-thinking"><![CDATA[Software Thinking]]></category>
</item>
<item>
  <title>Functional Programming in JavaScript and Ruby</title>
  <link>http://invisibleblocks.com/2007/02/23/functional-programming-in-javascript-and-ruby/</link>
  <pubDate>Fri, 23 Feb 2007 13:40:59 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.wordpress.com/2007/02/23/functional-programming-in-javascript-and-ruby/</guid>
  <description/>
  <content:encoded><![CDATA[[<strong>UPDATE:</strong> I've been lucky enough to have some commenters who know much more about functional programming than I do. There's some good reading in the <a href="#comments">comments</a>, and you especially should read them before using this stuff in production.]

I've been playing with functional JavaScript tonight. It's not the greatest of OO-functional hybrid languages, but it's good to supplant my fledgling functional skills with something besides Ruby. Plus, I'm <a href="http://javascript.infogami.com/Functional_Javascript">not</a> the <a href="http://www.svendtofte.com/code/practical_functional_js/">only</a> <a href="http://www.b-list.org/weblog/2006/10/11/functional-language-s-right-under-your-nose">one</a> <a href="http://blog.360.yahoo.com/blog-Vdrx7eU3fqovesPu9Y8Y?p=24">doing</a> it, so I can compare notes. And who doesn't love JavaScript, right? ...right?

Before I get much farther, I should thank <a href="http://notes-on-haskell.blogspot.com">Adam Turoff</a> for his post <a href="http://notes-on-haskell.blogspot.com/2007/02/whats-wrong-with-for-loop.html">What's Wrong with the For Loop</a>. It gets at the root of the why we'd use a functional programming language instead of an OO or procedural one, and (bonus!) it helped me grok Ruby's <code>inject</code> method (it's the same as my new friend <code>fold</code>). Go read his post, it's good for you. And if you like it, we recommend the <a href="http://swiss.csail.mit.edu/classes/6.001/abelson-sussman-lectures/">1981 <span class="caps">SICP</span> lectures</a>. Robusto!
<h3>Here we go!</h3>
Introductions to functional programming usually discuss three methods: <code>map</code>, <code>find</code>, and <code>fold</code>. The names aren't always the same, but those are the three amigos of functional programming. They all do something different to arrays (or lists, or collections, or whatever you want to call them):

* <code>find</code> does what it says. You give it some criteria, it returns all the matching elements. The criteria is expressed as a function, a little bit of code that says "yes, I want this one," or "no, skip it." If we're picking out the red gumballs, you could say (in Ruby) <code>gumballs.find_all { |ball| ball.isRed? }</code> <code>find</code> is also known as <code>filter</code>. [Ruby only calls it <code>find_all</code> because it uses <code>find</code> for returning just the first match.] Po-tay-to, po-tah-to.
* <code>fold</code> takes each element, and "folds" it into a running total. Think of summation—you're folding each new number into a running tally. In Haskell (and, it seems, many functional languages), it comes in two varietes, <code>fold_left</code> and <code>fold_right</code>, which just mean "start from the left" and "start from the right". Ruby calls it <code>inject</code>, which confuses some people (like me).
* <code>map</code> is the mathiest of them (don't be scared, it's easy!). In English, we'd say "change each item like <em>this</em>, and give me the new results." Let's down-case a list of words. "Change each word to <em>lowercase</em>, and give me the downcased words." <code>words.map { |word| word.downcase }</code>. The name "map" comes from <a href="http://en.wikipedia.org/wiki/Function_%28math%29">functions in math</a> (surprise), where you map each input to one output. The whole <code>y = f(x)</code> thing…<code>f</code> is for "function". Ruby also calls this <code>collect</code>.

Now, none of these comes predefined in JavaScript. How can this be? Well, all the JavaScript engines out there are in browsers, and we know that "when browser elephants battle, it is the JavaScript grass that suffers." The browser developers are busy with other things. But this oversight means we have some easy examples to write. It's boring to re-implement existing stuff, just for the exercise. So here we go—I'll compare examples in JavaScript and Ruby.
<h3>A quick word about JavaScript's open classes</h3>
JavaScript has open classes, just like Ruby. In other words, you can re-open a class definition, give it a method, and then start using that method on instances of that class. JavaScript's OO is prototype-based, not class-based, so it looks a little weird:

[sourcecode lang="javascript"]
Array.prototype.first = function() {
    return this[0];
}
[1, 2, 3].first();  // 1

Array.prototype.rest = function() {
    return this.slice(1);
}
[1, 2, 3].rest();  // [2, 3]

Array.prototype.isEmpty = function() {
    return this.length == 0;
}
[].isEmpty();    // true
[1].isEmpty();   // false
[/sourcecode]

"For the prototypical Array, the Array from which all other Arrays spring forth, create a property called ‘first', which shall be this function, which returns the first element of the Array…" Just a Biblical way of defining a method for a class.

Open classes is good news, because it'll make our job of adding <code>map</code>, <code>find</code>, and <code>fold</code> possible, since they'll be going into the Array class.
<h3>Find</h3>
<code>find</code> is the easiest, so we'll start there. Let's take a look:
[sourcecode lang="javascript"]
Array.prototype.find = function(isAMatch) {
    var matches = [];
    for (i = 0; i &lt; this.length; i++) {
        if (isAMatch(this[i])) {
            matches.push(this[i]);
        }
    }
    return matches;
}
[/sourcecode]

<code>find</code> is a function, and it takes the function <code>isAMatch</code> as a parameter. One of the hallmarks of the functional programming style is that functions are first-class citizens in the language: they can be treated like any other variable, so they can be passed around as parameters, and returned from other functions. [<a href="http://en.wikipedia.org/wiki/Closure_%28computer_science%29">Closures</a> and <a href="http://en.wikipedia.org/wiki/Anonymous_function">anonymous functions</a> are also major features.] <code>isAMatch</code> is a function that tells you whether we should include any given element of the Array. Use <code>find</code> like this:

[sourcecode lang="javascript"]
var evens = [1, 2, 3, 4, 5].find(
    function(i) {
        return i % 2 == 0;
    }
);

function isOdd(i) {
    return i % 2 != 0;
}
var odds = [1, 2, 3, 4, 5].find(isOdd);
[/sourcecode]

The first example uses an in-line, anonymous function; the second uses a named function. Both work fine, but here is where we start to see JavaScript's awkward syntax get in the way. Consider the Ruby version:

[sourcecode lang="ruby"]
# find_all comes pre-defined in Array, via the Enumerable module,
# but this is what it would look like...
class Array
  def find_all
    matches = []
    self.each do |item|   # Ruby says 'self', not 'this'.
      if yield(item)      # yield says &quot;Call the block we were given&quot;
        matches.push(item)   # Stuff item into matches
      end
    end
    return matches
  end
end

evens = [1, 2, 3, 4, 5].find_all { |i|
  i % 2 == 0
}

def isOdd(i)
  i % 2 != 0
end

odds = [1, 2, 3, 4, 5].find_all { |i|
  isOdd(i)
}
[/sourcecode]

In Ruby, every expression returns a value, so <code>return</code> disappears. And Ruby's blocks mean we don't need to wrap our match condition inside <code>function(i) { ... }</code>. But Ruby's <code>find_all</code> won't take a reference to a method as a parameter:
[sourcecode lang="ruby"]
def isOdd(i)
    i % 2 != 0
end

odds = [1, 2, 3, 4, 5].find_all(isOdd)
# gives error: `isOdd': wrong number of arguments (0 for 1) (ArgumentError)
[/sourcecode]

Once you've defined a function in JavaScript, you can pass it around by name, like any other variable, but you need that <code>function(i) { ... }</code> syntax around your test. In Ruby, <code>find_all</code> takes a block instead of parameters, so you can't pass a reference. Given how nice blocks are in Ruby, I guess this can be forgiven, but it's a little weird.

<h3>Fold</h3>
Now we'll get into the recursive guys. <code>find</code> is a pain to implement recursively in JavaScript, so I did it iteratively, but recursion works well for <code>fold</code> and <code>map</code>. Since recursion seems to be more idiomatic in functional languages, we'll use it here.

I took two shots at <code>fold</code> in JavaScript (I'm learning). Here they are:

[sourcecode lang="javascript"]
Array.prototype.fold_recursive = function(combineFunc, base) {
    if (this.isEmpty()) {    // I added isEmpty, first, and rest, as above
        return base;
    }
    else {
        return combineFunc(
            this.first(),
            this.rest().fold_recursive(combineFunc, base));
    }
}

Array.prototype.fold_iterative = function(combineFunc, tally) {
    if (this.isEmpty()) {
        return tally;
    }
    else {
        return this.rest().fold_iterative(
            combineFunc,
            combineFunc(this.first(),
                        tally));
    }
}
[/sourcecode]

The first is straightforward recursion. If the list is empty, we're done, so return the base value (zero, if we're adding). Otherwise, combine the first value with whatever the rest of the items fold up to. [If you have trouble writing recursively, this is the canonical pattern you should probably follow: if done, do base case; else, do <em>this</em> element, then the <em>rest</em> of them.]

The second is a little different. You've got a starting <code>base</code>, the <code>tally</code> so far, and a <code>combineFunc</code> that folds each value into the <code>tally</code>. If the list is empty, we're done, so return the <code>tally</code>. Otherwise, fold the first item into the tally for the rest of the list.

It the first, you hang around, waiting for the answer to the rest of the problem, before you add in your part of the sum. In the second, you push your part of the sum down into the next round of processing, so you don't have to remember anything. When the answer comes back from the recursive call, it'll already have your part of the sum in it.

[The first one is a "linear recursive process", the second is "linear iterative process", even though both are recursive procedures. If your interest is piqued, check out <a href="http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-11.html#%_sec_1.2.1">this <span class="caps">SICP</span> page</a>, but it's not needed for this article. For the rest of this post, I'll be using the linear recursive version, because it's conceptually clearer. Thanks to mfp for keeping me honest.]

Here's how <code>fold</code> is used:

[sourcecode language="javascript"]
// A handy adding function
function add(a, b) {
    return a + b;
}

Array.prototype.sum_recursive = function() {
    return this.fold_recursive(add, 0);
}
[1, 2, 3].sum_recursive();  // 6
[/sourcecode]

To <code>sum</code> the elements of an array, we want to <code>fold</code> the numbers together by <code>add</code>-ing them, starting at 0. Easy, isn't it?

Here are two Ruby versions, based on <code>fold_recursive</code>...one that takes a function (called a "procedure object" in Ruby) as a parameter, one that takes a block:

[sourcecode language="ruby"]
class Array
  def rest     # We'll define rest, to keep the examples similar
    self[1..-1]
  end

  def fold_w_proc(combineFunc, base)
    if self.empty?
      base
    else
      # &quot;func.call(args)&quot; instead of JavaScript's &quot;func(args)&quot;
      combineFunc.call(
        self.first,
        self.rest.fold_w_proc(
          combineFunc,
          base)
        )
    end
  end
  
  def fold_w_block(base, &amp;combineFunc)
    if self.empty?
      base
    else
      combineFunc.call(
        self.first,
        self.rest.fold_w_block(
          base,
          &amp;combineFunc)
        )
      end
  end

  def sum_w_proc
    fold_w_proc(lambda { |a, b| a + b }, 0)
  end
  def sum_w_block
    fold_w_block(0) { |a, b| a + b }
  end
end

[1, 2, 3].sum_w_proc    # 6
[1, 2, 3].sum_w_block   # 6
[/sourcecode]

Notice how similar <code>fold_w_block</code> and <code>fold_w_proc</code> are to the JavaScript <code>fold_recursive</code>. The thing that differentiates <code>fold_w_block</code> and <code>fold_w_proc</code> is how they're used. The definitions themselves are nearly identical, except for the order of the parameters. Look at <code>sum_w_proc</code> and <code>sum_w_block</code>...<code>sum_w_block</code> is a bit clearer, isn't it? But if you use blocks, you lose the ability to pass a function reference as a parameter.

<h3>Map</h3>
<code>map</code> looks a lot like <code>fold</code>.

[sourcecode lang="javascript"]
Array.prototype.map = function(mapFunc) {
    if (this.isEmpty()) {
        return this;
    }
    else {
        return [mapFunc(this.first())].concat(
                this.rest().map(mapFunc));
    }
}

function cube(i) { return i * i * i; }

[1, 2, 3].map(function(i) { return i * i; });  // [1, 4, 9]
[1, 2, 3].map(cube);  // [1, 8, 18]
[/sourcecode]

Again, it's basic recursion…if we're out of items, return the empty list (ie, this). Otherwise, make an array of the first mapped item, and concatenate it with the rest of the mapped items. Again, with JavaScript, you can pass your function in-line, or by reference.

Here's a recursive definition of <code>map</code> in Ruby:

[sourcecode lang="ruby"]
class Array
  def map(&amp;mapFunc)
    if self.empty?
      self
    else
      [mapFunc.call(self.first)] + self.rest.map(&amp;mapFunc)
    end
  end
end

[1, 2, 3].map { |i| i * i }  # [1, 4, 9]
[/sourcecode]

As before, calling <code>map</code> with a block certainly looks nicer than by passing in functions, but you lose the ability to define a function somewhere, and pass it in by name, like we did with <code>cube</code> in JavaScript.

<h3>Wrap-up</h3>
If you want to explore functional programming, both JavaScript and Ruby are good candidates. They both have their goods and bads. Up to now, I've only used Ruby, but JavaScript certainly has its benefits, and exposure to both balances out my understanding.

I hope that, if you were curious about functional programming before, this was a helpful read. If you're a functional programmer, and I got something wrong, please let me know…I'm still learning. For instance, I now better understand how recursive processes differ from linear recursive processes.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>56</wp:post_id>
  <wp:post_date>2007-02-23 09:40:59</wp:post_date>
  <wp:post_date_gmt>2007-02-23 13:40:59</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>functional-programming-in-javascript-and-ruby</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="functional-programming"><![CDATA[Functional Programming]]></category>
  <category domain="post_tag" nicename="javascript"><![CDATA[JavaScript]]></category>
  <category domain="category" nicename="programming"><![CDATA[Programming]]></category>
  <category domain="post_tag" nicename="ruby"><![CDATA[Ruby]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[292320]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_f1bb5ede76267d8ee8e0c2f2ecf9ded1</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_2f85956669d954f547887eb9b20d1d2d</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>708</wp:comment_id>
    <wp:comment_author><![CDATA[justin]]></wp:comment_author>
    <wp:comment_author_email>juwiley+invisibleblocks@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>24.106.179.13</wp:comment_author_IP>
    <wp:comment_date>2007-03-02 10:24:33</wp:comment_date>
    <wp:comment_date_gmt>2007-03-02 14:24:33</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Nice article!  Some how this filled in a lot of the blanks I had about jscript and functional prototyping.  Thanks for the good work...]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2007-03-02 14:24:33</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>701</wp:comment_id>
    <wp:comment_author><![CDATA[Kirit]]></wp:comment_author>
    <wp:comment_author_email>kirit@kirit.com</wp:comment_author_email>
    <wp:comment_author_url>http://www.kirit.com/</wp:comment_author_url>
    <wp:comment_author_IP>124.121.159.1</wp:comment_author_IP>
    <wp:comment_date>2007-03-01 01:19:48</wp:comment_date>
    <wp:comment_date_gmt>2007-03-01 05:19:48</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Masklinn, I know this sounds like we're arguing, but I can't bring myself to believe that we actually have any real difference of opinion here. We may be looking out over the landscape of software development in different directions, but we're seeing the same features.

I think we both agree that there are all sorts of algorithms that are easier to find and to understand in recursive forms.

I think we also agree that it is better to write those recursive functions that are tail recursive so that they consume O(1) memory rather than O(n).

The only other thing I say in my article is that sometimes non-tail recursive functions are better off re-written because the heap is bigger than the stack and is less likely to be exhausted.

We're writing for different audiences so of course our emphasis is in different places, but I don't think we disagree anywhere.

I'm going to have a think about adding some notes to my article to clarify where the issues I raise are of concern primarily to people using non-functional languages in case it can be mis-read.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2007-03-01 05:19:48</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>694</wp:comment_id>
    <wp:comment_author><![CDATA[Masklinn]]></wp:comment_author>
    <wp:comment_author_email>masklinn@masklinn.net</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>62.210.111.2090 72.23</wp:comment_author_IP>
    <wp:comment_date>2007-02-27 05:06:16</wp:comment_date>
    <wp:comment_date_gmt>2007-02-27 09:06:16</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[&gt; In languages like Scheme (which I specifically mention) writing tail recursive functions is really writing a loop anyway because you know the language is going to convert it for you.

I don't think it's "really like writing a loop anyway", it's the same to the machine, but you sure think recursively, not iteratively, even if the code is executed iteratively.

Plus I didn't limit my scope to iterative structures: while tail-recursive implementations clearly are the best, functional languages often have very powerful and efficient recursion abilities even on non tail-recursive functions. And they still don't have any iterative structures.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2007-02-27 09:06:16</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>686</wp:comment_id>
    <wp:comment_author><![CDATA[Masklinn]]></wp:comment_author>
    <wp:comment_author_email>masklinn@masklinn.net</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>62.210.111.2090 72.23</wp:comment_author_IP>
    <wp:comment_date>2007-02-26 05:50:44</wp:comment_date>
    <wp:comment_date_gmt>2007-02-26 09:50:44</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[&gt; I also used Javascript for an analysis of recursion. I did some timings of the various approaches you may be interested in taking a look at.
&gt;
&gt; http://www.kirit.com/Recursive%20rights%20and%20wrongs

Kirit, the issue I have with your post is that the second category is far too closed: you consider that recursion is bad period, while the issue really is that most popular langages suck at recursion (e.g. in languages such as Erlang or Scheme recursion is not only a powerful tool but one that's used often) (the fact that these languages usually lack iterative structures helps, too)]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2007-02-26 09:50:44</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>685</wp:comment_id>
    <wp:comment_author><![CDATA[Masklinn]]></wp:comment_author>
    <wp:comment_author_email>masklinn@masklinn.net</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>62.210.111.2090 72.23</wp:comment_author_IP>
    <wp:comment_date>2007-02-26 05:47:00</wp:comment_date>
    <wp:comment_date_gmt>2007-02-26 09:47:00</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[&gt; My thinking is that if more programmers are used to them, their thought patterns will shift a bit, maybe rise to a higher level of abstraction. Which would be good for everyone.

I do agree with that, even though nothing beats using actually functional languages to understand what Higher Order Functions are about (and have a hard time coding in Java after that)

&gt; As far as map and filter in JS 1.6, I'd heard bits about that, and my excitement was tempered by the suspicion that IE 7 wouldn't include them. Turns out I was right…

'course you are, I don't think Opera and Safari implement JS 1.6 either. As a matter of fact, I'm pretty sure only Mozilla browsers implement them, for the moment at least.

&gt; JavaScript 1.5 includes these methods already

No, that's in Javascript 1.6, the confusion comes from the fact that the first implementation of JS 1.6 is Firefox 1.5 (and Firefox 2.0 is the first restricted implementation of JS 1.7)

&gt; It seems you have gotten some terminology mixed up. You've written that fold_recursive (foldr) generates a "recursive process" and fold_linear (foldl) a "linear recursive process"

I think he meant that foldr was a recursive process executed in constant memory (which is true in a strict-evaluating tail-optimizing language, which javascript isn't). His terminology is debatable, but that's the feeling I got

&gt; The basic outcome is that Javascript is absolutely terrible for recursion [...] at least in Microsoft's implementation.

You'll find that the other implementations fare no better. Maybe we'll see a better support for recursion with the first JIT implementations (e.g. Adobe's Tamarin http://www.mozilla.org/projects/tamarin/), but for the moment JS is one of those language which make you want to use FP, but forces you to be very careful about it.

gt; My point was to show that Ruby doesn't let you pass the method name like a regular parameter like JavaScript

Yes, but that's because just writing the name of the message in Ruby means that you're sending the message to the objet (foo.bar is exactly the same as foo.send(:bar)) while in javascript the semantic is that of a "method call": writing the method name (foo.bar) is not enough, you have to call it (foo.bar()) for it to be executed.

&gt; How does it work?

Taken straight from `ri Object#method`:

Object#method
     obj.method(sym)    =&gt; method
------------------------------------------------------------------------
     Looks up the named method as a receiver in _obj_, returning a
     +Method+ object (or raising +NameError+). The +Method+ object acts
     as a closure in _obj_'s object instance, so instance variables and
     the value of +self+ remain available.

        class Demo
          def initialize(n)
            @iv = n
          end
          def hello()
            "Hello, @iv = #{@iv}"
          end
        end

        k = Demo.new(99)
        m = k.method(:hello)
        m.call   #=&gt; "Hello, @iv = 99"

        l = Demo.new('Fred')
        m = l.method("hello")
        m.call   #=&gt; "Hello, @iv = Fred"

&gt; Does it return a method pointer?

It returns a Method object (http://www.ruby-doc.org/core/classes/Method.html) without calling it, while just using "foo.bar" calls the method object outright.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2007-02-26 09:47:00</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>678</wp:comment_id>
    <wp:comment_author><![CDATA[Trenton Miller]]></wp:comment_author>
    <wp:comment_author_email>trentom@mailinator.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>84.163.217.15</wp:comment_author_IP>
    <wp:comment_date>2007-02-24 11:32:28</wp:comment_date>
    <wp:comment_date_gmt>2007-02-24 15:32:28</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Just for the record:

foldr and foldl in Ruby
http://snippets.dzone.com/posts/show/3259]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2007-02-24 15:32:28</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>680</wp:comment_id>
    <wp:comment_author><![CDATA[Dan Bernier]]></wp:comment_author>
    <wp:comment_author_email>danbernier@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://invisibleblocks.wordpress.com/</wp:comment_author_url>
    <wp:comment_author_IP>64.252.171.13</wp:comment_author_IP>
    <wp:comment_date>2007-02-24 15:00:38</wp:comment_date>
    <wp:comment_date_gmt>2007-02-24 19:00:38</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Nathan,
&gt; Given isOdd as defined above, you can pass that method directly without the block.

My point was to show that Ruby doesn't let you pass the method name like a regular parameter like JavaScript does, and I think your examples bear that point out...though I didn't know about &amp;method(:sym).  How does it work?  Does it return a method pointer?  I don't have my pickaxe handy...I'll have to read up.

mfp, allow me some time to consider your comment.  I was -pretty- sure I had my linear recursive and recursive straight, but I've been wrong before.  Like I said, I'm still learning.

Kirit,
&gt; Personally I think Javascript is a great language to do this sort of experimenting on because nearly everybody has several pretty good implementations on their computer.

My thoughts exactly.  When I started the coding for this post, I was on lunch break from an ASP.Net class, so rather than install Ruby on the machine, I used the ubiquitous JavaScript.  I scanned your "Recursive rights and wrongs", I'll give it a more thorough read soon.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>292320</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2007-02-24 19:00:38</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>675</wp:comment_id>
    <wp:comment_author><![CDATA[Kirit]]></wp:comment_author>
    <wp:comment_author_email>kirit@kirit.com</wp:comment_author_email>
    <wp:comment_author_url>http://www.kirit.com/</wp:comment_author_url>
    <wp:comment_author_IP>124.121.159.4</wp:comment_author_IP>
    <wp:comment_date>2007-02-24 07:38:49</wp:comment_date>
    <wp:comment_date_gmt>2007-02-24 11:38:49</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I also used Javascript for an analysis of recursion. I did some timings of the various approaches you may be interested in taking a look at.

http://www.kirit.com/Recursive%20rights%20and%20wrongs

The basic outcome is that Javascript is absolutely terrible for recursion probably due to a very high function call overhead (which given that it must do a load of runtime analysis to support closures probably shouldn't be all that surprising), at least in Microsoft's implementation.

Doing this sort of thing in C++ is interesting because the functor objects passed into things like std::transform (the C++ name for 'map') can store state. Clearly breaks the 'no side effect' rule, but can be used for some interesting effects.

Personally I think Javascript is a great language to do this sort of experimenting on because nearly everybody has several pretty good implementations on their computer.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2007-02-24 11:38:49</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>689</wp:comment_id>
    <wp:comment_author><![CDATA[Kirit]]></wp:comment_author>
    <wp:comment_author_email>kirit@kirit.com</wp:comment_author_email>
    <wp:comment_author_url>http://www.kirit.com/</wp:comment_author_url>
    <wp:comment_author_IP>124.121.159.2</wp:comment_author_IP>
    <wp:comment_date>2007-02-26 21:31:49</wp:comment_date>
    <wp:comment_date_gmt>2007-02-27 01:31:49</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[&gt;Kirit, the issue I have with your post is that the second category is far too closed: you consider that recursion is bad period

Is that really what I said? That certainly wasn't the intent. It is certainly a tool I use often, but I'm ultimately careful with it because it can be a source of problems.

Here is my summary:

&gt;Recursion is a very powerful tool and it often enables us to spot algorithms that we wouldn't otherwise see. We should however be very careful of using it in production software, especially where the parameters for the recursion ultimately derive from user input, or any other non-trusted source.

In languages like Scheme (which I specifically mention) writing tail recursive functions is really writing a loop anyway because you know the language is going to convert it for you.

The reason for writing the subject up in that was because I hadn't seen anybody point to the obvious problems involved in exhausting the stack with recursive functions.

Despite much hiding of heads in sand about the issue it is still an important consideration whenever recursion is used. That isn't the same as saying don't use it though.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2007-02-27 01:31:49</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>711</wp:comment_id>
    <wp:comment_author><![CDATA[Daniel Bernier]]></wp:comment_author>
    <wp:comment_author_email>danbernier@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://invisibleblocks.wordpress.com/</wp:comment_author_url>
    <wp:comment_author_IP>64.252.168.19</wp:comment_author_IP>
    <wp:comment_date>2007-03-02 20:17:39</wp:comment_date>
    <wp:comment_date_gmt>2007-03-03 00:17:39</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[mfp,

I finally re-read the SICP page more carefully, and you're right.  Thanks for the catch.  I updated the post, to avoid confusion.

I also found <a href="http://en.wikipedia.org/wiki/Fold_(higher-order_function)" rel="nofollow">this Wikipedia article about foldr and foldl</a>, which helped me understand things.

Thanks...]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>292320</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2007-03-03 00:17:39</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>670</wp:comment_id>
    <wp:comment_author><![CDATA[Masklinn]]></wp:comment_author>
    <wp:comment_author_email>masklinn@masklinn.net</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>62.210.111.209</wp:comment_author_IP>
    <wp:comment_date>2007-02-23 15:24:36</wp:comment_date>
    <wp:comment_date_gmt>2007-02-23 19:24:36</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[On the subject of `fold` and `map`: you should not implement them recursively in Javascript. They're usually implemented recursively in FP languages because:

* They work on (linked)lists/conses, which are inherently recursive structures. Javascript doesn't have conses, only arrays. The slicings, array concatenations and single-element array creations of the recursive implementations generate _a lot_ of garbage and straing the JS interpreters.

* FP languages all implement tail-recursion optimization, and even when the functions aren't tail-recursive they're usually quite efficient at recursion. Javascript doesn't implement tail-recursion optimization (which makes your tail-recursive fold -- "fold-linear" -- completely useless even though it would work in e.g. Scheme or SML) and is overall fairly bad at recursion (not as bad as PHP or VB, but still plenty bad).

So you should probably implement them iteratively, it's not that hard (and both are actually much shorter, unless you want to implement both `foldl` and `foldl1` as a single function in which case you get an ugly conditional.

Likewise for Ruby by the way, don't overuse recursion when you don't have to.

On a side note, since map and filter (and some other functions) have been implemented natively in Firefox 1.5+ as part of JS 1.6 (http://developer.mozilla.org/en/docs/New_in_JavaScript_1.6#Array_extras), I'd strongly suggest using the same names in your implementation, and testing if the methods exist beforehand so that you don't overwrite them when they're already available. I'm noting that they didn't implement folds though. Shucks]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2007-02-23 19:24:36</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>671</wp:comment_id>
    <wp:comment_author><![CDATA[Dan Bernier]]></wp:comment_author>
    <wp:comment_author_email>danbernier@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://invisibleblocks.wordpress.com/</wp:comment_author_url>
    <wp:comment_author_IP>69.37.74.248</wp:comment_author_IP>
    <wp:comment_date>2007-02-23 18:07:30</wp:comment_date>
    <wp:comment_date_gmt>2007-02-23 22:07:30</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Masklinn,

Good points.  I implemented map, fold, and find to test out my understanding of functional programming concepts, and the bits of SICP I've been reading -- not for serious usage.  I did write them all iteratively at first, and they were shorter, but still very imperative...I wanted to stretch out a bit.  I guess I should've made that clearer.

Still, implementing them iteratively is probably a good thing, especially if, like you said, we check first for their existence before clobbering a native implementation with our own attempt.  My thinking is that if more programmers are used to them, their thought patterns will shift a bit, maybe rise to a higher level of abstraction.  Which would be good for everyone.

As far as map and filter in JS 1.6, I'd heard bits about that, and my excitement was tempered by the suspicion that IE 7 wouldn't include them.  Turns out I was right...


```javascript
var a = [1, 2, 3, 4, 5];

if (![].map) {   // IE 7
    Array.prototype.map = function(mapFunc) {
        alert("custom map implementation!");
        var mapped = [];
        for (var i = 0; i &lt; this.length; i++) {
            mapped.push(mapFunc(this[i]));
        }
        return mapped;
    }
}
if (![].filter) {   // IE 7
    Array.prototype.filter = function(filterFunc) {
        alert("custom filter implementation!");
        var matches = [];
        for (var i = 0; i &lt; this.length; i++) {
            if (filterFunc(this[i])) {
                matches.push(this[i]);
            }
        }
        return matches;
    }
}
if (![].fold) {   // IE 7 and FFox 1.5 (I should upgrade...)
    Array.prototype.fold = function(base, foldFunc) {
        alert("custom fold implementation!");
        var folded = base;
        for (var i = 0; i &lt; this.length; i++) {
            folded = foldFunc(folded, this[i]);
        }
        return folded;
    }
}

var squares = a.map(function(i) { return i * i; });
alert(squares);

var evens = a.filter(function(i) { return i % 2 == 0; });
alert(evens);

var sum = a.fold(0, function(tally, i) { return tally + i; });
alert(sum);
```


Thanks for your comments...]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>292320</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2007-02-23 22:07:30</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>672</wp:comment_id>
    <wp:comment_author><![CDATA[Nathan]]></wp:comment_author>
    <wp:comment_author_email>nathan@acceleration.net</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>216.155.97.1</wp:comment_author_IP>
    <wp:comment_date>2007-02-23 18:36:43</wp:comment_date>
    <wp:comment_date_gmt>2007-02-23 22:36:43</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Given isOdd as defined above, you can pass that method directly without the block, I don't know that it is any easier.

[1,2,3,4].find_all &amp;method(:isOdd)
=&gt; [1, 3]

[1,2,3,4].find_all {|i| isOdd(i)}

is one character less.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2007-02-23 22:36:43</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>673</wp:comment_id>
    <wp:comment_author><![CDATA[Victor]]></wp:comment_author>
    <wp:comment_author_email>vwallen@antlab.net</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>75.83.119.171</wp:comment_author_IP>
    <wp:comment_date>2007-02-23 21:20:36</wp:comment_date>
    <wp:comment_date_gmt>2007-02-24 01:20:36</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[JavaScript 1.5 includes these methods already (from the FF site):

map()
Creates a new array with the results of calling a provided function on every element in this array. 

filter()
Creates a new array with all of the elements of this array for which the provided filtering function returns true. 

forEach()
Calls a function for each element in the array. 

every()
Returns true if every element in this array satisfies the provided testing function. 

some()
Returns true if at least one element in this array satisfies the provided testing function. 

--

There is no existing fold() in javascript, as far as I know. The same function is also referred to as "reduce" in some languages.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2007-02-24 01:20:36</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>674</wp:comment_id>
    <wp:comment_author><![CDATA[mfp]]></wp:comment_author>
    <wp:comment_author_email>mfp@acm.org</wp:comment_author_email>
    <wp:comment_author_url>http://eigenclass.org</wp:comment_author_url>
    <wp:comment_author_IP>83.59.12.241</wp:comment_author_IP>
    <wp:comment_date>2007-02-24 07:16:59</wp:comment_date>
    <wp:comment_date_gmt>2007-02-24 11:16:59</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[It seems you have gotten some terminology mixed up. You've written that fold_recursive (foldr) generates a "recursive process" and fold_linear (foldl) a "linear recursive process", but If I'm reading the SICP page correctly, foldr generates a linear recursive process and foldl a linear *iterative* process (i.e. the function is tail-recursive).
(Also, note that you aren't using the "base" argument in fold_linear). 

"Look at sum_w_proc and sum_w_block…sum_w_block is a bit clearer, isn't it? But if you use blocks, you lose the ability to pass a function reference as a parameter." &gt;

Well, does this count?

[1, 2, 3].fold_w_block(0, &amp;lambda{|a,b| a+b})    # =&gt; 6

(Another small braino: you say that fold_w_block and fold_w_proc are based on fold_linear, but they're actually foldr...)]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2007-02-24 11:16:59</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>7514</wp:comment_id>
    <wp:comment_author><![CDATA[Jordan Callicoat]]></wp:comment_author>
    <wp:comment_author_email>MonkeeSage@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>64.234.1.144</wp:comment_author_IP>
    <wp:comment_date>2007-10-19 10:56:39</wp:comment_date>
    <wp:comment_date_gmt>2007-10-19 14:56:39</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I.e., you can pass a method to a proc-taking method using the #to_proc method of Methods and Symbols. For example, given a foldl and foldr...


<code>
class Array
  def foldr(base, &amp;cat)
    if self.empty?
      base
    else
      cat.call(self.first, self[1..-1].foldr(base, &amp;cat))
    end
  end
  def foldl(base, &amp;cat)
    if self.empty?
      base
    else
      self[1..-1].foldl(cat.call(base, self.first), &amp;cat)
    end
  end
end
</code>


...they can be called like...


<code>
a.foldl(0, &amp;:-.to_proc())
a.foldr(0, &amp;:-.to_proc())
a.foldr(0, &amp;lambda { |x, y| x - y }.to_proc())
</code>
]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2007-10-19 14:56:39</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>7486</wp:comment_id>
    <wp:comment_author><![CDATA[Jordan Callicoat]]></wp:comment_author>
    <wp:comment_author_email>MonkeeSage@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>64.234.1.144</wp:comment_author_IP>
    <wp:comment_date>2007-10-18 16:17:49</wp:comment_date>
    <wp:comment_date_gmt>2007-10-18 20:17:49</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[You can pass around blocks in ruby as well, given that you define them as Proc objects:

<code>def a (b, &amp;block)
  if block
    block.call()
  end
end
a("foo", &amp;Proc.new { puts "blah" })</code>]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2007-10-18 20:17:49</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>7487</wp:comment_id>
    <wp:comment_author><![CDATA[Jordan Callicoat]]></wp:comment_author>
    <wp:comment_author_email>MonkeeSage@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>64.234.1.144</wp:comment_author_IP>
    <wp:comment_date>2007-10-18 16:19:23</wp:comment_date>
    <wp:comment_date_gmt>2007-10-18 20:19:23</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[same as ...
a("foo") { puts "blah" }]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2007-10-18 20:19:23</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>8943</wp:comment_id>
    <wp:comment_author><![CDATA[remcoder]]></wp:comment_author>
    <wp:comment_author_email>remcoder@geeknet.nl</wp:comment_author_email>
    <wp:comment_author_url>http://remcoder.wordpress.com/</wp:comment_author_url>
    <wp:comment_author_IP>82.95.189.116</wp:comment_author_IP>
    <wp:comment_date>2007-12-19 14:47:29</wp:comment_date>
    <wp:comment_date_gmt>2007-12-19 18:47:29</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[another reason not to implement these functions recursively is the <a href="http://novemberborn.net/javascript/callstack-size" rel="nofollow">limited stack size in browsers</a>, especially Safari.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>281910</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2007-12-19 18:47:29</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9655</wp:comment_id>
    <wp:comment_author><![CDATA[p1999]]></wp:comment_author>
    <wp:comment_author_email>p199999991@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://lwz.110mb.com</wp:comment_author_url>
    <wp:comment_author_IP>219.74.106.226</wp:comment_author_IP>
    <wp:comment_date>2009-08-02 22:22:25</wp:comment_date>
    <wp:comment_date_gmt>2009-08-03 02:22:25</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Sorry for the last comment... it's the first function that is fold_right, and the second function is supposed to do a fold_left, but doesn't do it correctly. I think the it should be combineFunc(tally, this.first()) in the recursive call.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2009-08-03 02:22:25</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9645</wp:comment_id>
    <wp:comment_author><![CDATA[p1999]]></wp:comment_author>
    <wp:comment_author_email>p199999991@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://lwz.110mb.com</wp:comment_author_url>
    <wp:comment_author_IP>219.74.106.134</wp:comment_author_IP>
    <wp:comment_date>2009-07-19 05:25:07</wp:comment_date>
    <wp:comment_date_gmt>2009-07-19 09:25:07</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I think the second "iterative" fold function is a fold_right function and it's different from the first. Also, in my opinion, the second function looks almost like a for-loop so you might just as well do so (a fold_left though):

Array.prototype.fold_iterative = function(combineFunc,t) {
    var a;
    for(a=0;a&lt;this.length;a++) {
        t=combineFunc(t,this[a]);
    }
    return t;
}]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2009-07-19 09:25:07</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Ruby's other ternary operator</title>
  <link>http://invisibleblocks.com/2007/06/11/rubys-other-ternary-operator/</link>
  <pubDate>Tue, 12 Jun 2007 03:02:27 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.wordpress.com/2007/06/11/rubys-other-ternary-operator/</guid>
  <description/>
  <content:encoded><![CDATA[This may be a well-know Ruby trick, but I thought I'd share it anyway.

Ruby has the ternary operator:

[sourcecode language="ruby"]
a = true  ? 'a' : 'b' #=&gt; &quot;a&quot;
b = false ? 'a' : 'b' #=&gt; &quot;b&quot;[/sourcecode]


But it also has something else...

[sourcecode language="ruby"]
a = (true  &amp;&amp; 'a') || b #=&gt; &quot;a&quot;
b = (false &amp;&amp; 'a') || b #=&gt; &quot;b&quot;[/sourcecode]

All statements in Ruby return the value of the last expression evaluated, so <code>true &amp;&amp; 'a'</code> returns 'a', and the 'b' is ignored (via boolean short-circuiting).  <code>false &amp;&amp; 'a'</code> evaluates to <code>false</code>, so Ruby moves on, and returns 'b'.

<p>&nbsp;</p>

This is a lot like the <code>a ||= 'a'</code> trick, which expands to <code>a = a || 'a'</code>, giving the variable a default value, if it's not already initialized.

If Ruby already has the ternary operator, why bother?  Personally, I find this form more natural (which surprised me, after years of using the ternary operator in Java and C#).  For some reason, it reads more like natural language to me.

[sourcecode language="ruby"]
user_name = (user.authenticated? &amp;&amp; user.name) || 'guest'[/sourcecode]


Does anyone else see it?

<p>&nbsp;</p>

]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>57</wp:post_id>
  <wp:post_date>2007-06-11 23:02:27</wp:post_date>
  <wp:post_date_gmt>2007-06-12 03:02:27</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>rubys-other-ternary-operator</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="ruby"><![CDATA[Ruby]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[292320]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_e5adb21a073c682cb52c6cbfacb7f621</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>3525</wp:comment_id>
    <wp:comment_author><![CDATA[Simen]]></wp:comment_author>
    <wp:comment_author_email>dupe-2-toalett@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://metametamorfosen.wordpress.com/</wp:comment_author_url>
    <wp:comment_author_IP>88.88.140.99</wp:comment_author_IP>
    <wp:comment_date>2007-06-12 07:04:04</wp:comment_date>
    <wp:comment_date_gmt>2007-06-12 11:04:04</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[You don't need the parantheses around your third and fourth lines. It works anyway:

<code>irb(main):001:0&gt; a = true ? "a" : "b"
=&gt; "a"
irb(main):002:0&gt; b = false ? "a" : "b"
=&gt; "b"
irb(main):003:0&gt; a = true &amp;&amp; "a" || b
=&gt; "a"
irb(main):004:0&gt; b = false &amp;&amp; "a" || b
=&gt; "b"
</code>

However, if you change &amp;&amp; to "and", you start running into dark corners of operator precedence:

<code>irb(main):001:0&gt; a = true ? "a" : "b"
=&gt; "a"
irb(main):002:0&gt; b = false ? "a" : "b"
=&gt; "b"
irb(main):003:0&gt; a = true and "a" || b
=&gt; "a"
irb(main):004:0&gt; b = false and "a" || b
=&gt; false
</code>

And why do you put "var" before user_name? Ruby isn't javascript.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>654953</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2007-06-12 11:04:04</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>3566</wp:comment_id>
    <wp:comment_author><![CDATA[raichu]]></wp:comment_author>
    <wp:comment_author_email>raichu@raichu.raichu</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>124.217.27.4</wp:comment_author_IP>
    <wp:comment_date>2007-06-14 07:35:09</wp:comment_date>
    <wp:comment_date_gmt>2007-06-14 11:35:09</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[i think that's how python programmers tried to get the convenience of the ternary operator into their programming language before they got their chainable syntax in version 2.5.  back then, their version also failed when the variable wasn't "truthy-worthy".]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2007-06-14 11:35:09</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>3524</wp:comment_id>
    <wp:comment_author><![CDATA[Reg Braithwaite]]></wp:comment_author>
    <wp:comment_author_email>raganwald+tickle@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://weblog.raganwald.com/</wp:comment_author_url>
    <wp:comment_author_IP>70.49.222.20</wp:comment_author_IP>
    <wp:comment_date>2007-06-12 06:52:47</wp:comment_date>
    <wp:comment_date_gmt>2007-06-12 10:52:47</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[This is a well known Ruby trick, but it is not exactly the same thing as the ternary operator. Let's compare:

a ? b : c

and

(a &amp;&amp; b) || c

The former gives b whenever a is truthy and c otherwise, always. So if a == true, b == nil, and c == 'cee-threepio', (a ? b : c) =&gt; nil.

But (a &amp;&amp; b) || c =&gt; 'cee-threepio' for the same values.

I prefer this form as well, but only when I know that the value of 'b' is guaranteed to be truthy.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2007-06-12 10:52:47</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>3527</wp:comment_id>
    <wp:comment_author><![CDATA[Daniel Bernier]]></wp:comment_author>
    <wp:comment_author_email>danbernier@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://invisibleblocks.wordpress.com/</wp:comment_author_url>
    <wp:comment_author_IP>12.178.84.66</wp:comment_author_IP>
    <wp:comment_date>2007-06-12 07:59:38</wp:comment_date>
    <wp:comment_date_gmt>2007-06-12 11:59:38</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Reg, you're right, I didn't think of that.  I'll have to scan through the areas I've used this, and see whether that could happen...

Simen,
&gt; You don't need the parantheses around your third and fourth lines.

Yeah, I included them to emphasize the grouping, for clarity.

&gt; And why do you put "var" before user_name? Ruby isn't javascript.

You're right...I think that 'var' snuck in from the javascript I've been doing, and the Scala I've been reading about.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>292320</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2007-06-12 11:59:38</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9338</wp:comment_id>
    <wp:comment_author><![CDATA[she]]></wp:comment_author>
    <wp:comment_author_email>she@hot.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>80.108.103.172</wp:comment_author_IP>
    <wp:comment_date>2008-03-12 05:47:37</wp:comment_date>
    <wp:comment_date_gmt>2008-03-12 09:47:37</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[actually i think this is rather ugly

and ternay operator is ugly too but at least used often enough to know it
and sometimes it reduces a few lines of code]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2008-03-12 09:47:37</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9519</wp:comment_id>
    <wp:comment_author><![CDATA[shawn]]></wp:comment_author>
    <wp:comment_author_email>instigatorirc@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>75.165.67.20</wp:comment_author_IP>
    <wp:comment_date>2008-09-26 23:30:02</wp:comment_date>
    <wp:comment_date_gmt>2008-09-27 03:30:02</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[you cant do this if the action  you want done is a binary opertor, ie only test if a test operator was given:
(action ? params[:action] == action : true)]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2008-09-27 03:30:02</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9782</wp:comment_id>
    <wp:comment_author><![CDATA[Ruby Ternary Operations &laquo; OmegaDelta]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://omegadelta.net/2010/12/17/ruby-ternary-operations/</wp:comment_author_url>
    <wp:comment_author_IP>72.52.192.179</wp:comment_author_IP>
    <wp:comment_date>2010-12-17 00:46:17</wp:comment_date>
    <wp:comment_date_gmt>2010-12-17 04:46:17</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[...] Ruby's other Ternary Operator [...]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1292561177</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1292561177.4663";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2010-12-17 04:46:17</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9711</wp:comment_id>
    <wp:comment_author><![CDATA[Daniel Bernier]]></wp:comment_author>
    <wp:comment_author_email>danbernier@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://invisibleblocks.wordpress.com/</wp:comment_author_url>
    <wp:comment_author_IP>69.0.54.152</wp:comment_author_IP>
    <wp:comment_date>2010-03-22 13:06:24</wp:comment_date>
    <wp:comment_date_gmt>2010-03-22 17:06:24</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Colin, thanks for clarifying.  So, when x has a value, it's basically a no-op?

Funny, it expands to almost the opposite this JavaScript idiom:

```javascript
function foo(x) {
    x = x || "default";
}
```
]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>292320</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2010-03-22 17:06:24</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9710</wp:comment_id>
    <wp:comment_author><![CDATA[Colin Bartlett]]></wp:comment_author>
    <wp:comment_author_email>colinb2r@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>91.143.176.44</wp:comment_author_IP>
    <wp:comment_date>2010-03-22 11:22:11</wp:comment_date>
    <wp:comment_date_gmt>2010-03-22 15:22:11</wp:comment_date_gmt>
    <wp:comment_content><![CDATA["This is a lot like the a ||= 'a' trick,
 which expands to a = a || 'a', 
 giving the variable a default value,
 if it's not already initialized."

Not precisely correct - using (unnecessary) brackets to make things clear:
  whereas operators like  x += y  expand to  x = (x + y)
  the operator  x ||= y  expands to  x || (x = y)
  and the operator  x &amp;&amp;= y  expands to  x &amp;&amp; (x = y)

Rick De Natale has a good post on this here:
http://talklikeaduck.denhaven2.com/2008/04/26/x-y-redux]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2010-03-22 15:22:11</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9702</wp:comment_id>
    <wp:comment_author><![CDATA[Programmer]]></wp:comment_author>
    <wp:comment_author_email>me@programmer.com</wp:comment_author_email>
    <wp:comment_author_url>http://programmer.com</wp:comment_author_url>
    <wp:comment_author_IP>206.230.66.42</wp:comment_author_IP>
    <wp:comment_date>2010-01-05 12:31:15</wp:comment_date>
    <wp:comment_date_gmt>2010-01-05 16:31:15</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Do you honestly think your expression is more readable than the ternary operator which is in use in many other languages?  The point is to write re-usable code that can be read and understood clearly, not to make things harder to read because you want to show you are smarter.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2010-01-05 16:31:15</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9628</wp:comment_id>
    <wp:comment_author><![CDATA[Otto]]></wp:comment_author>
    <wp:comment_author_email>ottoptr@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>200.254.153.38</wp:comment_author_IP>
    <wp:comment_date>2009-06-23 21:47:04</wp:comment_date>
    <wp:comment_date_gmt>2009-06-24 01:47:04</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I think the ternary operator sucks. Ok, it's fairly easy to understand a, b and c, but when that involves more complex expressions, it's a pain. And there are those who like to put a ternary operator inside another operator...]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2009-06-24 01:47:04</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9836</wp:comment_id>
    <wp:comment_author><![CDATA[wyderp]]></wp:comment_author>
    <wp:comment_author_email>bill.dwyer@associates.dhs.gov</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>216.81.81.83</wp:comment_author_IP>
    <wp:comment_date>2011-10-27 07:52:54</wp:comment_date>
    <wp:comment_date_gmt>2011-10-27 11:52:54</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[these discussions should also include performance considerations. if you're like me and work on back end in a production environment you often have to use code that isn't pretty or easy to maintain but runs fast.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1319716374</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1319716374.4865";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2011-10-27 11:52:54</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>10054</wp:comment_id>
    <wp:comment_author><![CDATA[Alfredo Amatriain]]></wp:comment_author>
    <wp:comment_author_email>geralt@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>188.86.15.76</wp:comment_author_IP>
    <wp:comment_date>2012-11-07 14:09:01</wp:comment_date>
    <wp:comment_date_gmt>2012-11-07 18:09:01</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I confess I'm not too proficient with Ruby, but isn't your ternary example wrong? I think you're missing a couple "=" and they should be written like this:

a == true  ? 'a' : 'b' #=&gt; "a"
b == false ? 'a' : 'b' #=&gt; "b"

Of course I fully expect to be told why I'm wrong and how much I still have to learn :)]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1352311742</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";d:1352311742.9123399257659912109375;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:9:"amatriain";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2012-11-07 18:09:01</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>10061</wp:comment_id>
    <wp:comment_author><![CDATA[Programmer]]></wp:comment_author>
    <wp:comment_author_email>asucis2001@yahoo.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>155.188.183.23</wp:comment_author_IP>
    <wp:comment_date>2012-11-13 14:44:35</wp:comment_date>
    <wp:comment_date_gmt>2012-11-13 18:44:35</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[So, what is the code that runs the fastest?  How was this tested out?]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>9836</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1352832275</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";d:1352832275.87436199188232421875;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2012-11-13 18:44:35</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>10062</wp:comment_id>
    <wp:comment_author><![CDATA[Daniel Bernier]]></wp:comment_author>
    <wp:comment_author_email>danbernier@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://invisibleblocks.wordpress.com/</wp:comment_author_url>
    <wp:comment_author_IP>69.0.91.145</wp:comment_author_IP>
    <wp:comment_date>2012-11-13 14:48:38</wp:comment_date>
    <wp:comment_date_gmt>2012-11-13 18:48:38</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I don't know which is faster, but I doubt it's an order-of-magnitude difference. This was an article about language expressivity, not performance, so I didn't worry about it.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>10061</wp:comment_parent>
    <wp:comment_user_id>292320</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1352832519</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";d:1352832519.66977405548095703125;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:11:"bonsaigiant";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2012-11-13 18:48:38</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>10055</wp:comment_id>
    <wp:comment_author><![CDATA[Daniel Bernier]]></wp:comment_author>
    <wp:comment_author_email>danbernier@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://invisibleblocks.wordpress.com/</wp:comment_author_url>
    <wp:comment_author_IP>69.0.91.145</wp:comment_author_IP>
    <wp:comment_date>2012-11-07 14:14:59</wp:comment_date>
    <wp:comment_date_gmt>2012-11-07 18:14:59</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[No, I meant to use assignment (=), not equality testing (==). The effect I was after was to set a to "a", and b to "b".

Here are some parentheses to clarify:
a = (true ? 'a' : 'b')  #=&gt; "a"
b = (false ? 'a' : 'b')  #=&gt; "b"

Does that help?]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>292320</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1352312099</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";d:1352312100.0876810550689697265625;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:11:"bonsaigiant";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2012-11-07 18:14:59</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>10056</wp:comment_id>
    <wp:comment_author><![CDATA[Daniel Bernier]]></wp:comment_author>
    <wp:comment_author_email>danbernier@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://invisibleblocks.wordpress.com/</wp:comment_author_url>
    <wp:comment_author_IP>69.0.91.145</wp:comment_author_IP>
    <wp:comment_date>2012-11-07 14:15:37</wp:comment_date>
    <wp:comment_date_gmt>2012-11-07 18:15:37</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[...and hey, we've ALL got a lot to learn. :)]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>292320</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1352312137</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";d:1352312137.6003110408782958984375;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:11:"bonsaigiant";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2012-11-07 18:15:37</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>10057</wp:comment_id>
    <wp:comment_author><![CDATA[amatriain]]></wp:comment_author>
    <wp:comment_author_email>geralt@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>188.86.15.76</wp:comment_author_IP>
    <wp:comment_date>2012-11-07 14:17:22</wp:comment_date>
    <wp:comment_date_gmt>2012-11-07 18:17:22</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Ah, I see. I got the associativity wrong. Thanks.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>10055</wp:comment_parent>
    <wp:comment_user_id>16177858</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1352312242</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";d:1352312242.6298830509185791015625;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:9:"amatriain";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2012-11-07 18:17:22</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Business Natural Languages</title>
  <link>http://invisibleblocks.com/?p=58</link>
  <pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.wordpress.com/?p=58</guid>
  <description/>
  <content:encoded><![CDATA[Jay Fields[link] talked[link] about Business Natural Languages (BNLs) at GoRuCo 2007[link].  He showed how his ruby code turned English-y business rules into more ruby code, and ran it.  From <code>compensate $3000 for each deal closed in the past 30 days</code> into real running ruby, by way of regular expressions and swapping text.  The prize is, a business person can "code" these rules on his own, so maintenance costs drop, and new rules are in place quicker.

People doubted his approach, saying that business people will mess up, type in the wrong text, think they can say anything to the computer.  He said we should build for them a language workbench (with syntax checks), make a test environment, and set up workflows and processes to be safe.  People still doubted, and said "show us this language workbench," but it was time for the next talk.

Jay's talk hit snags, and we could talk about them, but I think there's a bigger idea here: let the user control the parts he cares about.

<h2>What do we care about?</h2>

We all "know" how some programs work.  To bold my text, I click the "B";  that's a rule we can imagine, code lurking behind the button, waiting to run.  It's one part of the word processor that we care about, along with "Save", and such.  We care about it, because bold text and saved files are things we care about.  We <i>don't</i> care about buffers, window layouts, file locking, or events handling.  Well-done software moves the user close to the parts he cares about, so he can control them, and keeps the other parts off.  [This is why well-done software seems like it should be easy to write...we imagine the parts we want, don't think of the rest, and then ask the poor coders why it takes so long.]

"Things", or nouns -- files, people, text, numbers -- are easy to show on a computer, and much software lets us control them.  Verbs and rules mean there are nouns, changing around, in time.  Verbs and rules are hard to show, so fewer programs let us control them.  We can CRUD[link] our nouns, but rarely our actions.  Macros and scripts are about as close as we get, and those belong to "computer guys".

Jay showed us one way to move rules close to the user, but there are other ways, too.

<h2>Give us our verbs!</h2>

Examples:
FIT - Framework for Integrated Test.  Let users specify tests, as HTML.
Excel - mathematical formulas, operating on cells.
HIG's interviewer -- rules between objects expressed as mind-map.

<h2>Into tinkerable software</h2> [link]

We coders may tend to lump software into two kinds -- the stuff we write, and the stuff we use -- and I think we view them very differently.  Software we use is atomic,


Jay <a href="http://bnl.jayfields.com/04_damp.html">says</a>, "If <i>software can be understood and altered by subject matter experts</i> the business can be more responsive to change."  [Emphasis added.]


http://bnl.jayfields.com/04_damp.html
http://www.brynary.com/2007/4/21/goruco-talk-business-natural-language
http://goruco.com/speakers/]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>58</wp:post_id>
  <wp:post_date>0000-00-00 00:00:00</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="meta-programming"><![CDATA[Meta-programming]]></category>
  <category domain="post_tag" nicename="ruby"><![CDATA[Ruby]]></category>
  <category domain="category" nicename="software-thinking"><![CDATA[Software Thinking]]></category>
</item>
<item>
  <title>reCAPTCHA: stop spam. read books.</title>
  <link>http://invisibleblocks.com/2007/06/21/recaptcha-stop-spam-read-books/</link>
  <pubDate>Thu, 21 Jun 2007 19:05:32 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.wordpress.com/2007/06/21/recaptcha-stopping-spam-reading-books/</guid>
  <description/>
  <content:encoded><![CDATA[<a href="http://recaptcha.net/learnmore.html">This is really cool</a>.  reCAPTCHA is a free CAPTCHA service that asks the user to type <i>two</i> words.  They know the first word, but the second comes from a failed OCR scan.  If you get the first word right, reCAPTCHA assumes you're human, and they store your answer to the second word...they even run it by a few other humans to raise the confidence.  Not only are you authenticated, you're transcribing.  According to reCAPTCHA, "in aggregate these little puzzles consume more than 150,000 hours of work each day".

[For the record, I don't know anyone at reCAPTCHA.  I found them while reading up on CAPTCHAs for work.]]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>59</wp:post_id>
  <wp:post_date>2007-06-21 15:05:32</wp:post_date>
  <wp:post_date_gmt>2007-06-21 19:05:32</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>recaptcha-stop-spam-read-books</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="job"><![CDATA[Job]]></category>
  <category domain="category" nicename="learning"><![CDATA[Learning]]></category>
  <category domain="post_tag" nicename="weird"><![CDATA[Weird]]></category>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[recaptcha-stopping-spam-reading-books]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>3930</wp:comment_id>
    <wp:comment_author><![CDATA[Same shirt every day &raquo; Blog Archive &raquo; Morning Brew #49]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://www.sameshirteveryday.com/2007/07/02/morning-brew-49/</wp:comment_author_url>
    <wp:comment_author_IP>208.113.193.8</wp:comment_author_IP>
    <wp:comment_date>2007-07-02 07:00:54</wp:comment_date>
    <wp:comment_date_gmt>2007-07-02 11:00:54</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[...] Recaptcha - fight spam and help book scanning at the same time (via) [...]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2007-07-02 11:00:54</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Does your company want smart programmers?</title>
  <link>http://invisibleblocks.com/?p=60</link>
  <pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.wordpress.com/?p=60</guid>
  <description/>
  <content:encoded><![CDATA[Do companies WANT smart developers?  Does yours?  Or do they just want drones, swappable cogs, blub-programmers?

If your company <em>does</em> want smart developers, why?  Do you hire the best you can, and then mis-manage them into insanity?  Do you let them use the brains you purportedly hired them for?

Or do you give them goals and priorities, and let them get there?  Do you let them steer the business?  Do you let them fix up the software, when they say it's needed?  Do you involve them in evaluating the trade-offs between new features and refactoring?]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>60</wp:post_id>
  <wp:post_date>0000-00-00 00:00:00</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="job"><![CDATA[Job]]></category>
  <category domain="category" nicename="software-thinking"><![CDATA[Software Thinking]]></category>
</item>
<item>
  <title>Sabbaticals</title>
  <link>http://invisibleblocks.com/?p=61</link>
  <pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.wordpress.com/?p=61</guid>
  <description/>
  <content:encoded><![CDATA[We talked about sabbaticals at work recently.  I'd love to take a bunch of time off from work, to learn about things.  A sabbatical would be a huge job perk for me...I can't see myself ever leaving a job with a sabbatical,  not for money, technology, or almost anything else.

If I had two months sabbatical, I'd pick functional programming languages that support metaprogramming, and have web frameworks:  Haskell and HAppS, Scala and lift, Erlang and ErlyWeb.  Ruby and Rails, too, of course, and maybe Python and Django or something, but I'm looking for languages that are functional first, OO second.

I think functional programming gives us better ways to <a href="http://weblog.raganwald.com/2007/03/why-why-functional-programming-matters.html">factor</a> our problems, and to solve them.  Metaprogramming lets us build up our own abstractions, put our own concepts into the language.

What do you think of my ideas for a sabbatical?  What would you do with your sabbatical?  I'd love to hear from any practicing professionals who have sabbaticals.  How did you get it?  What do you spend them on?  How does your boss justify it to himself/herself?  Were you already a well-known rock-star programmer?  If you were, did that help?]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>61</wp:post_id>
  <wp:post_date>0000-00-00 00:00:00</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>sabbaticals</wp:post_name>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="functional-programming"><![CDATA[Functional Programming]]></category>
  <category domain="post_tag" nicename="job"><![CDATA[Job]]></category>
  <category domain="category" nicename="learning"><![CDATA[Learning]]></category>
  <category domain="post_tag" nicename="life"><![CDATA[Life]]></category>
  <category domain="category" nicename="meta-programming"><![CDATA[Meta-programming]]></category>
  <category domain="category" nicename="software-thinking"><![CDATA[Software Thinking]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[292320]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Fear, Uncertainty, and Doubt</title>
  <link>http://invisibleblocks.com/2007/10/22/fear-uncertainty-and-doubt/</link>
  <pubDate>Tue, 23 Oct 2007 03:08:13 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.wordpress.com/2007/10/22/fear-uncertainty-and-doubt/</guid>
  <description/>
  <content:encoded><![CDATA[
> Of all the monsters that fill the nightmares of our folklore, none terrify more than werewolves, because they transform unexpectedly from the familiar into horrors. For these, one seeks bullets of silver that can magically lay them to rest. The familiar software project, at least as seen by the nontechnical manager, has something of this character; it is usually innocent and straightforward, but is capable of becoming a monster of missed schedules, blown budgets, and flawed products. So we hear desperate cries for a silver bullet...
> <i>- Fred Brooks, <a href="http://en.wikipedia.org/wiki/No_Silver_Bullet">No Silver Bullet</a></i>

> Software is full of failure, and will be until we can learn how truly to build it.  Fear of failure is fear of death. In fear of failure, we seek order.
> <i>- Richard Gabriel, <a href="http://www.dreamsongs.com/MobSoftware.html">Mob Software</a></i>

> Eventually, people begin to realize that dealing with fear is not good; instead we need to be adults, taking calculated risks and living with the consequences. We need to drive out fear in the organization (think Deming) and instead live with uncertainty. This brings us to what we called (again, lack of a better term) "second generation" methodologies that are a backlash to the first. XP is a great example - the whole point is simplest process that could possible work, combined with just enough safety nets that you can live with a little risk. Stop living in fear that the developers won't hit some meaningless deadline for a huge piece of work, and instead have a simple working system up in weeks and add features as you go. Duh.
> As I said before, these second-generation methodologies are, for the most part, just a backlash to the first. They are saying "well, heck, too much process didn't work. Let's take away and take away and take away process untill we have something workable."
> So, second generation languages are still caught up in fear - that is, driving it out. That's half the sales pitch. If we just take those gates down, maybe pave the road, we will get home faster.
> <i>- <a href="http://use.perl.org/~heusserm/journal/26712">Pothole Methodologies</a></i>

> Perhaps the persistent tendency to harden insight into unquestioned doctrine arises from our need to feel secure, to gain a hold on our situation and stave off the fear that things are dangerous and beyond our control. It's an attitude that naturally appears when dealing with illness, aging, and mortality, the greatest of fears; and the fact that we really <i>aren't</i> in control, that we can't wield power over such awesome eventualities, just makes us crave answers and solutions all the more.
> <i>- Jeff Wilson, <a href="http://www.killingthebuddha.com/dogma/whiteashes.htm">White Ashes</a> at <a href="http://www.killingthebuddha.com">Killing the Buddha</a></i>

> To truly learn a new language, you have to learn the different things. When you find something difficult, something that doesn't make sense, you don't avoid it, you embrace it. This is where the actual learning takes place.
> <i>- Raganwald, <a href="http://weblog.raganwald.com/2007/10/challenge-of-teaching-yourself.html">The challenge of teaching yourself a programming language</a></i>

> Ordinarily we are swept away by habitual momentum.  We don't interrupt our patterns even slightly.  With practice, however, we learn to stay with a broken heart, with a nameless fear, with the desire for revenge.  Sticking with uncertainty is how we learn to relax in the midst of chaos, how we learn to be cool when the ground beneath us suddenly disappears.  We can bring ourselves back to the spiritual path countless times every day simply by exercising our willingness to rest in the uncertainty of the present moment -- over and over again.
> <i>- Pema Chödrön, <a href="http://www.amazon.com/Comfortable-Uncertainty-Teachings-Pema-Chodron/dp/1570629722">Comfortable with Uncertainty: 108 Teachings</a>, pg 8</i>

> Doubt is not a pleasant condition, but certainty is absurd.
> <i>- Voltaire</i></blockquote>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>64</wp:post_id>
  <wp:post_date>2007-10-22 23:08:13</wp:post_date>
  <wp:post_date_gmt>2007-10-23 03:08:13</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>fear-uncertainty-and-doubt</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="buddhism"><![CDATA[Buddhism]]></category>
  <category domain="post_tag" nicename="life"><![CDATA[Life]]></category>
  <category domain="category" nicename="software-thinking"><![CDATA[Software Thinking]]></category>
</item>
<item>
  <title>Continuations: a warm-up</title>
  <link>http://invisibleblocks.com/2008/03/13/continuations-a-warm-up/</link>
  <pubDate>Thu, 13 Mar 2008 20:53:12 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.wordpress.com/?p=67</guid>
  <description/>
  <content:encoded><![CDATA[<a href="http://en.wikipedia.org/wiki/Continuation">Continuations</a> and <a href="http://en.wikipedia.org/wiki/Continuation-passing_style">continuation-passing style</a> (CPS) are introduced in <a href="http://www.amazon.com/Little-Schemer-Daniel-P-Friedman/dp/0262560992">The Little Schemer</a>, chapter 8, using collectors: functions that collect values, through being repeatedly redefined.  It was a tough chapter for me, but the idea is simple once you get it, so I'd like to leave some help for others.  I'll use Ruby for the examples, with some JavaScript and Scheme at the end.

In languages with first-class functions, you can assign functions to variables, and re-assign those variables.  Consider this Ruby example:
[sourcecode language='ruby']
func = lambda { |x| puts x }

['a', 'b', 'c'].each { |ch|
    old_func = func
    func = lambda { |x| old_func[x + ch] }
}

func['d']  #=> prints 'dcba'[/sourcecode]
By re-defining <code>func</code> in terms of <code>old_func</code>, we're building up a recursive computation.  It's like normal recursion, but approached from the other side -- without explicit definitions.  Since a Ruby function is a closure, it remembers the value of the variables in scope when it was created; each layer of this recursion holds its own value for <code>ch</code> and <code>old_func</code>.  When we call the last <code>func</code>, it sees <code>ch</code> = 'c' and <code>x</code> = 'd'.  It concatenates them, and calls its version of <code>old_func</code>...which sees <code>x</code> = 'dc' and <code>ch</code> = 'b', concatenates them, and passes it to <i>its</i> <code>old_func</code>, and so on.In fact, if we wrote it like this, the execution of all those lambdas would be exactly the same:
[sourcecode language='ruby']
func_puts = lambda { |x| puts x }
func_add_a = lambda { |x| func_puts[x + 'a'] }
func_add_b = lambda { |x| func_add_a[x + 'b'] }
func_add_c = lambda { |x| func_add_b[x + 'c'] }
func_add_c['d']  #=> prints 'dcba'[/sourcecode]
We could calculate factorials this way:
[sourcecode language='ruby']
def factorial(n, func)
    if n == 1
        func[1]
    else
        factorial(n - 1, lambda { |i| func[i * n] })
    end
end
factorial(3, lambda { |fact| puts fact })  #=> prints 6[/sourcecode]

1. On the first call to factorial, <code>n</code> = 3, and <code>func</code> just prints its argument.  But <code>func</code> isn't called yet...since <code>n</code> isn't 1, we recurse with <code>n - 1</code> = 2, and a new function that calls <code>func</code> with its argument <code>i</code> times 3.
2. On the recurse, <code>n</code> = 2, and <code>func</code> calls the original printer <code>func </code>with its argument <code>i</code> times 3.  Since <code>n</code> still isn't 1, we recurse again, with <code>n - 1</code> = 1, and a new function that calls our <code>func</code> with <i>its</i> argument <code>i</code> times 2.
3. On the final round, <code>n</code> = 1, so we (finally!) call <code>func</code> with 1, which...
4. ...calls the previous <code>func</code> with 1 * 2, which...
5. ...calls the <i>original</i> <code>func</code> with (1 * 2) * 3, which...
6. prints 6.

As <code>factorial</code> recurses, it builds up a recursive tower of <code>func</code> calls.  In <code>factorial</code>'s base case, the last (and outermost) <code>func</code> is called, and we begin to climb down the <code>func </code>tower, to its bottom floor, the original <code>func</code>.  It's recursion in two directions.

In case Ruby isn't your favorite language, here are versions in JavaScript and Scheme:

[sourcecode language='jscript']
function factorial(n, func) {
    if (n == 1)
        func(1)
    else
        factorial(n - 1, function(i) {
            func(n * i)
        });
}

factorial(3, function(fact) { print(fact) })[/sourcecode]
<pre>; Too bad WordPress doesn't format Scheme or Lisp!
(define factorial
  (lambda (n func)
    (cond ((= n 1) (func 1))
          (else (factorial (- n 1)
                           (lambda (i) (func (* n i))))))))

; Here, the original func is just an identity function.
(factorial 4 (lambda (fact) fact))</pre>
Once this is clear, you can see many other applications:

* You could find all the even numbers in a list: instead of passing a number to <code>func</code>, pass the list of even numbers, and add each even number in.
* You could separate the numbers into evens and odds: instead of passing just one list to <code>func</code>, pass two lists, for evens and odds, and add each number to the correct list.
* You could separate any list of items by <i>any</i> criteria:  instead of hard-coding "is even?" into the function, pass a predicate function.  (Maybe you want to extract all occurrences of 'tuna' from a list of words.)

That should be enough of a warm-up for chapter 8.  See you in chapter 9, when they derive the <a href="http://en.wikipedia.org/wiki/Y_combinator">Y-combinator</a>!]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>67</wp:post_id>
  <wp:post_date>2008-03-13 16:53:12</wp:post_date>
  <wp:post_date_gmt>2008-03-13 20:53:12</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>continuations-a-warm-up</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="functional-programming"><![CDATA[Functional Programming]]></category>
  <category domain="post_tag" nicename="javascript"><![CDATA[JavaScript]]></category>
  <category domain="post_tag" nicename="ruby"><![CDATA[Ruby]]></category>
  <category domain="post_tag" nicename="scheme"><![CDATA[scheme]]></category>
</item>
<item>
  <title>If Men were Angels</title>
  <link>http://invisibleblocks.com/?p=68</link>
  <pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.wordpress.com/?p=68</guid>
  <description/>
  <content:encoded><![CDATA[<blockquote>
If men were angels, no government would be necessary.
</blockquote>

- Alexander Hamilton or James Madison, <a href="http://usgovinfo.about.com/library/fed/blfed51.htm">The Federalist Papers No. 51</a>

Why coding standards?  Why not code reviews?

A coding standard, like grammar check in MS Word, makes you follow the rules, but can't help you do quality work.  A code review, like any peer or mentor review, helps you do quality work, by the benefit of another perspective.  It also creates a culture, a set of conventions, through shared knowledge.

If programmers were alpha-hackers, no coding standards would be necessary, but code reviews would still be useful for teams.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>68</wp:post_id>
  <wp:post_date>0000-00-00 00:00:00</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[292320]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Common Objections to Controlling Complexity</title>
  <link>http://invisibleblocks.com/?p=70</link>
  <pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.wordpress.com/?p=70</guid>
  <description/>
  <content:encoded><![CDATA[Alternate title: When Dealing with Philistines...

The master said to the student, "Control complexity through separation of concerns,"  The student heard

"how can I make programming easier?"

Separation of Concerns is a basic idea.  Keep separate things separate, to manage complexity.

Law of Demeter, code complexity charts and tools.

When software advice is given, usually part of the story is why you should take it.  What's the benefit?  I think most of the time, the benefit is "controlling complexity", but when faced with such an abstract benefit, we focus on more tangible, but less fundamental, things:  code re-use, minimizing changes, less typing, fewer bugs.

These more tangible, less fundamental benefits are not as long-lasting as "control complexity."  They're more situation-dependant, more tool-dependant.  "Control complexity" is timeless, "code shorter modules" isn't ("modules?  He means COBOL?").  Putting "control complexity" into a setting makes it more accessible, but this same setting strips it of some of its timelessness...by connecting it to specific languages, you make it mortal.  By casting it with something concrete, you encourage people to mistake the concrete benefit for the real thing.

It's like you can't explain it to people in one blow, because the words don't stick, they don't see the value of it.  So you tell them a story, you give them examples, you draw them pictures, and each time, the punch-line is the same, and you keep hoping that one day, they'll notice that.  They'll look at your stories and examples, and see the same idea shining through all of them, and go, "whoa, I get it."

You run 3 risks:
- the setting doesn't match the reader, so he dismisses the technique
- the setting eventually becomes obsolete, it expires
- the reader thinks there are no <i>other</i> benefits.
- "Separate content from presentation" because: you can change look-n-feel, but also, you can parse with Lucene!  Build an admin GUI!  More easily scan your content visually!
<h4>Separation of Concerns</h4>
"Separate your content from your presentation.  Then, you can change the look-and-feel of your whole site from just one place."
<i>When marketing tells us to change the look-and-feel, it'll be a huge months-long project anyway.  It's easier to just format this with tables.</i>

"Encapsulate your class variables behind a layer of public methods.  Later, if you want to track that state differently, you only have to change the methods."
<i>I have grep to help me make the changes, and the compiler will tell me for sure if I've missed any references to the variables.  What's the big deal?</i>

"Modularize functionality into classes, components, or subroutines.  Then you can re-use your code, and share it with other developers, decreasing the amount of code you have to write."
<i>This class is so specific to my project; no one else would ever reuse it.  And who's gonna keep track of all these classes, anyway?</i>

"Keep your logic out of your JSP scriptlets; use custom tags instead.  Then your designer can use Dreamweaver to build web apps, using only your custom tags."
<i>Our designers don't understand custom tags.  Anyway, they don't work on production code -- we have to turn their HTML mock-ups into real JSPs anyway.</i>

"Use information hiding, and treat component interfaces like contracts.  Then, if a routine you're using needs to change, you don't care."
<i>My subroutines need parameters passed to them!  This data is needed at all levels of the system!</i>

"Don't embed SQL in your JSP/ASP pages.  When you need to change the SQL, you'll be running all over the place looking for it."
<i>So, should I build up some huge middle layer?  It's just this page, and a few others, and I need to be moving on.  I can do without it.</i>
<h4>Controlling Complexity</h4>
"Prefer immutable objects, because they're thread-safe."
<i>But I don't really do multi-threaded programming, I just do web apps;  all my threading needs are handled by the container.  Besides, object instantiation and garbage collection are supposed to be slow, right?  And how am I supposed to do anything, if I can't change my variables?</i>

"When you can, use map, fold, and filter instead of custom for loops.  Managing all those loop counters can be buggy, and it makes complex operations unmanageable."
<i>But I'm comfortable with the for loop, even the occasional nested for.  Map, fold, and filter are strange, and no one on my team uses them.  Besides, why iterate over the collections multiple times?  Won't that be slow?</i>

~~~~
There are plenty of places this comes up:  Don't embed SQL in your JSP/ASP pages.

~~~~
A common pattern seems to be, "if you do it the wrong way, you'll have to change more code."  I remember my response when I first heard something like that:  "ok, that would suck, but...it wouldn't be the end of the world, would it?"  I don't think I'd have been more impressed with "separate concerns", but eventually, I came to see that <i>that's</i> the real point;  unneccesary code changes are a symptom, not the disease.

It's like having two kitchens in your house.

~~~~

In each case, you see some common reasons for using these techniques: code re-use, less typing, separating roles, less code to change.  In each case, you see common objections:  it'll take too long, I don't need it, it'll perform poorly, it's too complicated.

In each case, there's an underlying, more basic reason for using the technique:  "<a href="http://www.google.com/search?q=quote+Controlling+complexity+essence+computer+programming+Kernigan">controlling complexity</a>", "<a href="http://en.wikipedia.org/wiki/Separation_of_concerns">separating concerns</a>";  or, in simpler terms, "keep it simple and clear," "minimize what you have to worry about."  Our brains can handle only so many pieces at a time (<a href="http://en.wikipedia.org/wiki/The_Magical_Number_Seven,_Plus_or_Minus_Two">7 +/- 2</a>, in fact); after that, we start dropping pieces.  If you're designing a large bit of code, you owe it to yourself to keep it mentally manageable, small enough to <a href="http://www.paulgraham.com/head.html">hold it in your head</a>.  Good design is all about the psychology and physiology of your users...even when that user is you.

<b>PostScript</b>

I couldn't find a good way to fit these in, but they kept coming to mind as I was writing:

Michael Feathers talks about viewing code as a <a href="http://www.informit.com/articles/article.aspx?p=359417&amp;rl=1">huge sheet of text</a>, and learning to see its seams:  "A seam is a place where you can alter behavior in your program without editing in that place."  The way he explains and illustrates software seams can help you start sensing the shape of a piece of software, seeing beyond the huge sheet of text.

Roy Osherove has a nice <a href="http://weblogs.asp.net/rosherove/archive/2004/01/21/61164.aspx">summary and review</a> of Dijkstra's <a href="http://www.cs.utexas.edu/~EWD/transcriptions/EWD03xx/EWD340.html">The Humble Programmer</a>.  From the closing:  "...We shall do a much better programming job, ...provided that we <b>respect the intrinsic limitations of the human mind</b> and approach the task as Very Humble Programmers."  (Emphasis mine)

The <a href="http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-7.html#%_chap_Temp_4">Preface to the First Edition</a> of <a href="http://mitpress.mit.edu/sicp/full-text/book/book.html">SICP</a> has a few things to say about managing complexity:
<blockquote>...programs must be written for people to read, and only incidentally for machines to execute. Second, we believe that the essential material to be addressed by a subject at this level is ... the techniques used to control the intellectual complexity of large software systems.

Our goal is that students who complete this subject should ... have command of the major techniques for controlling complexity in a large system. ...They should know what not to read, and what they need not understand at any moment.</blockquote>
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

It seems that this sussing out the underlying pattern, the essence of the solution, is the first step of writing solid and extendable software.  If there's part of the pattern you don't understand, that is where you should defer decisions, code for flexibility, hide behind an interface; not because it's good design to hide those details, but because lets you make up your mind only when you know enough to do it properly.

Deciding too early, assuming you'll get it close enough, creates a pile of rubble that you have to walk around, until you clean it up.  Cleaning it up is harder than it sounds, though;  each piece is assumed to have merit, a purpose for being there, and it takes research, some convincing, and courage to delete a large section of ghost code.

Of course, you still have to see the underlying pattern, the big picture, that all the details hang from.  I can only assume that this takes experience, supplemented by a breadth of reading;  the more designs you take into your mind, the more tricks you'll have up your sleeve.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>70</wp:post_id>
  <wp:post_date>0000-00-00 00:00:00</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="complexity"><![CDATA[complexity]]></category>
  <category domain="post_tag" nicename="information-hiding"><![CDATA[information hiding]]></category>
  <category domain="category" nicename="programming"><![CDATA[Programming]]></category>
  <category domain="post_tag" nicename="separation-of-concerns"><![CDATA[separation of concerns]]></category>
  <category domain="post_tag" nicename="seven-plus-or-minus-two"><![CDATA[seven plus or minus two]]></category>
  <category domain="category" nicename="software-thinking"><![CDATA[Software Thinking]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[292320]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Why Functional JavaScript?</title>
  <link>http://invisibleblocks.com/2008/01/04/why-functional-javascript/</link>
  <pubDate>Fri, 04 Jan 2008 22:43:15 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.wordpress.com/2008/01/04/why-functional-javascript/</guid>
  <description/>
  <content:encoded><![CDATA[I'm teaching myself functional programming (FP).  I first noticed it in Ruby, even though it's been in JavaScript all along.  I'm working my way through <a href="http://mitpress.mit.edu/sicp/full-text/book/book.html">Structure and Interpretation of Computer Programs</a> (SICP), and <a href="http://www.ccs.neu.edu/home/matthias/BTLS/">The Little Schemer</a> books, so I'm learning Scheme and Lisp too.

When studying FP, I generally use JavaScript and Scheme.  My FP examples here are usually in JavaScript:

* It's available everywhere, and most programmers are comfortable reading it.
* It's closer to Scheme than Ruby is, so the examples translate better.  In fact, Douglas Crockford <a href="http://javascript.crockford.com/little.html">notes</a>:  "JavaScript has much in common with Scheme. It is a dynamic language. It has a flexible datatype (arrays) that can easily simulate s-expressions. And most importantly, functions are lambdas.  Because of this deep similarity, all of the functions in The Little Schemer can be written in JavaScript."

I include Ruby or Scheme, though, if it seems appropriate.

I often use the <a href='http://www.squarefree.com/shell/shell.html'>JavaScript Shell</a>, or its big brother, the <a href="http://www.squarefree.com/jsenv/">JavaScript Development environment</a>, because I haven't found or built a JavaScript REPL as nice as <a href="http://www.plt-scheme.org/software/drscheme/">Dr. Scheme</a>.

<h3>Performance</h3>

Most current JavaScript implementations are slow with <a href='http://www.kirit.com/Recursive%20rights%20and%20wrongs'>recursion</a> and <a href='http://blogs.msdn.com/ie/archive/2007/01/04/ie-jscript-performance-recommendations-part-3-javascript-code-inefficiencies.aspx'>closures</a>...two cornerstones of functional programming.

I don't worry about this, because my examples are not meant to be dropped into production systems without thought and testing.  I write production-ready code at work; here, I play and explore.  We do use some functional JavaScript where I work, but it's where the performance is acceptable, and the imperative alternative would be too unwieldly.

History seems to show that performance is a short-term concern, and better programming techniques are a long-term concern.  It also seems that there are no inherent reasons JavaScript is slow; more performant implementations may be in our future.

<h3>Why not Haskell or Erlang?</h3>

...or OCaml, Scala, F#, Clojure?  I'm getting there.  SICP and The Little Schemer books are more than enough for me right now.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>71</wp:post_id>
  <wp:post_date>2008-01-04 18:43:15</wp:post_date>
  <wp:post_date_gmt>2008-01-04 22:43:15</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>why-functional-javascript</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="functional-programming"><![CDATA[Functional Programming]]></category>
  <category domain="post_tag" nicename="javascript"><![CDATA[JavaScript]]></category>
  <category domain="category" nicename="learning"><![CDATA[Learning]]></category>
  <category domain="post_tag" nicename="ruby"><![CDATA[Ruby]]></category>
  <category domain="post_tag" nicename="scheme"><![CDATA[scheme]]></category>
  <wp:postmeta>
    <wp:meta_key>_oembed_3c12b0a252cc83b2264c7069eed3727a</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>9184</wp:comment_id>
    <wp:comment_author><![CDATA[Mark A Hershberger]]></wp:comment_author>
    <wp:comment_author_email>mah@everybody.org</wp:comment_author_email>
    <wp:comment_author_url>http://hexmode.com/</wp:comment_author_url>
    <wp:comment_author_IP>24.115.83.248</wp:comment_author_IP>
    <wp:comment_date>2008-01-07 02:49:29</wp:comment_date>
    <wp:comment_date_gmt>2008-01-07 06:49:29</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[How about MozRepl?]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2008-01-07 06:49:29</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9189</wp:comment_id>
    <wp:comment_author><![CDATA[Daniel Bernier]]></wp:comment_author>
    <wp:comment_author_email>danbernier@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://invisibleblocks.wordpress.com/</wp:comment_author_url>
    <wp:comment_author_IP>12.178.84.66</wp:comment_author_IP>
    <wp:comment_date>2008-01-07 13:46:16</wp:comment_date>
    <wp:comment_date_gmt>2008-01-07 17:46:16</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[@goodmike, I've been using the SICP 1981 lectures, but I might check out the MIT stuff...that's a great idea, I can't believe it didn't occur to me.

@Ralph, when I get that far, I'll certainly do the metacircular evaluator in Scheme.  Maybe I'll give it a go in JavaScript too, though, and see how far I get.  My point in this post was really to say "when I _blog_ about FP, the examples are in JavaScript, because..."  I've come to enjoy Scheme, and I'll keep my eye open for ways to use it on-the-job, but JavaScript is generally an easier sell.

@Mark, I've never heard of MozRepl, I'll check it out.  There's probably an emacs hacker inside me, waiting to come out; MozRepl is one more reason for me to seriously sit down with it.  I expect it'll pay off, but it's always a question of how to use my scarce time: FP?  blogging?  linux?  emacs?  The autodidact's curse is that you never really graduate.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>292320</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2008-01-07 17:46:16</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9158</wp:comment_id>
    <wp:comment_author><![CDATA[Reg Braithwaite]]></wp:comment_author>
    <wp:comment_author_email>raganwald+miro@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://weblog.raganwald.com/</wp:comment_author_url>
    <wp:comment_author_IP>70.49.221.210</wp:comment_author_IP>
    <wp:comment_date>2008-01-05 02:33:40</wp:comment_date>
    <wp:comment_date_gmt>2008-01-05 06:33:40</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Have you seen:

http://osteele.com/sources/javascript/functional/

Many of the delightful goodies of langauges like Haskell (partial application, currying, composition, point-free programming, and so forth) in a compact Javascript library. It now plays nicely with Rhino.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2008-01-05 06:33:40</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9172</wp:comment_id>
    <wp:comment_author><![CDATA[goodmike]]></wp:comment_author>
    <wp:comment_author_email>mh@michaelharrison.ws</wp:comment_author_email>
    <wp:comment_author_url>http://www.michaelharrison.ws</wp:comment_author_url>
    <wp:comment_author_IP>69.143.250.233</wp:comment_author_IP>
    <wp:comment_date>2008-01-06 11:40:41</wp:comment_date>
    <wp:comment_date_gmt>2008-01-06 15:40:41</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Daniel, great post. I have gone from loathing Javascript to really enjoying using it, in large part because I have discovered its functional programming potential. Getting to know the proptotype.js code helped me explore that. Doing a lot of Ajax and event handling coding made me familiar with first-class procedures. 

I too am working through SICP, through the MIT OpenCourseWare course of the same name, with a few other brave souls. I read the Little Schemer last year, and it really helped prepare me for a lot of the concepts in SICP.

Good luck with functional Javascript. I'll keep an eye on your feed, and I look forward to reading more about your explorations.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>1657808</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2008-01-06 15:40:41</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9175</wp:comment_id>
    <wp:comment_author><![CDATA[Discuss | Lazycoder]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://www.lazycoder.com/weblog/index.php/archives/2008/01/06/discuss/</wp:comment_author_url>
    <wp:comment_author_IP>216.118.97.243</wp:comment_author_IP>
    <wp:comment_date>2008-01-06 12:52:41</wp:comment_date>
    <wp:comment_date_gmt>2008-01-06 16:52:41</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[...] Why Functional Javascript?   Comments closed &mdash; Trackbacks closed RSS 2.0 feed for these comments This entry (permalink) [...]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2008-01-06 16:52:41</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9181</wp:comment_id>
    <wp:comment_author><![CDATA[Ralph]]></wp:comment_author>
    <wp:comment_author_email>ralph.rice@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://coderz4life.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>204.210.198.172</wp:comment_author_IP>
    <wp:comment_date>2008-01-07 00:07:32</wp:comment_date>
    <wp:comment_date_gmt>2008-01-07 04:07:32</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[If you are going to do any of the examples in SICP book, I would be curious how you will do a metacircular evaluator (chapter 4, I believe).  I guess that will not be necessary if you are strictly doing functional programming in Javascript, but I would be interested in seeing what you come up with. :-)]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>1893707</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2008-01-07 04:07:32</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9164</wp:comment_id>
    <wp:comment_author><![CDATA[Daniel Bernier]]></wp:comment_author>
    <wp:comment_author_email>danbernier@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://invisibleblocks.wordpress.com/</wp:comment_author_url>
    <wp:comment_author_IP>64.252.163.114</wp:comment_author_IP>
    <wp:comment_date>2008-01-05 14:05:15</wp:comment_date>
    <wp:comment_date_gmt>2008-01-05 18:05:15</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I've seen it, but haven't had the chance to dive in yet.  Just from the front page, it looks like it could serve as a syllabus for further exploration into functional programming...thanks for passing it on!]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>292320</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2008-01-05 18:05:15</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Counting On Your Fingers</title>
  <link>http://invisibleblocks.com/2008/02/11/counting-on-your-fingers/</link>
  <pubDate>Mon, 11 Feb 2008 22:26:09 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.wordpress.com/?p=72</guid>
  <description/>
  <content:encoded><![CDATA[If I ever have kids, I'll teach them to count on their fingers.  <a href="http://en.wikipedia.org/wiki/Finger_binary">In binary</a>.  "Pff, 10?  I can reach 1023!"

Of course, they'll probably get carpal tunnel from all the low-digit activity.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>72</wp:post_id>
  <wp:post_date>2008-02-11 18:26:09</wp:post_date>
  <wp:post_date_gmt>2008-02-11 22:26:09</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>counting-on-your-fingers</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="learning"><![CDATA[Learning]]></category>
  <wp:comment>
    <wp:comment_id>9312</wp:comment_id>
    <wp:comment_author><![CDATA[mfr]]></wp:comment_author>
    <wp:comment_author_email>mfr@techtix.net</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>82.152.85.61</wp:comment_author_IP>
    <wp:comment_date>2008-02-13 04:41:11</wp:comment_date>
    <wp:comment_date_gmt>2008-02-13 08:41:11</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Yesterday was my grandson's sixth birthday.  Inside the card
I wrote "Happy Birthday - today you are 110"]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2008-02-13 08:41:11</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9313</wp:comment_id>
    <wp:comment_author><![CDATA[Daniel Bernier]]></wp:comment_author>
    <wp:comment_author_email>danbernier@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://invisibleblocks.wordpress.com/</wp:comment_author_url>
    <wp:comment_author_IP>12.178.84.66</wp:comment_author_IP>
    <wp:comment_date>2008-02-13 11:08:47</wp:comment_date>
    <wp:comment_date_gmt>2008-02-13 15:08:47</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Start learning 'em early!]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>292320</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2008-02-13 15:08:47</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Regular Expressions into lambdas: swapper, stripper, scanner</title>
  <link>http://invisibleblocks.com/2008/02/15/regular-expressions-into-lambdas-swapper-stripper-scanner/</link>
  <pubDate>Sat, 16 Feb 2008 00:59:28 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.wordpress.com/?p=73</guid>
  <description/>
  <content:encoded><![CDATA[Here's some light Friday fun...  When working in ruby with regular expressions on Arrays of Strings, I get so tired of doing this:

[sourcecode language='ruby']
my_array.map! { |item|
    item.gsub(/delete this/, '')
}
[/sourcecode]

Can't we just give the regex to the array, and let it figure it out?  How about this:

[sourcecode language='ruby']
class Regexp
   def stripper
      lambda { |s| s.gsub(self, '') }
   end
end

my_array.map!(&/delete this/.stripper)
[/sourcecode]

We can generalize it to use <i>any</i> string as the replacement:

[sourcecode language='ruby']
class Regexp
   def swapper(new_s)
      lambda { |s| s.gsub(self, new_s) }
   end
   
   def stripper
      swapper ''
   end
end

my_array.map!(&/delete this/.stripper)
my_array.map!(&/replace this/.swapper('with this'))
[/sourcecode]

Which gets me thinking...what if we want to extract text by a regexp?

[sourcecode language='ruby']
class Regexp
   def scanner
      lambda { |s| s.scan(self) }
   end
end

my_array.map(&/[find pattern]/.scanner)
[/sourcecode]

What else can we do with regular expressions?

As a bonus, this translates nicely into JavaScript, too:

[sourcecode language='jscript']
RegExp.prototype.swapper = function(new_s) { 
   re = this
   return function(s) {
      return s.replace(re, new_s) 
   } 
}

RegExp.prototype.stripper = function() { 
   return this.swapper('')
}

// Don't forget those closing parens...
my_array.map(/delete this/.stripper())
my_array.map(/replace this/.swapper('with this'))
[/sourcecode]]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>73</wp:post_id>
  <wp:post_date>2008-02-15 20:59:28</wp:post_date>
  <wp:post_date_gmt>2008-02-16 00:59:28</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>regular-expressions-into-lambdas-swapper-stripper-scanner</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="javascript"><![CDATA[JavaScript]]></category>
  <category domain="category" nicename="programming"><![CDATA[Programming]]></category>
  <category domain="post_tag" nicename="regular-expressions"><![CDATA[regular expressions]]></category>
  <category domain="post_tag" nicename="ruby"><![CDATA[Ruby]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[292320]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>9412</wp:comment_id>
    <wp:comment_author><![CDATA[Daniel Bernier]]></wp:comment_author>
    <wp:comment_author_email>danbernier@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://invisibleblocks.wordpress.com/</wp:comment_author_url>
    <wp:comment_author_IP>12.24.127.147</wp:comment_author_IP>
    <wp:comment_date>2008-04-11 09:43:44</wp:comment_date>
    <wp:comment_date_gmt>2008-04-11 13:43:44</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Here's another obvious use...a matcher:

```ruby
class Regexp
  def matcher
    lambda { |s| s =~ (self) }
  end
end
```]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>292320</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2008-04-11 13:43:44</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>A Faster, Cheaper Fibonacci Definition</title>
  <link>http://invisibleblocks.com/2008/03/22/a-faster-cheaper-fibonacci-definition/</link>
  <pubDate>Sat, 22 Mar 2008 13:43:47 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.wordpress.com/?p=75</guid>
  <description/>
  <content:encoded><![CDATA[The <a href="http://en.wikipedia.org/wiki/Fibonacci_number">Fibonacci sequence</a> is one of the best-known number sequences:
<ol>
	<li>1</li>
	<li>1</li>
	<li>2</li>
	<li>3</li>
	<li>5</li>
	<li>8</li>
	<li>13</li>
	<li>21...</li>
</ol>
Each Fibonacci number above 1 is defined as the sum of the previous two Fibonacci numbers:

F(0) = 0
F(1) = 1
F(n) = F(n-1) + F(n-2)

Just for fun, here's another way to specify the Fibonacci sequence.  It takes fewer calculations, especially for large numbers.  The math is basic algebra substitutions.  This could be old news -- if you've seen this before, I'd love to hear from you.
<h4>Deriving the new Fibonacci definition</h4>
Before we begin, let's notate F(n) as Fn, and F(n-1) as Fn<sub>1</sub> -- it'll make everything tidier.

That Fn<sub>1</sub> + Fn<sub>2</sub> part, to me, always begged for substitution.  Fn<sub>1</sub> should equal Fn<sub>2</sub> + Fn<sub>3</sub>, right?  What if we re-write Fn in terms of Fn<sub>1</sub>'s definition?  What might that lead to?

Fn = Fn<sub>1</sub> + Fn<sub>2</sub>
Fn<sub>1</sub> = Fn<sub>2</sub> + Fn<sub>3</sub>
Fn = Fn<sub>2</sub> + Fn<sub>2</sub> + Fn<sub>3</sub>
Fn = 2Fn<sub>2</sub> + Fn<sub>3</sub>, as long as n &gt; 2.

Pretty basic: substitute the definition for Fn<sub>1</sub> back into the definition for Fn, and simplify.  We can keep going:

Fn<sub>2</sub> = Fn<sub>3</sub> + Fn<sub>4</sub>
Fn = 2Fn<sub>2</sub> + Fn<sub>3</sub>, from above
Fn = (2Fn<sub>3</sub> + 2Fn<sub>4</sub>) + Fn<sub>3</sub>
Fn = 3Fn<sub>3</sub> + 2Fn<sub>4</sub>, for n &gt; 3

...and then:

Fn<sub>3</sub> = Fn<sub>4</sub> + Fn<sub>5</sub>
Fn = (3Fn<sub>4</sub> + 3Fn<sub>5</sub>) + 2Fn<sub>4</sub>
Fn = 5Fn<sub>4</sub> + 3Fn<sub>5</sub>, for n &gt; 4

...and again:

Fn<sub>4</sub> = Fn<sub>5</sub> + Fn<sub>6</sub>
Fn = (5Fn<sub>5</sub> + 5Fn<sub>6</sub>) + 3Fn<sub>5</sub>
Fn = 8Fn<sub>5</sub> + 5Fn<sub>6</sub>, for n &gt; 5

...just one more time:

Fn<sub>5</sub> = Fn<sub>6</sub> + Fn<sub>7</sub>
Fn = 8Fn<sub>6</sub> + 8Fn<sub>7</sub> + 5Fn<sub>6</sub>
Fn = 13Fn<sub>6</sub> + 8Fn<sub>7</sub>, for n &gt; 6

See the pattern?  Look at the coefficients:

Fn =  <b>2</b>Fn<sub>2</sub> + <b>1</b>Fn<sub>3</sub>, for n &gt; <b>2</b>
Fn =  <b>3</b>Fn<sub>3</sub> + <b>2</b>Fn<sub>4</sub>, for n &gt; <b>3</b>
Fn =  <b>5</b>Fn<sub>4</sub> + <b>3</b>Fn<sub>5</sub>, for n &gt; <b>4</b>
Fn =  <b>8</b>Fn<sub>5</sub> + <b>5</b>Fn<sub>6</sub>, for n &gt; <b>5</b>
Fn = <b>13</b>Fn<sub>6</sub> + <b>8</b>Fn<sub>7</sub>, for n &gt; <b>6</b>

They're the Fibonacci sequence starting up.  Do the math, and you'll see that the next few steps follow along.  What if we replace the coefficients with their Fibonacci indexes?  If F(6) = 8 and F(7) = 13, we can rewrite 13Fn<sub>6</sub> + 8Fn<sub>7</sub> as F(7) Fn<sub>6</sub> + F(6) Fn<sub>7</sub>.  Let's carry that out:

Fn = F(3) Fn<sub>2</sub> + F(2) Fn<sub>3</sub>, for n &gt; 2
Fn = F(4) Fn<sub>3</sub> + F(3) Fn<sub>4</sub>, for n &gt; 3
Fn = F(5) Fn<sub>4</sub> + F(4) Fn<sub>5</sub>, for n &gt; 4
Fn = F(6) Fn<sub>5</sub> + F(5) Fn<sub>6</sub>, for n &gt; 5
Fn = F(7) Fn<sub>6</sub> + F(6) Fn<sub>7</sub>, for n &gt; 6

Let's quickly verify this.  We know from the original definition that F(10) = 55, so let's see whether these new versions agree.  (I'll only test the first and last versions, to save space, but you can verify as many as you like.)

F(10) = 55 = F(3) Fn<sub>2</sub> + F(2) Fn<sub>3</sub>
F(10) = 55 = F(3) F(8) + F(2) F(7)
F(10) = 55 = 2 * 21 + 1 * 13

F(10) = 55 = F(7) Fn<sub>6</sub> + F(6) Fn<sub>7</sub>
F(10) = 55 = F(7) F(4) + F(6) F(3)
F(10) = 55 = 13 * 3 + 8 * 2

They both pass.  More generally:

Fn = F(x) Fn<sub>y</sub> + F(y) Fn<sub>x</sub>, for n &gt; x, and y = x - 1

It's not terribly wordier than the original definition, Fn = Fn<sub>1</sub> + Fn<sub>2</sub>, for n &gt; 2.
<h4>Putting this to use</h4>
A nice property of this new version is that it lets us skip some steps.  If we're calculating F(1000) with the traditional definition, we have to calculate each Fibonacci along the way; but now, we can set x = 500, and skip down to the neighborhood of F(500):

F(1000) = F(500) * F(501) + F(499) * F(500)

We can continue to skip down to about n/2, decreasing the amount of calculations we need to do.

Just for fun, I implemented both <code>fib_orig</code> and <code>fib_new</code> in ruby: <a href="{{ site.baseurl }}/assets/2008/03/new_fibonacci_tests.rb">here's the file</a>.  I <a href="http://en.wikipedia.org/wiki/Memoization">memoized</a> the methods, for two reasons:
<ol>
	<li>It's clearly much faster, and it's simple to do.</li>
	<li>It lets us see exactly which Fibonacci numbers were calculated.</li>
</ol>
I put the two methods in a test case, with four test methods.

The first test ensures that the new equation matches the old.  Unfortunately, I could only reach 6000 with the <code>fib_orig</code>, before I ran out of stack space.

The second test benchmarks the two versions.  It reports the memo array size (6000 for <code>fib_orig</code>, as expected, and 40 for <code>fib_new</code> -- 99.3% fewer calculations).

When <code>fib_orig</code> ran out of stack space so quickly, I wondered how far I could take the new version (which should recurse many fewer times).  So in the third test, I benchmarked it with progressively bigger numbers.  It starts to slow down around the million<sup>th</sup> Fibonacci number: it completes in about 12 seconds on my machine.  I suspect it's spending the extra time array-seeking at that point, since the array gets pretty sparse -- the last few non-null array indexes are: 125001 249999 250000 250001 499999 500000 500001 1000000.  Maybe I'll try a hash...

The fourth test is a bit of extra-credit, and a sanity check.  Fn / F(n+1) approaches the <a href="http://en.wikipedia.org/wiki/Golden_ratio">golden ratio</a>, 1.61803398874..., as N approaches infinity.  So I calculated F(1401) / F(1400) with <code>fib_new</code>, and it's accurate to 15 decimal points, rounding the last one, which seems to be the limit of precision on my WinXP machine.  I tried using higher Fibonacci numbers, but was warned that I was exceeding the range of ruby's floating point numbers.  Here's the output of that test:
<pre> actual golden ratio: 1.6180339887498948482
approx. golden ratio: 1.618033988749895
precision-level test: 0.333333333333333</pre>
So it seems the new approach is correct, faster, uses less space, and is still pretty elegant. Who knows whether this will ever come in handy, but at least it was fun to do.

F(n) = F(x) F(n-y) + F(y) F(n-x), for n &gt; x, and y = x - 1]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>75</wp:post_id>
  <wp:post_date>2008-03-22 09:43:47</wp:post_date>
  <wp:post_date_gmt>2008-03-22 13:43:47</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>a-faster-cheaper-fibonacci-definition</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="fibonacci"><![CDATA[fibonacci]]></category>
  <category domain="category" nicename="programming"><![CDATA[Programming]]></category>
  <category domain="post_tag" nicename="ruby"><![CDATA[Ruby]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[292320]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>9378</wp:comment_id>
    <wp:comment_author><![CDATA[Daniel Bernier]]></wp:comment_author>
    <wp:comment_author_email>danbernier@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://invisibleblocks.wordpress.com/</wp:comment_author_url>
    <wp:comment_author_IP>64.252.166.197</wp:comment_author_IP>
    <wp:comment_date>2008-03-30 11:52:59</wp:comment_date>
    <wp:comment_date_gmt>2008-03-30 15:52:59</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Update: if you're interested, you might check this out: http://www.mcs.surrey.ac.uk/Personal/R.Knott/Fibonacci/fibmaths.html

It talks about some similar patterns in the Fibonacci sequence.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>292320</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2008-03-30 15:52:59</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9386</wp:comment_id>
    <wp:comment_author><![CDATA[Robert 'Groby' Blum]]></wp:comment_author>
    <wp:comment_author_email>r.blum@gmx.net</wp:comment_author_email>
    <wp:comment_author_url>http://www.robertblum.com</wp:comment_author_url>
    <wp:comment_author_IP>67.151.201.82</wp:comment_author_IP>
    <wp:comment_date>2008-04-04 14:39:10</wp:comment_date>
    <wp:comment_date_gmt>2008-04-04 18:39:10</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Or just go to <a href="http://en.wikipedia.org/wiki/Fibonacci_number" rel="nofollow">Wikipedia's Fibonacci Entry</a> which covers the <a href="http://en.wikipedia.org/wiki/Fibonacci_number#Identity_for_doubling_n" rel="nofollow">identity you found</a> as well as the <a href="http://en.wikipedia.org/wiki/Fibonacci_number#Computation_by_rounding" rel="nofollow">closed form</a>. (If you really *need* fast fib computation, that would be the choice)]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2008-04-04 18:39:10</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9387</wp:comment_id>
    <wp:comment_author><![CDATA[Sammy Larbi]]></wp:comment_author>
    <wp:comment_author_email>sam@codeodor.com</wp:comment_author_email>
    <wp:comment_author_url>http://www.codeodor.com</wp:comment_author_url>
    <wp:comment_author_IP>76.247.242.117</wp:comment_author_IP>
    <wp:comment_date>2008-04-04 15:27:37</wp:comment_date>
    <wp:comment_date_gmt>2008-04-04 19:27:37</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I think that's known as the matrix method of computing Fibonacci.  You could avoid most of the computation altogether with fib(n) = (n+1)*n/2 ... if I remember correctly, anyway.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2008-04-04 19:27:37</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9388</wp:comment_id>
    <wp:comment_author><![CDATA[Sammy Larbi]]></wp:comment_author>
    <wp:comment_author_email>sam@codeodor.com</wp:comment_author_email>
    <wp:comment_author_url>http://www.codeodor.com</wp:comment_author_url>
    <wp:comment_author_IP>76.247.242.117</wp:comment_author_IP>
    <wp:comment_date>2008-04-04 15:29:03</wp:comment_date>
    <wp:comment_date_gmt>2008-04-04 19:29:03</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Excellent that you derived it, by the way!]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2008-04-04 19:29:03</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9389</wp:comment_id>
    <wp:comment_author><![CDATA[Daniel Bernier]]></wp:comment_author>
    <wp:comment_author_email>danbernier@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://invisibleblocks.wordpress.com/</wp:comment_author_url>
    <wp:comment_author_IP>12.24.127.147</wp:comment_author_IP>
    <wp:comment_date>2008-04-04 16:45:11</wp:comment_date>
    <wp:comment_date_gmt>2008-04-04 20:45:11</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Robert and Sammy, thank you!  I knew this had to be old news.  Maybe I should've read the Wikipedia page, instead of goofing with all those substitutions.  :-)

I love the point made there that performance is more influenced by your platform's handling of really long numbers, since the Fibs get so big so fast.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>292320</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2008-04-04 20:45:11</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9360</wp:comment_id>
    <wp:comment_author><![CDATA[AkitaOnRails]]></wp:comment_author>
    <wp:comment_author_email>fabioakita@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://www.akitaonrails.com</wp:comment_author_url>
    <wp:comment_author_IP>201.52.171.71</wp:comment_author_IP>
    <wp:comment_date>2008-03-23 14:30:50</wp:comment_date>
    <wp:comment_date_gmt>2008-03-23 18:30:50</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[We had a similar discussion a while back here: http://www.mysoftparade.com/blog/ruby-19-doesnt-smoke-python-away/ and we came out with a hash based implementation of Fibonacci in Ruby and Java: here http://pastie.caboo.se/123814 and here http://pastie.caboo.se/123847]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2008-03-23 18:30:50</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9364</wp:comment_id>
    <wp:comment_author><![CDATA[Daniel Bernier]]></wp:comment_author>
    <wp:comment_author_email>danbernier@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://invisibleblocks.wordpress.com/</wp:comment_author_url>
    <wp:comment_author_IP>12.24.127.147</wp:comment_author_IP>
    <wp:comment_date>2008-03-24 11:40:33</wp:comment_date>
    <wp:comment_date_gmt>2008-03-24 15:40:33</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[AkitaOnRails,

Those hash-based implementations use memoization nicely, though from what I saw, they still all use the standard Fibonacci definition.  If you know of anyone who's seen this other version, I'd love to read more about it.

It's too bad that in the Python-v-Ruby discussion, no one mentioned that the Python generator generates the Fibs in -ascending- order (a linear, iterative operation), but the others calculate any Fibonacci number (a tree-based recursive operation).  It's like comparing a weekly allowance to a yearly salary.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>292320</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2008-03-24 15:40:33</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9601</wp:comment_id>
    <wp:comment_author><![CDATA[Update &laquo; lambda.oasis :: cpoucet -&gt; content]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://cpoucet.wordpress.com/2008/04/07/update/</wp:comment_author_url>
    <wp:comment_author_IP>76.74.254.43</wp:comment_author_IP>
    <wp:comment_date>2009-03-13 17:27:56</wp:comment_date>
    <wp:comment_date_gmt>2009-03-13 21:27:56</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[...] fact I've been busy explains the silence on my blog. But here, in the spirit of A Faster Fibonacci here is a quick Haskell version. I will leave the explanation for the other blog post. Basically [...]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2009-03-13 21:27:56</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Hartford Ruby Brigade starts with a tour of Ruby Facets</title>
  <link>http://invisibleblocks.com/2008/03/17/hartford-ruby-brigade-starts-with-a-tour-of-ruby-facets/</link>
  <pubDate>Tue, 18 Mar 2008 02:36:24 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.wordpress.com/?p=76</guid>
  <description/>
  <content:encoded><![CDATA[As <a href="http://rbazinet.wordpress.com/2008/03/15/first-meeting-of-the-hartford-ruby-brigade/">Rob Bazinet has said</a>, the <a href="http://groups.google.com/group/hartford-ruby-brigade">Hartford Ruby Brigade</a> is having its first meeting on March 24.  You can get all the details from his post.  Come join us!  There's even a book raffle.

I'll be giving the first presentation, a tour of <a href="http://facets.rubyforge.org/">Ruby Facets</a>.  Facets is a pretty huge library (even after they moved some really neat parts into <a href="http://blow.rubyforge.org/">their</a> <a href="http://stick.rubyforge.org/">own</a> <a href="http://english.rubyforge.org/">projects</a>), and it's crazy to think we could cover it all in one night.  I'll quickly touch on the simple features, just to let you know they're there, and I'll spend more time with some of the interesting parts.  If you're stuck, it's a good chance Facets has what you need; the trick is knowing it's there, and where to look -- I want to point out enough of Facets to help you with that.

I'll also start a <a href="http://invisibleblocks.wordpress.com/tag/FacetsTour">Tour of Facets</a> series here, starting with this post.  I'm aiming for two to four posts a month, and will cover everything in the presentation, and then some.  So, on with the tour...

<b><i>compare_on</i> and <i>equate_on</i></b>

Remember the first time you saw <code>attr_reader</code> and <code>attr_writer</code>?  These tiny helpers got me excited about ruby, not just because they meant less typing and DRY-er code, but because they meant <i>I</i> could make helpers to generate methods, too, if only I could think of a reason to do it.

Facets has a great example of why you'd want to do that: <code>compare_on</code> and <code>equate_on</code>.

Most ruby programmers know you can make your objects sortable by defining <code>&lt;=&gt;</code>, the spaceship method, on them.  Typically, you wind up delegating to some attribute:

[sourcecode language='ruby']
class Person
   attr_reader :fname, :lname
   def initialize(fname, lname)
      @fname, @lname = fname, lname
   end
   def <=>(person)
      @lname.<=>(person.lname)
   end
end[/sourcecode]
Facets adds <code>compare_on</code>, which generates the spaceship method for you, based on that attribute.  Not only that, but you can <code>compare_on</code> multiple fields, and it handles the hairy logic for you automatically:
[sourcecode language='ruby']
require 'facets/compare_on'

class Person
   attr_reader :fname, :lname
   def initialize(fname, lname)
      @fname, @lname = fname, lname
   end
   compare_on :lname, :fname
end

people = []
people.push Person.new('Adam', 'Smith')
people.push Person.new('John', 'Adams')

people.sort #=> John Adams, Adam Smith[/sourcecode]
Correctly implementing the spaceship operator isn't too hard, but object equality gets tricky in any language.  Facets helps you here by implementing ruby's main three equality methods for you: <code>==</code>, <code>eql?</code>, and <code>hash</code>.
[sourcecode language='ruby']
require 'facets/compare_on'

class Person
   attr_reader :fname, :lname
   def initialize(fname, lname)
      @fname, @lname = fname, lname
   end
   equate_on :lname, :fname
end

a_pres = Person.new('John', 'Adams')
another_pres = Person.new('John', 'Adams')
[a_pres].include?(another_pres) #=> true[/sourcecode]
Again, you can equate on multiple attributes (<code>fname</code> and <code>lname</code>), and it handles all the details for you. Hope to see you at the Hartford Ruby Brigade!]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>76</wp:post_id>
  <wp:post_date>2008-03-17 22:36:24</wp:post_date>
  <wp:post_date_gmt>2008-03-18 02:36:24</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>hartford-ruby-brigade-starts-with-a-tour-of-ruby-facets</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="facetstour"><![CDATA[FacetsTour]]></category>
  <category domain="post_tag" nicename="hartfordrb"><![CDATA[Hartford.rb]]></category>
  <category domain="category" nicename="programming"><![CDATA[Programming]]></category>
  <category domain="post_tag" nicename="ruby"><![CDATA[Ruby]]></category>
  <category domain="category" nicename="ruby-facets-tour"><![CDATA[Ruby Facets Tour]]></category>
  <category domain="post_tag" nicename="rubyfacets"><![CDATA[RubyFacets]]></category>
</item>
<item>
  <title>Ruby Facets: Symbol.to_proc, Class.to_proc</title>
  <link>http://invisibleblocks.com/2008/03/28/ruby-facets-symbolto_proc-classto_proc/</link>
  <pubDate>Fri, 28 Mar 2008 16:52:57 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.wordpress.com/?p=77</guid>
  <description/>
  <content:encoded><![CDATA[One pretty well-know idiom in Ruby, and <a href="http://facets.rubyforge.org/">Facets</a>, is <code>Symbol.to_proc</code>.  It lets you turn these:

[sourcecode language='ruby']
[1, 2, 3].map { |num| num.next }  #=> [2, 3, 4]

%w[alpha beta gamma].map { |word| word.upcase }
#=> ["ALPHA", "BETA", "GAMMA"][/sourcecode]
...into these:
[sourcecode language='ruby']
[1, 2, 3].map(&:next)
%w[alpha beta gamma].map(&:upcase)[/sourcecode]
It's a nice little trick, though it's not to everyone's taste.  If you're already comfortable with <code>Symbol.to_proc</code>, you can skip down to the <code>Class.to_proc</code> section.  But if you're not, it's worth a minute of your attention to learn it.  Read on...
<h3>How it's done</h3>
When a method takes a block, you can call yield, to run the block.
[sourcecode language='ruby']
def with_a_block(a_param)
    yield
end
with_a_block('param') {
    puts 'in the block'
}[/sourcecode]
Or, you can name the block as the last parameter to the method, and put an ampersand in front of it.  The ampersand makes ruby convert the block to a procedure, by calling <code>to_proc</code> on it.  (So any object with a <code>to_proc</code> method can work this way, if you want.)  This example works just like the last one:
[sourcecode language='ruby']
def named_block(a_param, &blk)
    blk.call
end
named_block('my_param') {
    puts 'in the named block'
}[/sourcecode]
Symbol's <code>to_proc</code> method creates a procedure that takes one argument, and sends the symbol to it.  Sending a symbol to an object is the same as calling a method on it:  <code>object.send(:method)</code> works the same as <code>object.method</code>.  In the earlier <code>upcase</code> example, each word is passed to a procedure that calls <code>upcase</code> on it, giving us a list of uppercased strings.
[sourcecode language='ruby']
&:upcase
# becomes...
lambda { |obj|
    obj.send(:upcase)
}
# or...
lambda { |obj|
    obj.upcase
}[/sourcecode]
<h3>Class.to_proc</h3>
So <code>Symbol.to_proc</code> creates a function that takes an argument, and calls that method on it.  <code>Class.to_proc</code> creates a function that passes its argument to its constructor, yielding an instance of itself.  This is a welcome addition to the <code>to_proc</code> family.
[sourcecode language='ruby']
require 'facets'

class Person
    def initialize(name)
        @name = name
    end
end
names = %w[mickey minney goofy]
characters = names.map(&Person)

puts characters.inspect

&Person
# becomes...
lambda { |obj|
    Person.new(obj)
}[/sourcecode]

<h3>Why it's nice</h3>

* It's fewer characters -- it <a href="http://people.csail.mit.edu/gregs/ll1-discuss-archive-html/msg01552.html">semantically compresses</a> your code.
* It lets you think, <i>makes</i> you think, on a higher level.  You think about operations on your data, rather than handling one item at a time.  It raises your level of thinking.
* It works with <a href="http://weblog.raganwald.com/2007/01/closures-and-higher-order-functions.html">first-class functions</a>, which are worth understanding.  They give you <a href="http://blog.grayproductions.net/categories/higherorder_ruby">new ways to elegantly solve some problems</a> (well, new to some audiences).  They're not fringe anymore -- they've been in C# since v2.0.
]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>77</wp:post_id>
  <wp:post_date>2008-03-28 12:52:57</wp:post_date>
  <wp:post_date_gmt>2008-03-28 16:52:57</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>ruby-facets-symbolto_proc-classto_proc</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="facetstour"><![CDATA[FacetsTour]]></category>
  <category domain="category" nicename="functional-programming"><![CDATA[Functional Programming]]></category>
  <category domain="category" nicename="programming"><![CDATA[Programming]]></category>
  <category domain="post_tag" nicename="ruby"><![CDATA[Ruby]]></category>
  <category domain="category" nicename="ruby-facets-tour"><![CDATA[Ruby Facets Tour]]></category>
  <category domain="post_tag" nicename="rubyfacets"><![CDATA[RubyFacets]]></category>
  <wp:comment>
    <wp:comment_id>9373</wp:comment_id>
    <wp:comment_author><![CDATA[Avdi]]></wp:comment_author>
    <wp:comment_author_email>avdi@avdi.org</wp:comment_author_email>
    <wp:comment_author_url>http://avdi.org</wp:comment_author_url>
    <wp:comment_author_IP>71.58.194.193</wp:comment_author_IP>
    <wp:comment_date>2008-03-29 01:26:44</wp:comment_date>
    <wp:comment_date_gmt>2008-03-29 05:26:44</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Just to be pedantic, Symbol#to_proc is not part of Ruby 1.8, which is still the most commonly used version.  Did you mean "One pretty well-known idiom in *Rails*, and in Facets..."?

Class#to_proc does indeed look handy.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2008-03-29 05:26:44</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9377</wp:comment_id>
    <wp:comment_author><![CDATA[Daniel Bernier]]></wp:comment_author>
    <wp:comment_author_email>danbernier@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://invisibleblocks.wordpress.com/</wp:comment_author_url>
    <wp:comment_author_IP>64.252.166.197</wp:comment_author_IP>
    <wp:comment_date>2008-03-30 11:42:54</wp:comment_date>
    <wp:comment_date_gmt>2008-03-30 15:42:54</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Avdi, that's a good point, and you're 100% correct...I was being a bit loose with my language.  Maybe I should have said "One pretty well-known idiom in Ruby, FROM Rails and Facets..."

I guess I think of Symbol.to_proc as a Ruby idiom, because:  it's useful in any Ruby code, it's easy to implement yourself w/o any libraries, it's built into both Rails and Facets, and it's part of Ruby 1.9.

But for the record, to any others who might be confused: if you want to use Symbol.to_proc in Ruby 1.8, you need to require facets, or work in Rails, or implement Symbol.to_proc yourself.  Hint:

class Symbol
  def to_proc
    Proc.new{|*args| args.shift.__send__(self, *args)}
  end
end
# copied from Facets v2.3.0

Avdi, thanks for keeping me honest.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>292320</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2008-03-30 15:42:54</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9421</wp:comment_id>
    <wp:comment_author><![CDATA[Nikos D.]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://nikos-d.blogspot.com/2008/04/tiny-but-maybe-important-rubinius.html</wp:comment_author_url>
    <wp:comment_author_IP>72.9.234.70</wp:comment_author_IP>
    <wp:comment_date>2008-04-19 13:11:49</wp:comment_date>
    <wp:comment_date_gmt>2008-04-19 17:11:49</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[<strong>Tiny (but maybe important) Rubinius tidbits...</strong>

As you play with a tool you progressively discover various small tidbits about it. I have a few in mind and I thought it would helpful to share them in case you encounter them and get this weird expression on your face of "huh?".
1. The multiple ass...]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>trackback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2008-04-19 17:11:49</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9440</wp:comment_id>
    <wp:comment_author><![CDATA[Eliminating code duplication with metaprogramming &laquo; require &#8216;brain']]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://szeryf.wordpress.com/2008/06/05/eliminating-code-duplication-with-metaprogramming/</wp:comment_author_url>
    <wp:comment_author_IP>72.232.101.88</wp:comment_author_IP>
    <wp:comment_date>2008-06-05 07:23:55</wp:comment_date>
    <wp:comment_date_gmt>2008-06-05 11:23:55</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[...] if we (ab)use the Symbol#to_proc idiom (and forsake a little bit of readability), we can shorten it further [...]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2008-06-05 11:23:55</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Explaining Cosmic Wimpout</title>
  <link>http://invisibleblocks.com/?p=79</link>
  <pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.wordpress.com/?p=79</guid>
  <description/>
  <content:encoded><![CDATA[

http://www.cosmicwimpout.com/howtoplay.html

<img src="http://www.cosmicwimpout.com/uploads/halfmoons.gif" alt="" />
<img src="http://www.cosmicwimpout.com/uploads/pyramids.gif" alt="" />
<img src="http://www.cosmicwimpout.com/uploads/starburst.gif" alt="" />
<img src="http://www.cosmicwimpout.com/uploads/five.gif" alt="" />
<img src="http://www.cosmicwimpout.com/uploads/stars.gif" alt="" />
<img src="http://www.cosmicwimpout.com/uploads/ten.gif" alt="" />
<img src="http://www.cosmicwimpout.com/uploads/flamingsun.gif" alt="" />

Cosmic Wimpout is a really fun dice game. The rules are very easy, once you've learned them, but they're hard to explain. Watching people try, several times, has led me to conclude:
<ul>
	<li><strong>The more often a rule comes into play, the earlier you should explain it</strong>
or</li>
	<li><strong>Explain exceptions last</strong></li>
</ul>
Here's my shot at explaining Cosmic Wimpout:
<ul>
	<li>You have 5 6-sided dice.  They have a 5 and a 10, as digits, and symbols for 2, 3, 4, and 6.</li>
	<li>Throw the dice.  You score 5 points for any 5s, 10 points for 10s, and no points for symbols.</li>
	<li>If you throw dice, and don't score on any of them, your turn ends, and you lose all the points you earned that turn.</li>
	<li>If you score on at least one die, you can re-roll the rest for more points. Or you can stop, and put your points "on the board". You need at least 35 points on the board to stop.</li>
	<li>If you score with all 5 dice, you keep those points, and then you <span class="caps">MUST</span> re-throw them all.</li>
	<li>If you roll 3 of a kind (digit or symbol), it's called a "flash". You score 10 times the value: so 3 2s = 20 points, 3 5s = 50 points, etc. You then <strong>must</strong> "clear the flash"—roll the non-scoring dice until none of them come up with the flashed value—and score the roll normally: points for 5s and 10s, no points for symbols. If you roll no points after clearing a flash, you still lose all the points for that turn.</li>
	<li>If you roll 5 of a kind, it's a "freight train," and you get 100 times the value. 2 exceptions: if you roll 5 6's, you win the game, instantly; if you roll 6 10's, a "supernova", you are instantly out of the game. It's "Too Many Points".</li>
	<li>4 of the dice are white; the 5th is black, and has a sun instead of the 2. The sun is wild, and can count as any symbol or number, but if you roll a pair and the sun, the sun <strong>must</strong> count as that value, to form the flash.</li>
</ul>
A few things to notice:
<ul>
	<li>I explained the "wild" flash rule last, because it only applies to flashes. Most people I've watched explain the flash when they describe the dice, but it doesn't really matter until then.</li>
	<li>I explained the "flash" later than most people.</li>
</ul>
There is a connection here to software. Software emulates concepts, and lets users manipulate those concepts. Files, email, documents, URLs (delicious, reddit, digg), songs (iTunes), etc. To explain the software, what it is, and what it lets you do, you first have to explain the concepts, then the ways they can be manipulated. Starting with the manipulations, and explaining the concepts along the way, will probably be confusing.

Chris Crawford talks about stuff like this <a href="http://www.watercoolergames.org/archives/000916.shtml">here</a>
]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>79</wp:post_id>
  <wp:post_date>0000-00-00 00:00:00</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="learning"><![CDATA[Learning]]></category>
  <category domain="category" nicename="software-thinking"><![CDATA[Software Thinking]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[292320]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>How FP'ers get around immutability</title>
  <link>http://invisibleblocks.com/?p=80</link>
  <pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.wordpress.com/?p=80</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>80</wp:post_id>
  <wp:post_date>0000-00-00 00:00:00</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[292320]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Randomness in Unit Tests</title>
  <link>http://invisibleblocks.com/?p=84</link>
  <pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.wordpress.com/?p=84</guid>
  <description/>
  <content:encoded><![CDATA[I think I'll leave this here as a reminder to myself of the thought process I went through.



Suppose you want to unit this method:

[sourcecode language='ruby']
class Door
  def status
    return :open if open?
    if locked? :locked : :unlocked
  end
end
[/sourcecode]

Just modeling a door: it can be open or closed, and locked or unlocked, but if it's open, it can't be locked.  (Assume <code>open?</code> is defined, etc.)  So, if the door is open, it'll return <code>:open</code> regardless of whether it's locked.  We could unit test it like this:

[sourcecode language='ruby']
def test_status
  assert_equal(:open, Door.new(:open, :unlocked))
end
[/sourcecode]

Or, if we're more ambitious:

[sourcecode language='ruby']
def test_status
  assert_equal(:open, Door.new(:open, :unlocked))
  assert_equal(:open, Door.new(:open, :locked))
end
[/sourcecode]

It's nice to test with both <code>:unlocked</code> and <code>:locked</code>, because the tests indicate what we said before:  if it's open, it'll return <code>:open</code> regardless of whether it's locked.

It'd be nice if we could make that indifference part of the unit tests, without having to manually write each test.



Aside: if :locked or :unlocked is really irrelevant to Door's constructor, then it shouldn't BE on the constructor like that.  It should only be passable if the 1st param is :open.  If you find yourself facing these kinds of questions, maybe it's a design smell.


Bottom line: if you're gonna do the randomness thing, you'll have to list out all the values, so it knows what to pick from.  Instead of saying "pick ONE of these," just say "for EACH of these."  If you can't put them in an array, that's a different problem.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>84</wp:post_id>
  <wp:post_date>2008-12-22 13:41:21</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="programming"><![CDATA[Programming]]></category>
  <category domain="category" nicename="software-thinking"><![CDATA[Software Thinking]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[292320]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Calling Methods On the Function Class</title>
  <link>http://invisibleblocks.com/?p=87</link>
  <pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.wordpress.com/?p=87</guid>
  <description/>
  <content:encoded><![CDATA[Blog post idea, about functional programming and ruby and JavaScript.
Functions are objects, if you call messages on them, which lets you
define functions on function literal. You can do this and functional
programming languages. But it's different, because you pass a function
literal to function. What patterns does this allow?

Blog post idea, talking about functional programming and Ruby and
JavaScript. Functions are objects which means that you can define
methods on the function class or on the Proc class. And then you can
call those methods on function literals. You can do stuff like this in
functional programming languages, but instead of calling the method on
the function literal, you're passing the function literal to some
other function.

Some examples. Java script cycle. No that's wrong, RubyRobot, the RAM
module, the acting thing that you did. Also JavaScript, report
previews - delay - at software impression.

Credit to Oliver Steele
link to Dave Thomas' thing on Fibers?

--------------------------------------------------------------

In Ruby and JavaScript, functions are objects.  In Ruby, they're instances of the Proc class; in JavaScript, their prototype is Function.  Like any other object, they can have methods.

It can be weird, at first, writing methods for functions.  (Like, aren't they the same thing, kinda?)  But once you have the idea, you can do some pretty neat things with it.

To get started, consider a greeting function.

[sourcecode language='ruby']
# ruby
greeting = lambda { puts "Hola, capitan!" }
greeting.call()   #-> prints the greeting
[/sourcecode]
[sourcecode language='javascript']
// javascript
var greeting = function() { print("Hola, capitan!") }
greeting()
[/sourcecode]

Now what if el capitan has a rough night, and only every other crew member is brave enough to greet him?  We want greeting to do its thing only half the time.  Simple enough:

[sourcecode language='ruby']
# ruby
i = 0
greeting = lambda do
   puts "Hola, capitan!" if i % 2 == 0
   i += 1
end
4.times { greeting.call }  #-> only greets him twice
[/sourcecode]
[sourcecode language='javascript']
// javascript
i = 0
var greeting = function() {
   if (i % 2 == 0)
      print("Hola, capitan!")
   i += 1
}
greeting()  //-> greets him
greeting()  //-> stays quiet
[/sourcecode]

It's not horrible, but the "every other time" is tangled up with the "greet".  Let's make a method that takes our function, and returns <i>another</i> function, one that calls our original function every other time it's called.

[sourcecode language='ruby']
# ruby
def every_other_time
   i = 0
   lambda do
      yield if i % 2 == 0
      i += 1
   end
end
greeting = every_other_time { puts "Hola, capitan!" }
4.times { greeting.call }  #-> still greets him only twice!
[/sourcecode]
[sourcecode language='javascript']
// javascript
function everyOtherTime(theThingToDo) {
   var i = 0
   return function() {
      if (i % 2 == 0)
         theThingToDo()
      i += 1
   }
}
var greeting = everyOtherTime(function() { print("Hola, capitan!") })
[/sourcecode]

everyOtherTime is a method that takes a function (theThingToDo), and returns a new function.  This new function will call theThingToDo only half the time.  Lambdas and functions are <a href="http://en.wikipedia.org/wiki/Closure_(computer_science)">closures</a>, so we can pack the counter variable, i, into a method, and each function instance returned by the method will track its own counter.

<h3>Enter the Monkeypatch</h3>

Now this isn't too bad.  It's a little weird that everyOtherTime is out there in the middle of nowhere, though.  Let's go one controversial step further, and add it right into the Function prototype/Proc class.  This is <a href="http://en.wikipedia.org/wiki/Monkey_patch">monkey patching</a>, and a bit dangerous, but we're just exploring.

[sourcecode language='ruby']
# ruby
class Proc
   def every_other_time
      i = 0
      the_thing_to_do = self
      lambda do
         the_thing_to_do.call if i % 2 == 0
         i += 1
      end
   end
end
greeting = lambda { puts "Hola, capitan!" }.every_other_time
[/sourcecode]
[sourcecode language='javascript']
// javascript
Function.prototype.everyOtherTime = function() {
   var i = 0
   var theThingToDo = this
   return function() {
      if (i % 2 == 0)
         theThingToDo()
      i += 1
   }
}
var greeting = function() { print("Hola, capitan!") }.every_other_time()
[/sourcecode]



The general pattern of this technique is:
<ol>
<li>A method defined on Function or Proc, that
<li>names a reference to itself (the thing to do), and
<li>returns a function that closes over the named reference.
<li>That new function will change the way the thing to do is called, and do some stuff before and/or after it.  It might even <i>not</i> call the thing to do.
</ol>

<h4>Aside: JavaScript versus Ruby for passing function parameters</h4>

I think monkey patching the Function prototype in JavaScript makes it much nicer, because JavaScript's syntax for function literals is not so hot.  The Ruby version picked up an extra token, because Ruby has the block syntax, which is basically a shortcut for passing a function literal to a method.  On the other hand, JavaScript makes it much nicer to pass around functions as variables:

[sourcecode language='ruby']
# ruby
greetElCapitan = lambda { puts "Hola, capitan!" }
greeting = everyOtherTime(&greetElCapitan)
[/sourcecode]
[sourcecode language='javascript']
// javascript
var greetElCapitan = function() { print("Hola, capitan!") }
var greeting = everyOtherTime(greetElCapitan)
[/sourcecode]

Why the ampersand in Ruby?  Ruby follows the design philosophy of making common things easy to do.  Matz felt that passing an anonymous function to a method was so important, he added the block syntax to make it easy to do, and sure enough, this style of programming is classic Ruby.  But a <a href="http://eli.thegreenplace.net/2006/04/18/understanding-ruby-blocks-procs-and-methods/">block isn't quite a Proc</a>:  it's it's own syntactic element, and it gets turned into a Proc, on the way into the method.  To pass a Proc to a method that expects a block, you have to prepend it with the ampersand.  (This is the secret mojo behind the famous Symbol.to_proc trick.)

THOUGHT:  MAYBE, INSTEAD OF BEATING EL CAPITAN TO DEATH, TRY SOME OTHER EXAMPLES?  LIKE, USEFUL ONES.  YOU CAN COMPARE &amp; CONTRAST DIFFERENT STYLES WITH THEM, INSTEAD OF USING THIS SAME ONE OVER &amp; OVER.

A more useful example is "memoization":http://osteele.com/archives/2006/04/javascript-memoization.

--
In general, when you have a function that does something simple that you care about, and you want to change it in some way that makes you think "ah crap, this has NOTHING to do with what the method does, and now all this crap code will be littered all throughout my method," it might be time for this approach.







-------------------------------------------------------

I once worked on some report software that showed a preview of the output you'd get, based on your current options, so you didn't have to run the whole query, just to find you wanted a different format.  It was a lot of crazy JavaScript, generating HTML and CSS and ramming it into a spot on the page, on each change of a form input.  When we laid out the page, we took advantage of the full width of the browser, so if the user resized the browser, we wanted to re-generate the output.  But the whole process took up to three seconds, depending on your options, and since the resize event fires continuously, just setting <code>window.onresize</code> to our function would lock up the browser for a while.

We needed the function to run only intermittently -- we needed it to wait some milliseconds, before running, and then keep .  We probably could have added timeout code to the beginning of the function, ]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>87</wp:post_id>
  <wp:post_date>0000-00-00 00:00:00</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="functional-programming"><![CDATA[Functional Programming]]></category>
  <category domain="category" nicename="programming"><![CDATA[Programming]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[292320]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Review: Design Patterns in Ruby</title>
  <link>http://invisibleblocks.com/?p=139</link>
  <pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.wordpress.com/?p=139</guid>
  <description/>
  <content:encoded><![CDATA[The patterns are presented in a sensible fashion, introducing both OO concepts and ruby syntax and semantics a bit at a time, building on what came before.

Each pattern is illustrated with ruby code written Java-style, and then a new ruby feature is explained that lets you boil it down nicely.

The examples are practical, and relate well to real-world development.  The UML is more standard, and the code samples are easier to read than the GoF's Smalltalk...but that's probably because I know ruby, and not Smalltalk.



--
On a side-note, this is the first book I've read all on O'Reilly's Safari.  I took a new job in March, and the company pays for my Safari.  To a scatter-brain like me, the chance to read from ten books, and not pay for, or carry, one of them, is nice.  My only gripe is that it could use a hot-key to turn the 'pages'.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>139</wp:post_id>
  <wp:post_date>2013-12-31 10:38:18</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="book-review"><![CDATA[Book Review]]></category>
  <category domain="category" nicename="recommended-reading"><![CDATA[Recommended Reading]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[292320]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Variable capture in closures, in JavaScript, C#, and Ruby</title>
  <link>http://invisibleblocks.com/?p=153</link>
  <pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.wordpress.com/?p=153</guid>
  <description/>
  <content:encoded><![CDATA[see gmail for files for this post...

"I created some functions in a loop, but when I run them, their variable values are all wrong!  What's going on?"

The problem is probably that your functions are closing over a variable that changes as you go through the loop, so when you run the functions, you get the <em>latest</em> value for that variable, rather than the value it had when the function was created, inside the loop.  Let's break that down.

What's a closure?

If you already know about closures, you can skip down to "...".

In many languages with first-class functions (a.k.a. anonymous functions, lambdas, procs, or delegates), the functions can refer to variables that were in scope when the function was created.  In technical terms, they "close over" those variables, which is why they're called <em>closures</em>.  For example:

[sourcecode language='javascript']
function makeGreeter(greeting) {
    return function(name) {
        return greeting + ', ' + name;
    };
}
[/sourcecode]

<code>makeGreeter</code> takes a reference named <code>greeting</code>, and returns a function that greets people by name.  When you call <code>makeGreeting</code>, you do not get a greeting, you get a greeter.  Apologies:

[sourcecode language='javascript']
var walmartGreeter = makeGreeter('Welcome to Wal-mart');
walmartGreeter('Dan');  // 'Welcome to Wal-mart, Dan';
walmartGreeter('Bub');  // 'Welcome to Wal-mart, Bub';
[/sourcecode]

It's as if you'd just written this:

[sourcecode language='javascript']
function walmartGreeter(name) {
    var greeting = 'Welcome to Wal-mart';
    return greeting + ', ' + name;
}
[/sourcecode]

But <code>makeGreeter</code> can make <em>other</em> greeters, too:

[sourcecode language='javascript']
var religious = makeGreeter('Merry Christmas');
var generic = makeGreeter('Happy Holidays');

religious('Dan');  // 'Merry Christmas, Dan'
generic('Bub');  // 'Happy Holidays, Bub'
[/sourcecode]

JavaScript has a neat feature: you can get the code for any function via <code>toString()</code>.  If we take a peek at  <code>walmartGreeter.toString()</code>, it looks like this:

[sourcecode language='javascript']
function (name) {
    return greeting + ", " + name;
}
[/sourcecode]

It looks like a normal function -- except <code>greeting</code> isn't defined anywhere.  The trick is, <code>greeting</code> was in scope when this function was created, inside <code>makeGreeter</code>.  The function still holds a reference to greeting, just like an object holds a reference.  And because it's a reference, if the value it points to <em>changes</em>, this function will see the changes, too.  Let's try it:

[sourcecode language='javascript']
var sillyGreeting = "Hey there";
var greeter = makeGreeter(sillyGreeting);
greeter("Dan") // "Hey there, Dan"
sillyGreeting += ", hi there, ho there"
greeter("Dan") // "Hey there, hi there, ho there, Dan"
[/sourcecode]

...whoops, that one doesn't work.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>153</wp:post_id>
  <wp:post_date>2009-02-25 10:43:05</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="functional-programming"><![CDATA[Functional Programming]]></category>
  <category domain="category" nicename="programming"><![CDATA[Programming]]></category>
  <category domain="post_tag" nicename="ruby-c-javascript"><![CDATA[ruby c# javascript]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[292320]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Counting Hexagons</title>
  <link>http://invisibleblocks.com/?p=198</link>
  <pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.wordpress.com/?p=198</guid>
  <description/>
  <content:encoded><![CDATA[<h2>I don't think I should publish this, until I can figure out what I'm really contributing.  Is it just the paper?  Then a short post will do.</h2>
If you arrange hexagons (or circles) in a honey-comb pattern, in a hexagon shape, how do you find the total number of hexagons by counting the number along one edge?

<a href="http://farm2.static.flickr.com/1367/1344221289_67dd12bb87.jpg"><img class="alignnone" title="Circles in a hexagon pattern" src="http://farm2.static.flickr.com/1367/1344221289_67dd12bb87.jpg" alt="" width="500" height="375" /></a>

That hex has 5 circles on an edge, and  61 circles total.  What's the relationship?

Of course the answer is out there somewhere on <a href="http://mathworld.wolfram.com/CirclePacking.html">mathworld</a> or <a href="http://en.wikipedia.org/wiki/Circle_packing">wikipedia</a>, but I wanted to find it myself: play with the problem, walk around it, look at it, try different approaches, and solve it myself.  Get the shape of the problem <a href="http://www.paulgraham.com/head.html">in my head</a>.  It was a fun way to spend a couple of hours.



Working on the problem like this reminded me of <a href="http://www.maa.org/devlin/LockhartsLament.pdf">A Mathematician's Lament</a>, an essay that says we teach math the wrong way -- we make kids memorize formulas, but we should teach them to solve problems, and to judge solutions. Show them they can solve well-known problems on their own, give them a feel for how different approaches affect the solution: let them develop a sense of aesthetics.  Instead of a dry, rigid, already-charted mathematics, show them a rich, subjective, contextual one.

This article often comes to mind when I think about software.  How solution 

"By concentrating on what, and leaving out why, mathematics is reduced to an empty shell. The art is not in the 'truth' but in the explanation, the argument."

The author, Paul Lockhart, is a research mathematician, and K-12 math teacher.

At times, it can go a bit far. Some parts are written as a dialogue between Simplicio, the conservative pragmatist, and Salviati, the idealistic, enthusiastic reformer:
<blockquote>SIMPLICIO:  It seems like we'd be taking an awful risk.  What if we de-emphasize arithmetic so much that our students end up not being able to add and subtract?

SALVIATI:  I think the far greater risk is that of creating schools devoid of creative expression of any kind, where the function of the students is to memorize dates, formulas, and vocabulary lists, and then regurgitate them on standardized tests—"Preparing tomorrow's workforce today!"</blockquote>
But the main point is good, and anyway, it's worth reading something you disagree with now and then.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>198</wp:post_id>
  <wp:post_date>2009-01-06 21:48:02</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[292320]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Back from the 2009 Int'l Lisp Conference</title>
  <link>http://invisibleblocks.com/?p=234</link>
  <pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.wordpress.com/?p=234</guid>
  <description/>
  <content:encoded><![CDATA[Well, I'm back.  It was a fantastic conference.

Hanging out in the MIT Stata Center was very cool.  

The debate on whether macros are a menace was good, especially when it veered into Gerald Sussman's explanation of why MIT no longer uses scheme as the language for their "intro to CS" course, <a href="http://ocw.mit.edu/OcwWeb/Electrical-Engineering-and-Computer-Science/6-001Spring-2005/CourseHome/index.htm">6.001</a> (you can read <a href="http://blog.snowtide.com/2009/03/24/why-mit-now-uses-python-instead-of-scheme-for-its-undergraduate-cs-program">Chas' excellent summary</a>).

Seeing <a href="http://sgouros.com/">Judy the Robot</a> at the banquet was entertaining...parts of it reminded me of <em><span style="font-style:normal;"><a href="http://www.amazon.com/gp/product/0465026567?ie=UTF8&amp;tag=invisblock-20&amp;link_code=as3&amp;camp=211189&amp;creative=373489&amp;creativeASIN=0465026567">Gödel</a></span></em><a href="http://www.amazon.com/gp/product/0465026567?ie=UTF8&amp;tag=invisblock-20&amp;link_code=as3&amp;camp=211189&amp;creative=373489&amp;creativeASIN=0465026567">, </a><em><span style="font-style:normal;"><a href="http://www.amazon.com/gp/product/0465026567?ie=UTF8&amp;tag=invisblock-20&amp;link_code=as3&amp;camp=211189&amp;creative=373489&amp;creativeASIN=0465026567">Escher</a></span></em><a href="http://www.amazon.com/gp/product/0465026567?ie=UTF8&amp;tag=invisblock-20&amp;link_code=as3&amp;camp=211189&amp;creative=373489&amp;creativeASIN=0465026567">, Bach</a>.

The technical papers and presentations were really good.  People are doing real work out there with Lisp, in some interesting domains:
<ul>
	<li>scientific computation, for physics simulations, and restoring old films</li>
	<li>recommending related books, movies, and music, based on connections between authors, actors, musicians, and technical crew</li>
	<li>expert systems that decide when to apply pesticides</li>
	<li>software that helps design <a href="http://en.wikipedia.org/wiki/System_in_package">systems-in-package</a></li>
</ul>
There were also a number of papers about new kinds of computation: propagators, parallelism, 

Sriram Krishnamurthi's talk on MobyScheme and the <a href="http://www.bootstrapworld.org/">Bootstrap</a> project were interesting...<a href="http://www.cs.brown.edu/~sk/Publications/Talks/Moby-Bootstrap/">see the slides, get the audio</a>.  The Bootstrap project is very interesting...a project that gets kids to say "I need to learn <em>more math</em> to make my game better" is doing something right.

It was my first sight of a lot of the Lisp community, and it was informational.  The panel discussion on the future of Lisp, "the next 50 years," seemed to revolve around the question, "do we want Lisp to be popular?"  Given <a href="http://clojure.org">Clojure's</a> recent popularity, it wasn't surprising that there was some heat over whether the JVM and CLR were worth notice.  There seems to be some particular sources of anti-Java prejudice out there, and elitism.

I'll post links here as I learn of materials coming on-line.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>234</wp:post_id>
  <wp:post_date>2009-03-27 13:43:17</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[292320]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Personal Design Rules</title>
  <link>http://invisibleblocks.com/?p=491</link>
  <pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.com/?p=491</guid>
  <description/>
  <content:encoded><![CDATA[<a href="http://blog.hasmanythrough.com/">Josh Susser</a> suggested that the <a href="http://rubyrogues.com/">ruby rogues</a> spend an <a href="http://rubyrogues.com/personal-design-rules/">episode on personal design rules</a> that  they find useful.

Some of my own, mostly about MVC controllers:

Controller private methods should only act on their parameters, and only return values - don't get or set @vars.

Its corollary: Controller actions are all about application flow: no persistence or complicated logic.

Controllers shouldn't call ActiveRecord methods on models directly (cribbed from Corey Haines). This can be generalized to, Controllers shouldn't query the database directly - they should ask the Model for everything. (Even though Rails models have ActiveRecord methods, that doesn't count.)

The same goes for partials: a partial is basically a method that only returns markup. It can take parameters via :locals=&gt;{}, and it should rely on those in preference to relying on @member_variables.

As I'm writing these down, I'm remembering times I've read someone else' checklist, and dreaded trying to remember it all, and wondering why I should care. So here are some benefits for these:

The more your code relies on other parts of the app, the more you have to think about, when reading or changing that code.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>491</wp:post_id>
  <wp:post_date>2011-11-20 22:48:32</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[292320]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>ActiveRecord and Repositories</title>
  <link>http://invisibleblocks.com/?p=586</link>
  <pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.com/?p=586</guid>
  <description/>
  <content:encoded><![CDATA[<a href="http://blog.steveklabnik.com/posts/2012-05-07-mixins--a-refactoring-anti-pattern">Mixins: A refactoring anti-pattern</a>, <em>wherein Steve Klabnik proposes using Repositories</em>

Related Klabnik, but not what I was looking for:
http://blog.steveklabnik.com/posts/2011-09-22-extracting-domain-models-a-practical-example
http://blog.steveklabnik.com/posts/2011-09-06-the-secret-to-rails-oo-design
http://blog.steveklabnik.com/posts/2011-09-09-better-ruby-presenters
http://blog.steveklabnik.com/posts/2011-12-30-active-record-considered-harmful

My old post, Falling Out of Love with ActiveRecord:
http://invisibleblocks.com/2012/05/08/out-of-love-with-active-record/

~ ~ ~
Maybe the problem is that we're conflating - <a href="http://www.infoq.com/presentations/Simple-Made-Easy">complecting</a> - our ActiveRecord models with our ActiveRecord repositories. Maybe, instead of Model.scope.scope.scope, or Model.class_method, we should have Repo.scope.scope.scope and Repo.class_method. The pain point in testing your Model always is the point where we have to persist it - it tests out so nice, so fast, until we have to smear ActiveRecord all through it. Why subclass it? I mean, ok, we want our magic column methods, but those should be written against an in-memory hash, not a database connection. It seems like we want to test <em>instances</em> of our model classes - a Blog, a Post, a User - but the <em>class-level</em> behavior gets in the way - querying, loading, persisting. Put another way, we want to test the behavior of our objects, but we want to declare how they're persisted. Persistence &amp; behavior are two different concerns - we shouldn't tie them together. We could have ActiveRecord::Base be basically that hash-wrapper, and have a separate class, maybe ActiveRecord::Repository, that gives us our scopes and finders.

~ ~ ~
I used to live in the world of .Net- and NHibernate-style DDD, where we designed our domain objects without much regard for their persistence (we configured mappings for that), and we designed the methods on our repositories with care for how, and when, it loaded which parts of our domain objects, because you wrote them all by hand, and you don't want tons of them floating around, muddying up the Repository's API. The really nice part about this arrangement was that the domain classes had no connection to NHibernate, and they were trivial to test. We didn't test our repositories, because they had only a few methods that just called the NHibernate API. We didn't test our mappings, because we just configured NHibernate to do it correctly. The sucky part about it was that we had to <em>manually</em> write out these mapping files, because C# doesn't metaprogram. And each repository's API was designed from scratch, with care, method by method, manually, with inconsistencies always creeping in, because we didn't have scopes and convention-over-configuration to help. Separation made our models testable, but no metaprogramming made repositories hard to build. Rails has the opposite trade-offs: complection makes it hard to test our models, but metaprogramming against conventions makes repositories easy. But Rails doesn't <em>have to</em>have that complection. We can separate our repositories from our models, for the testability, and we can use meta-programming to help with that. You could write your model without worrying about its persistence, and test it. When it's time to persist, you could build a repository, and decide whether to use ActiveRecord or a more general, flexible ORM - you could even have one of each, if that made sense. If our repositories could tie into the ORM by composition, instead of by inheritance, it'd be that much easier to mock our repositories for testing our controllers. How hard could it be to make something like this?

[sourcecode lang="ruby"]
class Posts &lt; ActiveRecord::Repository
  def some_special_query
    ...
  end
end
class Post &lt; ActiveRecord::Base
end
Posts.find(42)
Posts.find_by_author('Douglas Adams')
Posts.some_special_query
[/sourcecode]

I know there are inconsistencies with what we do today, and things would have to change,


----------------------------------------
One problem with this would be lazy-loading certain fields. .... When you say Foo.find(42).bar, it doesn't create an empty Foo from select id from foos, and <em>then</em>, when you call #bar, select bar from foos where foos.id = ? select id from foos where id = ?; select bar from foos where id = ?; No, it gets the whole Foo, and returns its attributes from memory. select * from foos where id = ?;]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>586</wp:post_id>
  <wp:post_date>2012-09-04 09:27:29</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[292320]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_a10e81c27e27e1a9a9600e26dbf20724</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_055ab66956b7f5f7424836641db5430a</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_86e9bf65a0c2fd5e0b9468ca5060d174</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_485309245b6207f49b186b56d817f719</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_7ed6c6db9fd25b738105b05f5dcc45ae</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_ee4bf1c4229609d97717ef42546bbe0e</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_eb14bd3d16401b63ac412548e8330f8a</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_e733a21b095b9a299f1a6e317c2088c1</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_23cd231649c0392147b8117132dfe59e</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_c9559e26228bfa32a1c26890144167da</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_03950b1d4518890f5f93a5352e8f78f3</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_570af4c07af8b00fc442c24a9847efe6</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_0a89f808c7f50e25f4f2870fe9a1ed80</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_e600bcb9d32cd2aa49841222757bf167</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_923d5f51a53dda01ac2b14a2c80240a3</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_56fffc46ae3a53de4c3a0c9828daf166</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_b6ed1f05dea05e1701edd00272b482c7</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_61d7ef39d7595e496d0870824fef7329</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_a018d06dce2537f55c8e31fea2bd31f0</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_d64ecff9b1ce8afb282a6ecf8c5f2929</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>puncsig: A Method's Punctuation Signature</title>
  <link>http://invisibleblocks.com/?p=606</link>
  <pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.com/?p=606</guid>
  <description/>
  <content:encoded><![CDATA[A while ago, I hacked together some quick rake tasks to generate punctuation signatures, to help me peer into the SeeClickFix code base. Punctuation Signatures, inspired by Ward Cunningham's <a href="http://c2.com/doc/SignatureSurvey/">Signature Survey</a>, aren't hard science, and they won't magically show you all a code base's weak spots, but they're a fun way to explore.

Basically, puncsig takes a class like this:

[sourcecode lang="ruby"]
class Foo
  def wham
    puts &quot;wham!&quot;
  end
  def bar(n)
    n.times { |i| puts &quot;Hello, #{i}!&quot; }
  end
end
[/sourcecode]

...and produces a report like this: TODO actually generate that report
<pre>
foo.rb:
  bar:  .{||",#{}!"}
  wham: "!"
</pre>

Notice that the wham method's signature is shorter, so it appears last, even though its source is first in the file: this helps you zero in on longer methods.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>606</wp:post_id>
  <wp:post_date>2012-07-31 08:58:15</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="programming"><![CDATA[Programming]]></category>
  <category domain="category" nicename="puncsig"><![CDATA[puncsig]]></category>
  <category domain="post_tag" nicename="ruby"><![CDATA[Ruby]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[292320]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Agile Myopia</title>
  <link>http://invisibleblocks.com/?p=763</link>
  <pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.com/?p=763</guid>
  <description/>
  <content:encoded><![CDATA[NPR recently aired <a href="http://www.npr.org/2013/12/31/258548386/10-000-year-old-clock-challenges-approach-to-time">a piece on the Long Now Foundation and the 10,000 year clock</a> that got me thinking about Agile, and how focusing only on what's immediately actionable can make us myopic.

Don't misunderstand - I've worked in waterfall enterprises. I've spent 3 months listening in on requirements meetings, and then had to spend 3 months designing the full application in Visio. I grok the value of Agile.

But I've worked on Agile teams that had no vision, no vivid goal. You lose steam, your energy dissipates as progress becomes monotonous. Each story you finish is another aimless step through the salt flat. It's like playing <a href="http://www.stanleyparable.com/">The Stanley Parable</a>.

Agile was a reaction against waterfall, a necessary course correction.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>763</wp:post_id>
  <wp:post_date>2014-01-02 10:32:13</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[292320]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Counting Items in a List in Ruby</title>
  <link>http://invisibleblocks.com/?p=827</link>
  <pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.com/?p=827</guid>
  <description/>
  <content:encoded><![CDATA[Suppose you have a list of colors. You want to know how often each color appears in the list.

[sourcecode lang="ruby"]
[&quot;grey&quot;, &quot;grey&quot;, &quot;tortie&quot;, &quot;red&quot;, &quot;grey&quot;, &quot;black&quot;, &quot;red&quot;, &quot;black&quot;, ...]
[/sourcecode]

How common is a black cat? How rare is a tortie?

If the data came from a table in a database, you could use <code>select color, count(id) from cats;</code> or, in Rails, <code>Cat.count(group: :color)</code>.

But in this case, you already have the data in memory. Maybe it came in from a CSV.

[sourcecode lang="ruby"]
&gt; colors = rows.map { |row| row['color'] }
=&gt; [&quot;grey&quot;, &quot;grey&quot;, &quot;tortie&quot;, &quot;red&quot;, &quot;grey&quot;, &quot;black&quot;, &quot;red&quot;, &quot;black&quot;, ...]
&gt; colors.size
=&gt; 2645
&gt; colors.uniq
=&gt; [&quot;grey&quot;, &quot;tortie&quot;, &quot;red&quot;, &quot;black&quot;, &quot;white&quot;]
[/sourcecode]

How do you count them up?

<code>Enumerable#group_by</code> gives us a Hash where the keys are the distinct colors, and the values are arrays of the colors: <code>{ "grey" =&gt; ["grey", "grey", "grey", "grey"...] ... }</code>. We can use <code>map</code> and <code>size</code> to finish the job:

[sourcecode lang="ruby"]
&gt; Hash[
    colors.group_by { |c| c }.map { |color, occurrances| 
      [color, occurrances.size] 
    }
  ]
=&gt; { &quot;grey&quot; =&gt; 92,
     &quot;tortie&quot; =&gt; 752,
     &quot;red&quot; =&gt; 543,
     &quot;white&quot; =&gt; 329,
     &quot;black&quot; =&gt; 929 }
[/sourcecode]

It'd be nice if this were part of the Enumerable module.

[sourcecode lang="ruby"]
module Enumerable
  def count_by(&amp;criteria)
    grouped = group_by(&amp;criteria)
    counts = grouped.map { |item, items| 
      [item, items.size] 
    }
    Hash[counts]
  end
end

rows.count_by { |row| row['color'] }
[/sourcecode]

And, as long as we're not running this as a one-off in a REPL, we could be more efficient, and actually accumulate a hash of counts.

At work, we've monkey-patched it in for now to try it out. We'll see how it goes.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>827</wp:post_id>
  <wp:post_date>2014-01-23 10:56:12</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[292320]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Finding Dead Ruby Methods with ZombieScout</title>
  <link>http://invisibleblocks.com/?p=854</link>
  <pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.com/?p=854</guid>
  <description/>
  <content:encoded><![CDATA[Ever come across a screwy-looking method, and try fixing it, only to eventually realize it's never called in your application? Ever wish you could get that time back?

<a href="http://rubygems.org/gems/zombie_scout">ZombieScout</a> is a gem that parses your ruby source files, gathers all the defined methods, greps for them in your *.rb, *.erb, and *.rake files, and tells you which ones are never called.

How does it find method definitions?

It recognizes instance &amp; class methods like <code>def foo</code> and <code>def self.foo</code>, <code>attr_reader</code> and friends, forwardable delegators, and Rails scopes (if you're still into those). It doesn't support Rails delegators yet, because their syntax is more complicated. I need to make it look for <code>define_method</code>, too.

What if you have some meta-programming that generates methods? ZombieScout won't know that it's creating methods. I'd love to add a way to define AST patterns that create methods. If you have any ideas, pull requests are welcome.

It uses the <a href="http://rubygems.org/gems/parser">parser</a> gem, but I'm trying a port to <a href="http://www.ruby-doc.org/stdlib-2.1.1/libdoc/ripper/rdoc/Ripper.html">Ripper</a>, so it always matches the version of ruby you're running.

How does it find method calls?

It greps for whole-word matches on each method name in all your project's code. If you have ruby code in files other than *.rb, *.erb, *.rake, or a Rakefile, and it's a common file format, pull requests are welcome. If it's an odd-ball file format, we'll have to add configuration for that.

TODO whitelisting]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>854</wp:post_id>
  <wp:post_date>2014-04-10 12:31:10</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[292320]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Fractal Circles</title>
  <link>http://invisibleblocks.com/?p=866</link>
  <pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.com/?p=866</guid>
  <description/>
  <content:encoded><![CDATA[[gallery ids="873,884,885,874,880,881,876,879,871,872,882,883,877,878,875"]

These images are all made from the same simple algorithm:
<ol>
	<li>Start with a square. Decide: should we draw a circle?
<ol>
	<li>If we draw a circle, should it be solid, or hollow?</li>
</ol>
</li>
	<li>If we <em>don't</em> draw a circle, divide the space into two vertical rectangles.</li>
</ol>
<a href="https://invisibleblocks.files.wordpress.com/2014/09/pic1.png"><img class="alignnone size-thumbnail wp-image-886" src="http://invisibleblocks.files.wordpress.com/2014/09/pic1.png?w=150" alt="144 Fractal Circles" width="150" height="150" /></a>

&nbsp;

If you'd like to see more fractal circles in person, come to <a title="City Wide Open Studios" href="http://www.cwos.org/" target="_blank">City Wide Open Studios</a>, where 14 prints will be on display.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>866</wp:post_id>
  <wp:post_date>2014-09-20 20:56:10</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="generative-art-2"><![CDATA[Generative Art]]></category>
  <category domain="category" nicename="processing"><![CDATA[Processing]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[292320]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Fractal Circles 29</title>
  <link>http://invisibleblocks.com/?attachment_id=876#main</link>
  <pubDate>Sat, 20 Sep 2014 23:45:09 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.files.wordpress.com/2014/09/0021.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>876</wp:post_id>
  <wp:post_date>2014-09-20 19:45:09</wp:post_date>
  <wp:post_date_gmt>2014-09-20 23:45:09</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>0021</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>866</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://invisibleblocks.files.wordpress.com/2014/09/0021.png</wp:attachment_url>
</item>
<item>
  <title>Fractal Circles 28</title>
  <link>http://invisibleblocks.com/?attachment_id=877#main</link>
  <pubDate>Sat, 20 Sep 2014 23:45:12 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.files.wordpress.com/2014/09/0031.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>877</wp:post_id>
  <wp:post_date>2014-09-20 19:45:12</wp:post_date>
  <wp:post_date_gmt>2014-09-20 23:45:12</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>0031</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>866</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://invisibleblocks.files.wordpress.com/2014/09/0031.png</wp:attachment_url>
</item>
<item>
  <title>Fractal Circles 27</title>
  <link>http://invisibleblocks.com/?attachment_id=878#main</link>
  <pubDate>Sat, 20 Sep 2014 23:45:14 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.files.wordpress.com/2014/09/0036.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>878</wp:post_id>
  <wp:post_date>2014-09-20 19:45:14</wp:post_date>
  <wp:post_date_gmt>2014-09-20 23:45:14</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>0036</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>866</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://invisibleblocks.files.wordpress.com/2014/09/0036.png</wp:attachment_url>
</item>
<item>
  <title>Fractal Circles 26</title>
  <link>http://invisibleblocks.com/?attachment_id=879#main</link>
  <pubDate>Sat, 20 Sep 2014 23:45:16 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.files.wordpress.com/2014/09/0061.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>879</wp:post_id>
  <wp:post_date>2014-09-20 19:45:16</wp:post_date>
  <wp:post_date_gmt>2014-09-20 23:45:16</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>0061</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>866</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://invisibleblocks.files.wordpress.com/2014/09/0061.png</wp:attachment_url>
</item>
<item>
  <title>Fractal Circles 25</title>
  <link>http://invisibleblocks.com/?attachment_id=880#main</link>
  <pubDate>Sat, 20 Sep 2014 23:45:18 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.files.wordpress.com/2014/09/0065.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>880</wp:post_id>
  <wp:post_date>2014-09-20 19:45:18</wp:post_date>
  <wp:post_date_gmt>2014-09-20 23:45:18</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>0065</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>866</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://invisibleblocks.files.wordpress.com/2014/09/0065.png</wp:attachment_url>
</item>
<item>
  <title>Fractal Circles 24</title>
  <link>http://invisibleblocks.com/?attachment_id=881#main</link>
  <pubDate>Sat, 20 Sep 2014 23:45:19 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.files.wordpress.com/2014/09/0068.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>881</wp:post_id>
  <wp:post_date>2014-09-20 19:45:19</wp:post_date>
  <wp:post_date_gmt>2014-09-20 23:45:19</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>0068</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>866</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://invisibleblocks.files.wordpress.com/2014/09/0068.png</wp:attachment_url>
</item>
<item>
  <title>Fractal Circles 23</title>
  <link>http://invisibleblocks.com/?attachment_id=882#main</link>
  <pubDate>Sat, 20 Sep 2014 23:45:21 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.files.wordpress.com/2014/09/0075.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>882</wp:post_id>
  <wp:post_date>2014-09-20 19:45:21</wp:post_date>
  <wp:post_date_gmt>2014-09-20 23:45:21</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>0075</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>866</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://invisibleblocks.files.wordpress.com/2014/09/0075.png</wp:attachment_url>
</item>
<item>
  <title>Fractal Circles 22</title>
  <link>http://invisibleblocks.com/?attachment_id=883#main</link>
  <pubDate>Sat, 20 Sep 2014 23:45:23 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.files.wordpress.com/2014/09/0085.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>883</wp:post_id>
  <wp:post_date>2014-09-20 19:45:23</wp:post_date>
  <wp:post_date_gmt>2014-09-20 23:45:23</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>0085</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>866</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://invisibleblocks.files.wordpress.com/2014/09/0085.png</wp:attachment_url>
</item>
<item>
  <title>Fractal Circles 21</title>
  <link>http://invisibleblocks.com/?attachment_id=884#main</link>
  <pubDate>Sat, 20 Sep 2014 23:45:25 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.files.wordpress.com/2014/09/0098.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>884</wp:post_id>
  <wp:post_date>2014-09-20 19:45:25</wp:post_date>
  <wp:post_date_gmt>2014-09-20 23:45:25</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>0098</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>866</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://invisibleblocks.files.wordpress.com/2014/09/0098.png</wp:attachment_url>
</item>
<item>
  <title>Fractal Circles 20</title>
  <link>http://invisibleblocks.com/?attachment_id=885#main</link>
  <pubDate>Sat, 20 Sep 2014 23:45:27 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.files.wordpress.com/2014/09/0123.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>885</wp:post_id>
  <wp:post_date>2014-09-20 19:45:27</wp:post_date>
  <wp:post_date_gmt>2014-09-20 23:45:27</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>0123</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>866</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://invisibleblocks.files.wordpress.com/2014/09/0123.png</wp:attachment_url>
</item>
<item>
  <title>144 Fractal Circles</title>
  <link>http://invisibleblocks.com/?attachment_id=886#main</link>
  <pubDate>Sat, 20 Sep 2014 23:51:00 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.files.wordpress.com/2014/09/pic1.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>886</wp:post_id>
  <wp:post_date>2014-09-20 19:51:00</wp:post_date>
  <wp:post_date_gmt>2014-09-20 23:51:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>pic</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>866</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://invisibleblocks.files.wordpress.com/2014/09/pic1.png</wp:attachment_url>
</item>
<item>
  <title>Gorilla Circles</title>
  <link>http://invisibleblocks.com/2014/09/29/circle-pictures-redux/gorilla/#main</link>
  <pubDate>Tue, 30 Sep 2014 01:57:00 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.files.wordpress.com/2014/09/gorilla.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>889</wp:post_id>
  <wp:post_date>2014-09-29 21:57:00</wp:post_date>
  <wp:post_date_gmt>2014-09-30 01:57:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>gorilla</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>869</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://invisibleblocks.files.wordpress.com/2014/09/gorilla.png</wp:attachment_url>
</item>
<item>
  <title>Seahorse Circles</title>
  <link>http://invisibleblocks.com/2014/09/29/circle-pictures-redux/seahorse/#main</link>
  <pubDate>Tue, 30 Sep 2014 01:57:03 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.files.wordpress.com/2014/09/seahorse.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>890</wp:post_id>
  <wp:post_date>2014-09-29 21:57:03</wp:post_date>
  <wp:post_date_gmt>2014-09-30 01:57:03</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>seahorse</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>869</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://invisibleblocks.files.wordpress.com/2014/09/seahorse.png</wp:attachment_url>
</item>
<item>
  <title>Sea Turtle Circles</title>
  <link>http://invisibleblocks.com/2014/09/29/circle-pictures-redux/seaturtle/#main</link>
  <pubDate>Tue, 30 Sep 2014 01:57:07 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.files.wordpress.com/2014/09/seaturtle.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>891</wp:post_id>
  <wp:post_date>2014-09-29 21:57:07</wp:post_date>
  <wp:post_date_gmt>2014-09-30 01:57:07</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>seaturtle</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>869</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://invisibleblocks.files.wordpress.com/2014/09/seaturtle.png</wp:attachment_url>
</item>
<item>
  <title>Sunflower Circles 1</title>
  <link>http://invisibleblocks.com/2014/09/29/circle-pictures-redux/sunflower-2/#main</link>
  <pubDate>Tue, 30 Sep 2014 01:57:12 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.files.wordpress.com/2014/09/sunflower.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>892</wp:post_id>
  <wp:post_date>2014-09-29 21:57:12</wp:post_date>
  <wp:post_date_gmt>2014-09-30 01:57:12</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>sunflower-2</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>869</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://invisibleblocks.files.wordpress.com/2014/09/sunflower.png</wp:attachment_url>
</item>
<item>
  <title>Sunflower Circles 2</title>
  <link>http://invisibleblocks.com/2014/09/29/circle-pictures-redux/sunflower2-2/#main</link>
  <pubDate>Tue, 30 Sep 2014 01:57:16 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.files.wordpress.com/2014/09/sunflower2.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>893</wp:post_id>
  <wp:post_date>2014-09-29 21:57:16</wp:post_date>
  <wp:post_date_gmt>2014-09-30 01:57:16</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>sunflower2-2</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>869</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://invisibleblocks.files.wordpress.com/2014/09/sunflower2.png</wp:attachment_url>
</item>
<item>
  <title>One Tree Circles</title>
  <link>http://invisibleblocks.com/2014/09/29/circle-pictures-redux/tree/#main</link>
  <pubDate>Tue, 30 Sep 2014 01:57:21 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.files.wordpress.com/2014/09/tree.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>894</wp:post_id>
  <wp:post_date>2014-09-29 21:57:21</wp:post_date>
  <wp:post_date_gmt>2014-09-30 01:57:21</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>tree</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>869</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://invisibleblocks.files.wordpress.com/2014/09/tree.png</wp:attachment_url>
</item>
<item>
  <title>Tropical Fish Circles</title>
  <link>http://invisibleblocks.com/2014/09/29/circle-pictures-redux/tropical-fish/#main</link>
  <pubDate>Tue, 30 Sep 2014 01:57:26 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.files.wordpress.com/2014/09/tropical-fish.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>895</wp:post_id>
  <wp:post_date>2014-09-29 21:57:26</wp:post_date>
  <wp:post_date_gmt>2014-09-30 01:57:26</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>tropical-fish</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>869</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://invisibleblocks.files.wordpress.com/2014/09/tropical-fish.png</wp:attachment_url>
</item>
<item>
  <title>Underwater Circles</title>
  <link>http://invisibleblocks.com/2014/09/29/circle-pictures-redux/underwater/#main</link>
  <pubDate>Tue, 30 Sep 2014 01:57:30 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.files.wordpress.com/2014/09/underwater.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>896</wp:post_id>
  <wp:post_date>2014-09-29 21:57:30</wp:post_date>
  <wp:post_date_gmt>2014-09-30 01:57:30</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>underwater</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>869</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://invisibleblocks.files.wordpress.com/2014/09/underwater.png</wp:attachment_url>
</item>
<item>
  <title>gorilla</title>
  <link>http://invisibleblocks.com/2014/09/29/circle-pictures-redux/gorilla-2/#main</link>
  <pubDate>Tue, 30 Sep 2014 02:23:48 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.files.wordpress.com/2014/09/gorilla1.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>899</wp:post_id>
  <wp:post_date>2014-09-29 22:23:48</wp:post_date>
  <wp:post_date_gmt>2014-09-30 02:23:48</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>gorilla-2</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>869</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://invisibleblocks.files.wordpress.com/2014/09/gorilla1.png</wp:attachment_url>
</item>
<item>
  <title>seahorse</title>
  <link>http://invisibleblocks.com/2014/09/29/circle-pictures-redux/seahorse-2/#main</link>
  <pubDate>Tue, 30 Sep 2014 02:23:51 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.files.wordpress.com/2014/09/seahorse1.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>900</wp:post_id>
  <wp:post_date>2014-09-29 22:23:51</wp:post_date>
  <wp:post_date_gmt>2014-09-30 02:23:51</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>seahorse-2</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>869</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://invisibleblocks.files.wordpress.com/2014/09/seahorse1.png</wp:attachment_url>
</item>
<item>
  <title>seaturtle</title>
  <link>http://invisibleblocks.com/2014/09/29/circle-pictures-redux/seaturtle-2/#main</link>
  <pubDate>Tue, 30 Sep 2014 02:23:52 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.files.wordpress.com/2014/09/seaturtle1.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>901</wp:post_id>
  <wp:post_date>2014-09-29 22:23:52</wp:post_date>
  <wp:post_date_gmt>2014-09-30 02:23:52</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>seaturtle-2</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>869</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://invisibleblocks.files.wordpress.com/2014/09/seaturtle1.png</wp:attachment_url>
</item>
<item>
  <title>sunflower</title>
  <link>http://invisibleblocks.com/2014/09/29/circle-pictures-redux/sunflower-3/#main</link>
  <pubDate>Tue, 30 Sep 2014 02:23:53 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.files.wordpress.com/2014/09/sunflower1.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>902</wp:post_id>
  <wp:post_date>2014-09-29 22:23:53</wp:post_date>
  <wp:post_date_gmt>2014-09-30 02:23:53</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>sunflower-3</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>869</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://invisibleblocks.files.wordpress.com/2014/09/sunflower1.png</wp:attachment_url>
</item>
<item>
  <title>sunflower2</title>
  <link>http://invisibleblocks.com/2014/09/29/circle-pictures-redux/sunflower2-3/#main</link>
  <pubDate>Tue, 30 Sep 2014 02:23:55 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.files.wordpress.com/2014/09/sunflower21.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>903</wp:post_id>
  <wp:post_date>2014-09-29 22:23:55</wp:post_date>
  <wp:post_date_gmt>2014-09-30 02:23:55</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>sunflower2-3</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>869</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://invisibleblocks.files.wordpress.com/2014/09/sunflower21.png</wp:attachment_url>
</item>
<item>
  <title>tree</title>
  <link>http://invisibleblocks.com/2014/09/29/circle-pictures-redux/tree-2/#main</link>
  <pubDate>Tue, 30 Sep 2014 02:23:56 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.files.wordpress.com/2014/09/tree1.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>904</wp:post_id>
  <wp:post_date>2014-09-29 22:23:56</wp:post_date>
  <wp:post_date_gmt>2014-09-30 02:23:56</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>tree-2</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>869</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://invisibleblocks.files.wordpress.com/2014/09/tree1.png</wp:attachment_url>
</item>
<item>
  <title>tropical-fish</title>
  <link>http://invisibleblocks.com/2014/09/29/circle-pictures-redux/tropical-fish-2/#main</link>
  <pubDate>Tue, 30 Sep 2014 02:24:01 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.files.wordpress.com/2014/09/tropical-fish1.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>905</wp:post_id>
  <wp:post_date>2014-09-29 22:24:01</wp:post_date>
  <wp:post_date_gmt>2014-09-30 02:24:01</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>tropical-fish-2</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>869</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://invisibleblocks.files.wordpress.com/2014/09/tropical-fish1.png</wp:attachment_url>
</item>
<item>
  <title>underwater</title>
  <link>http://invisibleblocks.com/2014/09/29/circle-pictures-redux/underwater-2/#main</link>
  <pubDate>Tue, 30 Sep 2014 02:24:03 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.files.wordpress.com/2014/09/underwater1.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>906</wp:post_id>
  <wp:post_date>2014-09-29 22:24:03</wp:post_date>
  <wp:post_date_gmt>2014-09-30 02:24:03</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>underwater-2</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>869</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://invisibleblocks.files.wordpress.com/2014/09/underwater1.png</wp:attachment_url>
</item>
<item>
  <title>Why We Abstract, and What To Do When We Can't</title>
  <link>http://invisibleblocks.com/2008/04/05/why-we-abstract-and-what-to-do-when-we-cant/</link>
  <pubDate>Sat, 05 Apr 2008 22:34:40 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.wordpress.com/?p=74</guid>
  <description/>
  <content:encoded><![CDATA[
> "Whenever you see yourself writing the same thing down more than once, there's something wrong and you shouldn't be doing it, and the reason is not because it's a waste of time to write something down more than once.  It's <strong>because there's some idea here</strong>, a very simple idea, which has to do with the Sigma notation...not depending upon what it is I'm adding up.  And I would like to be able to always...<strong>divide the things up</strong> into as many pieces as I can, <strong>each of which I understand separately</strong>.  I would like to understand the way of adding things up, independently of what it is I'm adding up."
>- Gerald Sussman, <a href="http://swiss.csail.mit.edu/classes/6.001/abelson-sussman-lectures/">SICP Lecture</a> 2a, "Higher-order Procedures" (emphasis added)</em>

> The purpose of abstracting is not to be vague, but to create a new semantic level in which one can be absolutely precise.
> <em>- Edsger W. Dijkstra, <a href="http://www.cs.utexas.edu/~EWD/transcriptions/EWD03xx/EWD340.html">The Humble Programmer</a></em>

> What Larry Wall said about Perl holds true: "When you say something in a small language, it comes out big.  When you say something in a big language, it comes out small." The same is true for English.  The reason that biologist Ernst Haeckel could say "Ontogeny recapitulates phylogeny" in only three words was that he had these powerful words with highly specific meanings at his disposal.  We allow inner complexity of the language because it enables us to <strong>shift the complexity away</strong> from the individual utterance.
> <em>- Hal Fulton, <a href="http://www.amazon.com/Ruby-Way-Second-Addison-Wesley-Professional/dp/0672328844">The Ruby Way</a>, Introduction (emphasis added)</em>

Programming is our thoughts, and with better ways to express them, we can spend more time <em>thinking</em> them, and less time expressing them.

3 + 3 + 3 + 3 + 3 + 3 is hard...hard to read (how many threes?), hard to get right (I lost count!), hard to reason about (piles of operations!).  3 x 6 is easy, once you learn multiplication.  This is a good trade-off.  We should look for ways to add abstractions, <em>new semantic levels</em>, to our programs.

<strong>If you're doing the same thing twice, stop, and look for the common idea.</strong> Peel the idea away from the context, from the details.  Grasp the idea, and then use it over and over.  As a bonus, you'll type less, re-use code, and debug less.

"But I can't find ways to do that!"

When you look at similar bits of code, and can't find a good way to remove the duplication, you're hitting the limits of either your language, or your knowledge.

Programming languages put up very real walls, they force you down their paths, often by leaving out features.  A language without recursion puts up a wall in front of recursive solutions;  a language without first-class functions makes it tough to write higher-order functions.  Language limitations are the cause of <a href="http://en.wikipedia.org/wiki/Greenspun's_Tenth_Rule">Greenspun's Tenth Rule</a>.

Sometimes, the language is not the problem.  Sometimes you just can't find your way through.  This is why you read <a href="http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672">Refactoring</a>, and <a href="http://www.amazon.com/Design-Patterns-Object-Oriented-Addison-Wesley-Professional/dp/0201633612">Design Patterns</a>, but really, this is why you <a href="http://steve.yegge.googlepages.com/choosing-languages">learn other programming languages</a>.  Think about the <a href="http://weblog.raganwald.com/2007/03/why-why-functional-programming-matters.html">right way to factor the problem</a>.

<strong>If you can't remove the duplication, you need to work around your language, or learn some new tricks.</strong>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>74</wp:post_id>
  <wp:post_date>2008-04-05 18:34:40</wp:post_date>
  <wp:post_date_gmt>2008-04-05 22:34:40</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>why-we-abstract-and-what-to-do-when-we-cant</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="abstraction"><![CDATA[abstraction]]></category>
  <category domain="post_tag" nicename="dijkstra"><![CDATA[dijkstra]]></category>
  <category domain="category" nicename="learning"><![CDATA[Learning]]></category>
  <category domain="category" nicename="programming"><![CDATA[Programming]]></category>
  <category domain="post_tag" nicename="refactoring"><![CDATA[refactoring]]></category>
  <category domain="post_tag" nicename="sicp"><![CDATA[sicp]]></category>
  <category domain="category" nicename="software-thinking"><![CDATA[Software Thinking]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[292320]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_2fc724226b0dad85b5830fd1536c37aa</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>9394</wp:comment_id>
    <wp:comment_author><![CDATA[she]]></wp:comment_author>
    <wp:comment_author_email>she@hot.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>80.108.103.172</wp:comment_author_IP>
    <wp:comment_date>2008-04-06 19:08:27</wp:comment_date>
    <wp:comment_date_gmt>2008-04-06 23:08:27</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I dont want to be nitpicking on Hal Fulton but the concept of "Ontogeny recapitulates phylogeny" is since many years obsolete.

Besides, Haeckel only stated an "obvious" fact - he did not offer any explanations.  I am aware that biology back then was more description than explanative (as it is these days thanks to countless reasons), but what _we_ can do is to look at the _current_ information, and not think about _past_ information sets. 

If one wants to abstract these days and needs to use biology, I'd rather point out at BioBricks and encourage people to build virtual organisms.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2008-04-06 23:08:27</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9395</wp:comment_id>
    <wp:comment_author><![CDATA[Logan]]></wp:comment_author>
    <wp:comment_author_email>logancapaldo@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>68.199.50.57</wp:comment_author_IP>
    <wp:comment_date>2008-04-06 20:50:25</wp:comment_date>
    <wp:comment_date_gmt>2008-04-07 00:50:25</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[The point isn't what he said, it's that he said it in three words. The accuracy of the statement is irrelevant.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2008-04-07 00:50:25</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9396</wp:comment_id>
    <wp:comment_author><![CDATA[Max]]></wp:comment_author>
    <wp:comment_author_email>ihasmax@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>146.151.15.138</wp:comment_author_IP>
    <wp:comment_date>2008-04-07 00:15:56</wp:comment_date>
    <wp:comment_date_gmt>2008-04-07 04:15:56</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Wow, please get rid of "Snap Shots." 
The annoyance of seeing a screenshot of every page I was about to visit made me stop reading what you had to say.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2008-04-07 04:15:56</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9397</wp:comment_id>
    <wp:comment_author><![CDATA[Daniel Bernier]]></wp:comment_author>
    <wp:comment_author_email>danbernier@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://invisibleblocks.wordpress.com/</wp:comment_author_url>
    <wp:comment_author_IP>12.24.127.147</wp:comment_author_IP>
    <wp:comment_date>2008-04-07 07:52:52</wp:comment_date>
    <wp:comment_date_gmt>2008-04-07 11:52:52</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[@she, I agree with Logan...in fact, while I'd heard Haeckel's phrase before, I never could have told you who said it.

@Max, you really don't like them?  I'm not generally one for flashy UIs, but I like them.  Maybe I keep my mouse on the side of the text when I scroll.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>292320</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2008-04-07 11:52:52</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9398</wp:comment_id>
    <wp:comment_author><![CDATA[Casper Bang]]></wp:comment_author>
    <wp:comment_author_email>casper@jbr.dk</wp:comment_author_email>
    <wp:comment_author_url>http://coffeecokeandcode.blogspot.com/</wp:comment_author_url>
    <wp:comment_author_IP>217.74.220.92</wp:comment_author_IP>
    <wp:comment_date>2008-04-07 08:21:28</wp:comment_date>
    <wp:comment_date_gmt>2008-04-07 12:21:28</wp:comment_date_gmt>
    <wp:comment_content><![CDATA["Any problem in computer science can be solved with another layer of indirection. But that usually will create another problem." - David Wheeler

I like abstractions in the language (properties, events, closures, enums etc.) but I hate to be buried in complex stacks and frameworks of the kind extremely pervasive in the Java space. Patterns can be handy as a communication mechanism but really they belong to the latter type of indirection. Thank goodness we don't have to roll our own OO pattern complete with VTABLE lookups etc.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2008-04-07 12:21:28</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9399</wp:comment_id>
    <wp:comment_author><![CDATA[Piers Cawley]]></wp:comment_author>
    <wp:comment_author_email>pdcawley@bofh.org.uk</wp:comment_author_email>
    <wp:comment_author_url>http://www.bofh.org.uk/</wp:comment_author_url>
    <wp:comment_author_IP>195.97.210.3</wp:comment_author_IP>
    <wp:comment_date>2008-04-07 09:02:00</wp:comment_date>
    <wp:comment_date_gmt>2008-04-07 13:02:00</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I sometimes think that a program is like some strange sort of waterbed with multiple cells. Complexity is the water - when you squeeze the water out of one cell it doesn't disappear, it just goes somewhere else. Our job as programmers is to choose abstractions (distribute the water) in such a way that we've made ourselves a comfortable bed.

Okay, so, not the best analogy ever, but I think there might be something there worth saving.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2008-04-07 13:02:00</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9400</wp:comment_id>
    <wp:comment_author><![CDATA[Dan Lewis]]></wp:comment_author>
    <wp:comment_author_email>dan.a.lewis@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>192.91.171.36</wp:comment_author_IP>
    <wp:comment_date>2008-04-07 10:23:24</wp:comment_date>
    <wp:comment_date_gmt>2008-04-07 14:23:24</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[There's another Dijkstra quote on these lines.

"the main challenge of computer science is how not to get lost in complexities of their own making"

It says almost the opposite, doesn't it? Adding abstraction ideally moves you farther away from the machine and closer to "reality", but reality is complicated enough in its own right.

In the worst case scenario, abstraction moves you away from the machine and away from "reality" into some new mathematical formalism. And there's no guarantee that your formalism is a net win, instead of a bunch of overhead. Instead it's the wisdom lost in knowledge lost in information lost in data.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2008-04-07 14:23:24</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9401</wp:comment_id>
    <wp:comment_author><![CDATA[Daniel Bernier]]></wp:comment_author>
    <wp:comment_author_email>danbernier@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://invisibleblocks.wordpress.com/</wp:comment_author_url>
    <wp:comment_author_IP>12.24.127.147</wp:comment_author_IP>
    <wp:comment_date>2008-04-07 10:29:21</wp:comment_date>
    <wp:comment_date_gmt>2008-04-07 14:29:21</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Now that I think about it, I feel remiss in not mentioning Joel's <a href="http://www.joelonsoftware.com/articles/LeakyAbstractions.html" rel="nofollow">leaky abstractions</a>.

@Dan Lewis, that's a good point, you want abstractions that remove UNNEEDED detail, to let you focus on the IMPORTANT detail.  Still, while it's a problem if you abstract badly, abstracting has value.  You don't stop driving a car because people sometimes have accidents, you learn to drive carefully.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>292320</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2008-04-07 14:29:21</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9402</wp:comment_id>
    <wp:comment_author><![CDATA[Paul W. Homer]]></wp:comment_author>
    <wp:comment_author_email>paul_homer@yahoo.ca</wp:comment_author_email>
    <wp:comment_author_url>http://theprogrammersparadox.blogspot.com/</wp:comment_author_url>
    <wp:comment_author_IP>205.211.160.1</wp:comment_author_IP>
    <wp:comment_date>2008-04-07 15:43:58</wp:comment_date>
    <wp:comment_date_gmt>2008-04-07 19:43:58</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I tend to think of abstraction as a 'higher level' of expressing something. A while back, I took a shot at trying to be a little more specific about it, which might help :-)

http://theprogrammersparadox.blogspot.com/2008/01/abstraction-and-encapsulation.html


Paul.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2008-04-07 19:43:58</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9404</wp:comment_id>
    <wp:comment_author><![CDATA[stefanorodighiero.net &raquo; Blog Archive &raquo; links for 2008-04-08]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://www.stefanorodighiero.net/?p=20</wp:comment_author_url>
    <wp:comment_author_IP>62.149.140.181</wp:comment_author_IP>
    <wp:comment_date>2008-04-08 06:34:40</wp:comment_date>
    <wp:comment_date_gmt>2008-04-08 10:34:40</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[...] Why We Abstract, and What To Do When We Can't « Invisible Blocks "Sometimes, the language is not the problem. Sometimes you just can't find your way through. This is why you read Refactoring, and Design Patterns, but really, this is why you learn other programming languages. Think about the right way to factor the pr (tags: learning programming refactoring theory) [...]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2008-04-08 10:34:40</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9406</wp:comment_id>
    <wp:comment_author><![CDATA[Real State Agent]]></wp:comment_author>
    <wp:comment_author_email>rs@agent.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>159.53.78.140</wp:comment_author_IP>
    <wp:comment_date>2008-04-08 17:09:36</wp:comment_date>
    <wp:comment_date_gmt>2008-04-08 21:09:36</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Abstraction is simply leaving irrelevant things behind.

We all know no thing is irrelevant, if they fail. The only problem with programming nowdays is that we went back to programming in assembly code, but instead of sending codes (control characters) to the printers and to the screens, we are doing the same but to the databases and the web browsers.

Some frameworks (ie: abstractions) have been created, but they are based too heavily on the past. Look for example at Hibernate, it tries to do away with SQL, but you end up writing a lot more code and the SQL generated is terrible. One query may end up doing 16,000 SQL queries. Then you wonder why the system is so slow...

The same occurs with HTML. Most programmers think that they need to know HTML, that's like learning the opcodes of the LaserJet and sending the individual characters to the printer (why use drivers? real men know the machine details...).

Obviously this nonsense will end with new frameworks. I'm building mine. You never see SQL nor HTML. ANd it is far more efficient than carefully handwritten code.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2008-04-08 21:09:36</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9407</wp:comment_id>
    <wp:comment_author><![CDATA[Daniel Bernier]]></wp:comment_author>
    <wp:comment_author_email>danbernier@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://invisibleblocks.wordpress.com/</wp:comment_author_url>
    <wp:comment_author_IP>64.252.19.29</wp:comment_author_IP>
    <wp:comment_date>2008-04-08 21:44:41</wp:comment_date>
    <wp:comment_date_gmt>2008-04-09 01:44:41</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[@Real State Agent, post a link to your framework!]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>292320</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2008-04-09 01:44:41</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Trading Space for Speed: Memoizing with Ruby Facets</title>
  <link>http://invisibleblocks.com/2008/04/14/trading-space-for-speed-memoizing-with-ruby-facets/</link>
  <pubDate>Mon, 14 Apr 2008 11:37:26 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.wordpress.com/?p=78</guid>
  <description/>
  <content:encoded><![CDATA[Recently, I talked about a <a href="{% post_url 2008-03-22-a-faster-cheaper-fibonacci-definition %}">faster, cheaper way</a> to calculate <a href="http://en.wikipedia.org/wiki/Fibonacci_number">Fibonacci</a> numbers.  One of the optimizations I made was to remember the value of each Fibonacci number:  since F(7) is always 13, instead of recalculating it each time N=7, we can stuff <em>7 -&gt; 13</em> into a look-up table for future reference. The function builds up a cheat-sheet, to avoid doing the re-work.  It remembers.

This is called <a href="http://en.wikipedia.org/wiki/Memoization">memoization</a>, and it's a nice way to trade memory for performance.  But it only works when the function always returns the same answer for a given set of arguments -- otherwise it's first-in wins, forever.  This property of a function, returning the same answer for the same args, is called <a href="http://en.wikipedia.org/wiki/Referential_transparency_%28computer_science%29">referential transparency</a>.
<h4>A Sample Implementation</h4>
There are lots of ways you could memoize a function.  Hash tables are a natural choice, since they map a key to a value, just like functions map arguments to a value.  Even if you implement it differently, a hash table is a good working model for memoization.

Let's briefly consider factorials.  The regular version:

[sourcecode language='ruby']
class Unmemoized
    def factorial(n)
        puts n
        if n < 1
            1
        else
            n * factorial(n-1)
        end
    end
end

unmemoized = Unmemoized.new

5.downto(1) { |i| puts "\t#{unmemoized.factorial(i)}" }[/sourcecode]


...and the memoized version:

[sourcecode language='ruby']
class Memoized
    attr_reader :factorial_memo
    def initialize
        @factorial_memo = {}
    end

    def factorial(n)
        puts n
        unless @factorial_memo.has_key? n
            if n < 1
                @factorial_memo[n] = 1
            else
                @factorial_memo[n] = n * factorial(n-1)
            end
        end

        @factorial_memo[n]
    end
end

memoized = Memoized.new

5.downto(1) { |i| puts "\t#{memoized.factorial(i)}" }

puts memoized.factorial_memo.inspect[/sourcecode]


Printing the hashtable is especially telling:  <code>{5=&gt;120, 0=&gt;1, 1=&gt;1, 2=&gt;2, 3=&gt;6, 4=&gt;24}</code> It reads like a look-up table for factorials.
<h4>Memoization in Facets</h4>
As relatively easy as that example is, it has its drawbacks: we need to track our previous results in a separate variable, the memoization code is mixed up with the actual calculation (the part we care about), we can't easily use it with other functions, and the pattern only works for functions of one argument.  <a href="http://facets.rubyforge.org/">Facets</a> makes memoization trivial, and removes all these issues.

[sourcecode language='ruby']
require 'facets/memoize'

class FacetsMemoized
    def factorial(n)
        puts n
        if n < 1
            1
        else
            n * factorial(n-1)
        end
    end

    memoize :factorial # <= HINT
end

facets_memoized = FacetsMemoized.new

5.downto(1) { |i| puts "\t#{facets_memoized.factorial(i)}" }[/sourcecode]


In case you missed it, this is just like <code>Unmemoized</code> above, except we added line 13, <code>memoize :factorial</code>...that's it.  Just like <code>attr_reader</code> and friends, you can pass a list of symbols to <code>memoize</code>, and it'll work on functions with any number of arguments:

[sourcecode language='ruby']
require 'facets/memoize'

class MemoizedMath
    def add(n, m)
        n + m
    end
    def mult(n, m)
        n * m
    end
    memoize :add, :mult
end[/sourcecode]
<h4>When You Might Use Memoization, and What to Avoid</h4>
There are a number of places where this is useful: calculating a value by <a href="http://mitpress.mit.edu/sicp/full-text/sicp/book/node12.html">successive approximation</a>, finding the path to the root node in an immutable tree structure, finding the <em>N</em>th number in a recursively-defined series, even simple derived values (like 'abc'.upcase).  In general, a function is a good candidate if it only looks at its arguments (no global, class, or member variables, no files or databases) -- especially if those arguments are immutable.

Relying on side-effects (printing to standard out, writing to a database or file, or updating a variable) in memoized methods is a bad idea: they'll only happen the first time your method is called with those arguments, which is probably not what you intend. (Unless you're printing the arguments to illustrate how memoizing works.) On the other hand, relying on side-effects <a href="http://www.google.com/search?q=favor+immutability">is generally a bad idea</a> anyway. Even if you don't use a functional programming language, you can still benefit from minimizing state changes.
<h4>Further Reading</h4>
If memoization sounds interesting to you, you might like Oliver Steele's article about <a href="http://osteele.com/archives/2006/04/javascript-memoization">memoizing JavaScript functions</a>.  If you're curious about immutability, you might like this <a href="http://www.artima.com/intv/blochP.html">Joshua Bloch interview</a>.  If you're interested in functional programming, there are worse places to start than the excellent <a href="http://mitpress.mit.edu/sicp/full-text/book/book.html">Structure and Interpretation of Computer Programs</a>.  And of course, there's more where that came from, in <a href="http://facets.rubyforge.org/">Ruby Facets</a>.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>78</wp:post_id>
  <wp:post_date>2008-04-14 07:37:26</wp:post_date>
  <wp:post_date_gmt>2008-04-14 11:37:26</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>trading-space-for-speed-memoizing-with-ruby-facets</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="facetstour"><![CDATA[FacetsTour]]></category>
  <category domain="category" nicename="functional-programming"><![CDATA[Functional Programming]]></category>
  <category domain="category" nicename="programming"><![CDATA[Programming]]></category>
  <category domain="post_tag" nicename="ruby"><![CDATA[Ruby]]></category>
  <category domain="post_tag" nicename="rubyfacets"><![CDATA[RubyFacets]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[292320]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_8eef4c866ac609a7477b3fe102b1ab0b</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>9415</wp:comment_id>
    <wp:comment_author><![CDATA[Magnus Holm]]></wp:comment_author>
    <wp:comment_author_email>judofyr@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://judofyr.net</wp:comment_author_url>
    <wp:comment_author_IP>81.191.153.230</wp:comment_author_IP>
    <wp:comment_date>2008-04-14 11:39:52</wp:comment_date>
    <wp:comment_date_gmt>2008-04-14 15:39:52</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Why not rewrite Memoized like this: http://pastie.textmate.org/180528?]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2008-04-14 15:39:52</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9416</wp:comment_id>
    <wp:comment_author><![CDATA[Daniel Bernier]]></wp:comment_author>
    <wp:comment_author_email>danbernier@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://invisibleblocks.wordpress.com/</wp:comment_author_url>
    <wp:comment_author_IP>12.24.127.147</wp:comment_author_IP>
    <wp:comment_date>2008-04-14 13:15:12</wp:comment_date>
    <wp:comment_date_gmt>2008-04-14 17:15:12</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[@Magnus, that's a much nicer version of Memoized, I should have thought of that.  All I can say in my defense is that I was thinking more about the article and example, and less about the ruby code itself.  But I think the points I raised are still valid:

- "we need to track our previous results in a separate variable"  Still true.

- "the memoization code is mixed up with the actual calculation (the part we care about)"  Still true, but barely.  This is a great example of how ruby can redeem bad code.

- "we can't easily use it with other functions"  You can use the <i>pattern</i> in other classes, but not the code itself.

- "the pattern only works for functions of one argument"  Still true.  Of course, if you look at the facets source, you can see this is pretty easy anyway, since ruby lets us use Arrays as Hash keys.

Facets wraps it up so nicely, I can't think of a good reason to avoid it, unless I'm explicitly trying to avoid dependencies.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>292320</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2008-04-14 17:15:12</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9419</wp:comment_id>
    <wp:comment_author><![CDATA[gem install facets &laquo; Tecnogemas]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://tecnogemas.wordpress.com/2008/04/16/gem-install-facets/</wp:comment_author_url>
    <wp:comment_author_IP>72.233.44.26</wp:comment_author_IP>
    <wp:comment_date>2008-04-16 13:27:46</wp:comment_date>
    <wp:comment_date_gmt>2008-04-16 17:27:46</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[...] Hoy en día encuentro 2 tendencias, a los que les vale optimizar y los que quieren pero frecuentemente caen en optimizaciones absurdas. Pocas veces uno puede decir "haz esto"; sin poner una lista interminable de cuando sí, cuando no. Pero hoy les digo que pueden hacer que sus funciones recuerden. [...]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2008-04-16 17:27:46</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9681</wp:comment_id>
    <wp:comment_author><![CDATA[Daniel Bernier]]></wp:comment_author>
    <wp:comment_author_email>danbernier@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://invisibleblocks.wordpress.com/</wp:comment_author_url>
    <wp:comment_author_IP>12.24.127.147</wp:comment_author_IP>
    <wp:comment_date>2009-10-21 07:59:17</wp:comment_date>
    <wp:comment_date_gmt>2009-10-21 11:59:17</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Indeed I do.  My editor at the time, programmer's notepad 2, didn't allow different tab widths for each language, so I left it at 4, to match all the other languages I often use.  Conventions are great, but they're just that.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>9678</wp:comment_parent>
    <wp:comment_user_id>292320</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2009-10-21 11:59:17</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9677</wp:comment_id>
    <wp:comment_author><![CDATA[David James]]></wp:comment_author>
    <wp:comment_author_email>davidcjames@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://djwonk.com</wp:comment_author_url>
    <wp:comment_author_IP>74.96.44.97</wp:comment_author_IP>
    <wp:comment_date>2009-10-18 02:21:40</wp:comment_date>
    <wp:comment_date_gmt>2009-10-18 06:21:40</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[You might also want to take a look at 'memoize' as mentioned in the Pickaxe:
http://raa.ruby-lang.org/project/memoize/]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2009-10-18 06:21:40</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9678</wp:comment_id>
    <wp:comment_author><![CDATA[Ruby Convention]]></wp:comment_author>
    <wp:comment_author_email>davidcjames@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>74.96.44.97</wp:comment_author_IP>
    <wp:comment_date>2009-10-18 02:25:34</wp:comment_date>
    <wp:comment_date_gmt>2009-10-18 06:25:34</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[You know the Ruby convention for indenting is 2 spaces?]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2009-10-18 06:25:34</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>My GoRuCo 2008 highlights</title>
  <link>http://invisibleblocks.com/2008/04/28/my-goruco-2008-highlights/</link>
  <pubDate>Mon, 28 Apr 2008 22:36:27 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.wordpress.com/?p=81</guid>
  <description/>
  <content:encoded><![CDATA[<a href="http://rubydoes.net/">Aaron</a> and I had a great time at <a href="http://2008.goruco.com/">GoRuCo 2008</a> last Saturday.  Here are my highlights.

<strong>Bryan Helmkamp, Story-Driven Development</strong>

<a href="http://www.brynary.com/">Bryan Helmkamp's</a> talk on SDD (<a href="http://www.brynary.com/uploads/Story_Driven_Development.pdf">slides</a>, 1.6 MB PDF) reminded me of what <a href="http://www.hanselman.com">Scott Hanselman</a> calls "spec documents with teeth."  If I get it right, as you develop user stories, you use a standard format, and code parses your story file, and ties the text directly to functional tests you write.  The stories aren't executable themselves, but it brings them closer together.

Each story has a name, a description, and scenarios; the descriptions follow the format "As a ..., I want to ..., so that ...":
<pre>As a headhunter looking for Rails developers
I want to search for CVs with 8 years experience
So that I can make an exorbitant commission</pre>
The scenarios are different ways that story might play out.  Each scenario has a description, which follows the format "Given ... When ... Then ...":

Scenario: Enough experience.
<em>Given</em> <strong>a CV with 9 years of Rails experience</strong>
<em>When</em> <strong>I search for qualified Rails candidates</strong>
<em>Then</em> <strong>I should find the CV</strong>
<em>And</em> <strong>I should realize the candidate is full of shit</strong>

Then code reads your story files, and uses the text following the keywords to connect to executable functional tests you write:

[sourcecode language='ruby']
steps_for :cvs do
  Given "a CV with 3 years of Rails experience" do
    @cv = Developer.create!(:first_name => "Joe",
      :last_name => "Developer", :rails_exp => 3,
      :gender => "Male")
  end
end

steps_for :cvs do
  When "I search for qualified Rails candidates" do
    @results = Developer.find_qualified(8)
  end
end
[/sourcecode]

The code that actually performs the test is just ActiveRecord.  If you want to test the UI, there's a DSL called Webrat that simulates the browser.  It seems to live halfway between Watir and mechanize, and it doesn't do javascript.  It looks like this:

[sourcecode language='ruby']
steps_for :cvs_with_ui do
  Given "a CV with 3 years of Rails experience" do
    visits new_developer_path
    fills_in "First name", :with => "Joe"
    fills_in "Last name", :with => "Developer"
    selects "4", :from => "Rails Experience"
    chooses "Male"
    clicks_button "Create"
  end
end
[/sourcecode]

I'm curious about <code>chooses "Male"</code> -- I don't see how it connects that text with the drop-down it's supposed to change, unless it looks at values for all drop-downs on the page.  He gave a nice breakdown of the differences between Webrat and Selenium, and how SDD fits into an Agile team.

<strong>Giles Bowkett, Archaeopteryx</strong>

That's ARK-ee-OP-ter-ix, or Arcx for short.  Made by Giles (soft 'g') BOH-ket, or boh-KET, I wasn't exactly sure which.  It is, in <a href="http://gilesbowkett.blogspot.com/2008/02/archaeopteryx-ruby-midi-generator.html">his words</a>, "a Ruby MIDI generator," and "a system for auto-generating, self-modifying music."

Giles had hands-down the most entertaining talk of the day.  Instead of poring through each token of the code, he compared taking VC money (or "weasel-brained muppet fucker" money) to being an artist with a patron -- as the programmer/artist, your job is to make stuff that makes your VC/patron look good.  He showed some of Leonardo da Vinci's <a href="http://www.vebjorn-sand.com/thebridge.htm">designs</a> that weren't constructed until recently; that it took this long, he said, was a failure of da Vinci's time.  Similarly, staying within a VC's idea of what's possible is a failure of wasted passion and energy. Start-ups are so cheap now, you can ignore VCs -- so follow your passion, create an open-source-enriched ecosystem around it, and make money by servicing the niche market you made.  If your startup is great, you can say "my career is this thing"; if it's mediocre, you can say "my career <em>includes</em> this thing".  Just remember that good artists ship.

Which brings us to Arcx, Giles' idea for a crowd-interfacing, automatic music machine.  Someone asked whether it was wise to name a new project after an extinct species, and Giles got all clever: archaeopteryx was either the last dinosaur or the first bird, and the project could be either the last DJ tool, or the first automatic music machine, played by the crowd.  He played us some samples, and talked through the code just a bit, dropping hits about the <a href="http://en.wikipedia.org/wiki/CLOS">CLOS</a>-like structure of his code.  As fun as his talk was, I would've liked to hear more music, and more about the lambda-passing and CLOS stuff.

He also pointed out the most interesting ruby book I'd never heard <span class="asinTitle">of, <a href="http://www.amazon.com/Practical-Ruby-Projects-Programmer-Professionals/dp/159059911X/"><span>Practical Ruby Projects: Ideas for the Eclectic Programmer</span></a></span>.

<strong>Chris Wanstrath, ParseTree</strong>

Out of all the talks, Chris' was the one I'll be using first.  Lispers say "code is data," and I can see why that's so powerful -- but I haven't really tried it yet.  ParseTree brings some of that coolness to ruby:

[sourcecode language='ruby']
require 'ruby2ruby'

def to_ruby(&blk)
   blk.to_ruby
end

puts to_ruby { 1 + 1 }
puts to_ruby { |i| i == 42 }

def to_sexp(&blk)
   blk.to_sexp
end

puts to_sexp { 1 + 1 }
puts to_sexp { |i| i == 42 }
[/sourcecode]

...which produces:

[sourcecode language='ruby']
proc {
  (1 + 1)
}
proc { |i|
  (i == 42)
}
[:proc, nil, [:call,
   [:lit, 1], :+, [:array, [:lit, 1]]]]
[:proc, [:dasgn_curr, :i], [:call,
   [:dvar, :i], :==, [:array, [:lit, 42]]]]
[/sourcecode]

Most of the examples he gave generated query syntax in a ruby-idiomatic way: say you have an ORM, and you want users to search for users like this:

[sourcecode language='ruby']
old_cat_people = Users.select do |u|
   u.favorite_pet == "cat" && u.age > 100
end
[/sourcecode]

How could you turn that into SQL?  Call <code>to_sexp</code> on the query block (that's "to <a href="http://en.wikipedia.org/wiki/S-expression">S-expression</a>"), and evaluate the <a href="http://en.wikipedia.org/wiki/Abstract_syntax_tree">abstract syntax tree</a> it returns. Like this:

[sourcecode language='ruby']
class Users
   def self.select(&query)
      query = query.to_sexp

      # Now, query looks like this:
      # [:proc,
      #    [:dasgn_curr, :u],
      #       [:and,
      #          [:call,
      #             [:call, [:dvar, :u], :favorite_pet],
      #             :==,
      #             [:array, [:str, "cat"]]],
      #          [:call,
      #             [:call, [:dvar, :u], :age],
      #             :>,
      #             [:array, [:lit, 100]]]]]

      # Time to evaluate the AST.
   end
end
[/sourcecode]

Admittedly, it's not <em>that</em> trivial, but that's the gist of it -- and I think the gem helps you with this.  (Cue the smug Lispers: this stuff is natural in Lisp, the way passing <a href="http://eli.thegreenplace.net/2006/04/18/understanding-ruby-blocks-procs-and-methods/"><span style="text-decoration:line-through;">anonymous functions</span> blocks</a> is in ruby.)

But here's the interesting thing: we're on our way to building .Net's LINQ right into ruby.  Remember, it stands for <strong>L</strong>anguage <strong>In</strong>tegrated <strong>Q</strong>uery.  LINQ is a big deal for .Net folks, because it's handy.  Microsoft put a lot of work into it, and it still needs its own new syntax.  I think that's a pretty clear example of the power of being able to see your own AST, and code off it.

<strong>Ryan Davis, Hurting Code for Fun and Profit</strong>

<a href="http://blog.zenspider.com/">Ryan</a>'s talk was nominally about using tools like <a href="http://ruby.sadi.st/Heckle.html">Heckle</a> and <a href="http://ruby.sadi.st/Flog.html">Flog</a> to beat the evil out of code, but my favorite part was his introspection-driven development.  I <em>know</em> I'll want to refer others to his slides and audio throughout my career.

Some of his tips for improving as a programmer:

* Read.  1 technical book a month.  Sites like c2.com -- get close to the experts.
* Focus.  Only a few smart blogs: not zillions, not flame-prone.  (Flame-retardant blogs?)
* Grow.  Learn 1 new language a year.  Learn things outside of programming.
* Learn from the <a href="http://c2.com/cgi/wiki?PotteryChallenge">pottery challenge story</a> in <a href="http://c2.com/cgi/wiki?ArtAndFear">Art &amp; Fear</a>: practice, a lot.

Ryan is also a fellow Dvorak typist, and pretty emphatic about it.

<strong>Johnson</strong>

<a href="http://tenderlovemaking.com/2008/04/23/take-it-to-the-limit-one-more-time/">Johnson</a> is a ruby gem that executes JavaScript code.  (It's a successor to <a href="http://rubyforge.org/projects/rkelly/">RKelly</a>, which did the same thing.)  I don't know why I think this is so cool.  Most people agreed the main use case for something like this is testing, but it seems to me there might be neater tricks to play.  We'll see how I feel after playing with it for a while.

<strong>GoRuCo 2009?</strong>

I'm definitely going next year -- see you there.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>81</wp:post_id>
  <wp:post_date>2008-04-28 18:36:27</wp:post_date>
  <wp:post_date_gmt>2008-04-28 22:36:27</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>my-goruco-2008-highlights</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="goruco2008"><![CDATA[goruco2008]]></category>
  <category domain="post_tag" nicename="ruby"><![CDATA[Ruby]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[292320]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Passing by reference, and dog leashes</title>
  <link>http://invisibleblocks.com/2008/04/29/passing-by-reference-and-dog-leashes/</link>
  <pubDate>Tue, 29 Apr 2008 17:38:56 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.wordpress.com/?p=82</guid>
  <description/>
  <content:encoded><![CDATA[Pass-by-reference and pass-by-value are pretty confusing when you start learning to code.  When I first saw them, I know I ignored the distinction (until I got tired of my code not doing what I expected).  Throwing collections into the mix just makes it worse.

Today, though, we stumbled on a pretty decent analogy for passing-by-reference: a reference to an object is like a leash to a dog.  Let's take our dog Dagwood for a walk.

[sourcecode language='c#']
Dog dagwood = new Dog("Dagwood");
[/sourcecode]

<code>new Dog()</code> creates, of course, a new Dog object.  <code>Dog dagwood</code> creates a reference that can point to any Dog object -- it's really the leash, but we name our references for what they point to, rather than what they are: a reference, a handle, a leash.  The equals sign takes the leash, and hooks it to Dagwood's collar.  Now we can take Dagwood for a walk.

[sourcecode language='c#']
dagwood.walk();
[/sourcecode]

To tell Dagwood it's time to walk, we tug on the leash.  He feels the tug, and gets the message, so he starts following us.  We come to a busy road, and wait for the crossing signal, but Dagwood's oblivious, and tries to cross anyway.

[sourcecode language='c#']
dagwood.halt();
[/sourcecode]

Since we're stopped, he feels the tug of the leash again, gets the message, and stops.  We're sending messages to Dagwood through his leash.  In OO terms, sending a message to an object means calling one of its methods.  We're calling methods on our Dagwood <strong>through</strong> our reference to him, through the leash.

<strong>Storing a reference in an array</strong>

In the park, we find a snack shop.  We're getting hungry, but the snack shop doesn't let dogs inside.  Luckily, there's a chain link fence, and in our eyes, a chain link fence is nothing but a big row of places for us to attach a dog leash.  We tie a spare leash to the end of the fence, and attach it to Dagwood's collar.

[sourcecode language='c#']
Dog[] fence = new Dog[10]; // only room for 10 dogs
fence[0] = dagwood;
[/sourcecode]

What's happening here in OO terms is that our reference to Dagwood, our leash, is <strong>copied</strong> into the zeroth slot on the fence.  It's not our leash, but it's one just like it.  So now there are two leashes on Dagwood: one in our hand, and one on the fence.  We'll take our leash off Dagwood, since we can't very well hold it while we're in the store.
[sourcecode language='c#']
dagwood = null;
[/sourcecode]


Don't worry, he's fine...he's still tied to the fence, by that other leash.  Let's go buy cashews.

When we come out of the store, we want to re-attach our leash to Dagwood.

[sourcecode language='c#']
dagwood = fence[0];
[/sourcecode]

Now let's untie him from the fence, and head over to the lake.

[sourcecode language='c#']
fence[0] = null;
[/sourcecode]

<strong>Passing by reference</strong>

Passing references to methods works in much the same way.  Dagwood got kind of stinky, swimming in the lake, so let's bring him to the groomer for a bath.

[sourcecode language='c#']
DogGroomer.shampoo(dagwood);
[/sourcecode]

When you pass a reference to a method, your reference is copied into that method.  Again, it's like a new leash, one just like ours, springs into the groomer's hand -- now Dagwood's attached to us, and the groomer.  He gets fidgety when he's getting bathed, so it's just as well.

From the groomer's perspective, it might look like this:

[sourcecode language='c#']
void shampoo(Dog doggie) {
    wet(doggie);
    apply(shampoo, doggie);
    rinse(doggie);
    towelDry(doggie);
}
[/sourcecode]

The groomer doesn't care what Dagwood's name is, she just keeps calling him "doggie."  That's ok, she must see a lot of dogs during the day...names aren't that important to her.  The interesting thing is, even though it's the groomer who's shampooing our dog, since we still have a leash on him, we can observe him getting cleaner.

When she's done, the procedure ends, the method returns, and her leash to Dagwood disappears.  Which is fine, because he's stopped fidgeting, now that he's dry.

<strong>Garbage collection</strong>

We head back home through the park.  Dagwood's itching to run around, but we're tired, so we just unleash him.  Hopefully we can find him before it gets dark...

[sourcecode language='c#']
dagwood = null;
[/sourcecode]

Unfortunately, the dog catcher spots him running around without a leash, which is illegal in these parts -- a stray dog will hang around forever, eating up resources.  The dog catcher carries off our poor Dagwood, and destroys him.  We take it in stride, and try to keep the whole circle of <span style="text-decoration:line-through;">life</span> allocation-deallocation in mind.

<strong>So...</strong>

So that's how references work.  It's why code like this (C#) will ensure the balloon bouquet has at least one balloon that says "Happy Birthday!":

[sourcecode language='c#']
List&lt;Balloon&gt; balloons = GetBalloons();
Balloon printed = balloons.Find(Balloon.IsPrinted);
if (printed == null) {
   printed = new Balloon();
   printed.PrintMessage("Happy Birthday!");
   balloons.Add(printed);
}
return balloons;
[/sourcecode]]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>82</wp:post_id>
  <wp:post_date>2008-04-29 13:38:56</wp:post_date>
  <wp:post_date_gmt>2008-04-29 17:38:56</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>passing-by-reference-and-dog-leashes</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="learning"><![CDATA[Learning]]></category>
  <category domain="category" nicename="programming"><![CDATA[Programming]]></category>
  <category domain="category" nicename="software-thinking"><![CDATA[Software Thinking]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[292320]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Why "Less Code" Matters</title>
  <link>http://invisibleblocks.com/2008/06/23/why-less-code-matters/</link>
  <pubDate>Tue, 24 Jun 2008 02:22:33 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.wordpress.com/?p=83</guid>
  <description/>
  <content:encoded><![CDATA[
> ...being able to do task X with 50 lines of code is preferable to needing 500 lines of code to do task X. Less code takes longer to write, but the real benefits are around maintenance: less code means less of a chance of bugs, less to keep in your head, less for someone else (or yourself 6 months later) to read through and learn, less to test, and less to modify when you change the rest of the system.
> - Alan Keefer, <a href="http://guidewiredevelopment.wordpress.com/2008/04/29/syntax-matters/">Syntax Matters</a>

I'd like to expand on that.  I don't think it's clear how important "less code" is, or how harmful <em>more</em> code is.  So let's take an example written in a <a href="http://www.paulgraham.com/avg.html">Blub-y</a> language, and see how well we can refactor it.

(I know this post is kind of long, but it's mostly Blub code, and it should scan quickly.)

Let's make a sandwich.
<pre>routine makeSandwich
    look for the peanut butter in the cabinet
    if it's not there, look for it in the other cabinet
    put the peanut butter on the counter

    look for the jelly in the fridge
    if it's not there, look for it in the cabinet
    if it's not there, look for it in the other cabinet
    put the jelly on the counter

    find a napkin
    put the napkin on the counter

    find the bread in the bread drawer
    untie the bread bag
    take two pieces of bread from the bag
    close the bread bag
    put the bread back in the bread drawer
    put the two pieces of bread on the napkin

    find a butter knife
    put the butter knife on the napkin

    open the peanut butter jar
    stick the butter knife into the peanut butter jar
    with the butter knife, scoop out some peanut butter
    spread the peanut butter on one piece of bread
    close the peanut butter jar
    put the peanut butter back in the cabinet

    wipe the butter knife on the other piece of bread

    open the jelly jar
    stick the butter knife into the jelly jar
    with the butter knife, scoop out some jelly
    spread the jelly on one the other piece of bread
    close the jelly jar
    put the jelly back in the fridge

    put the knife in the sink</pre>
So much work!  No wonder I seldom cook.  Can we improve that at all?  Well, the "looking for in 2 cabinets" seems to be a pattern, so let's Extract Method:
<pre>routine lookForInTwoCabinets (lookFor)
    look for the lookFor in the cabinet
    if it's not there, look in the other cabinet
    return it

routine makeSandwich
    lookForInTwoCabinets (peanut butter)
    put the peanut butter on the counter

    look for the jelly in the fridge
    if it's not there, lookForInTwoCabinets(jelly)
    put the jelly on the counter
    ...</pre>
Can we move the "put it on the counter" inside <code>lookForInTwoCabinets</code>?  I don't know...it would work for the peanut butter, but what if we find the jelly in the fridge?  In that case, we wouldn't call <code>lookForInTwoCabinets(jelly)</code>, so we might never put the jelly on the counter.   Besides, the name doesn't really imply anything about what we do after we find the thing.  We should probably leave it outside.  Yeah, it's not so DRY, but let's move on.

That big block where we look for bread, we can't really compress it at all...but we <em>can</em> extract it, just to wrap the whole sequence of steps up with a name.
<pre>...
routine getBread
    find the bread in the bread drawer
    untie the bread bag
    take two pieces of bread from the bag
    close the bread bag
    put the bread back in the bread drawer
    put the two pieces of bread on the napkin

routine makeSandwich
    ...
    find a napkin
    put the napkin on the counter

    getBread

    find a butter knife
    put the butter knife on the napkin
    ...</pre>
Ok, we're making progress.  What about spreading the peanut butter &amp; jelly on the bread?  Can we extract another method?
<pre>routine spread (topping, breadSlice)
    open the topping jar
    stick the butter knife into the topping jar
    with the butter knife, scoop out some topping
    spread the topping on breadSlice
    close the topping jar
    put the topping back in the cabinet

routine makeSandwich
    ...
    find a butter knife
    put the butter knife on the napkin

    spread (peanut butter, one piece of bread)

    wipe the butter knife on the other piece of bread

    spread (jelly, the other piece of bread)

    put the knife in the sink</pre>
Great!  Except we just introduced a bug: after closing the topping jar,  <code>spread</code> always puts the topping back in the cabinet, and the jelly goes in the fridge (moldy jelly is a Bad Thing).  Introduce Parameter:
<pre>routine spread (topping, breadSlice, returnToppingTo)
    open the topping jar
    stick the butter knife into the topping jar
    with the butter knife, scoop out some topping
    spread the topping on breadSlice
    close the topping jar
    put the topping back in returnToppingTo

routine makeSandwich
    ...
    find a butter knife
    put the butter knife on the napkin

    spread (peanut butter, one piece of bread, the cabinet)

    wipe the butter knife on the other piece of bread

    spread (jelly, the other piece of bread, the fridge)

    put the knife in the sink</pre>
Ok, I think we're done.   (Does it make sense to send a "return topping to" parameter to a method that's just spreading?  Not now, we're almost ready to commit...)  Let's step back and admire our craft:
<pre>routine lookForInTwoCabinets (lookFor)
    look for the lookFor in the cabinet
    if it's not there, look in the other cabinet
    return it

routine getBread
    find the bread in the bread drawer
    untie the bread bag
    take two pieces of bread from the bag
    close the bread bag
    put the bread back in the bread drawer
    put the two pieces of bread on the napkin

routine spread (topping, breadSlice, returnToppingTo)
    open the topping jar
    stick the butter knife into the topping jar
    with the butter knife, scoop out some topping
    spread the topping on breadSlice
    close the topping jar
    put the topping back in returnToppingTo

routine makeSandwich
    lookForInTwoCabinets (peanut butter)
    put the peanut butter on the counter

    look for the jelly in the fridge
    if it's not there, lookForInTwoCabinets(jelly)
    put the jelly on the counter

    find a napkin
    put the napkin on the counter

    getBread

    find a butter knife
    put the butter knife on the napkin

    spread (peanut butter, one piece of bread, the cabinet)

    wipe the butter knife on the other piece of bread

    spread (jelly, the other piece of bread, the fridge)

    put the knife in the sink</pre>
31 lines down to...32 lines.  Ok, well, even if it's longer, is it <em>better? </em> <code>makeSandwich</code> is shorter, that's good.  But it doesn't feel like we've really made the job any easier -- we moved stuff around, but it's still all there.  There's no <a href="http://people.csail.mit.edu/gregs/ll1-discuss-archive-html/msg01552.html">semantic compression</a>.  It's still <a href="http://invisibleblocks.wordpress.com/2008/04/05/why-we-abstract-and-what-to-do-when-we-cant/">3 + 3 + 3 + 3 + 3 + 3, instead of 3 * 6</a>.

What did we think about?   We had to ask ourselves whether to move "put it on the counter" into <code>lookForInTwoCabinets</code>.   The value of <code>getBread</code> is questionable.   We had the bug with <code>spread</code> putting the jelly in the cabinet, and we had to wonder about its "return topping to" parameter.  Every time we consider refactoring, we risk introducing a crappy abstraction that confuses, when it should clarify.   Every decision point, we have to think about it, and we might get it wrong.   But that's why they pay us the big bucks, right?   Software development is hard, after all!

No.   We're looking at <a href="http://en.wikipedia.org/wiki/No_Silver_Bullet">accidental complexity, not essential complexity</a>.  Here's the same code, in a higher-level language, that removes some of the accidental complexity:
<pre>put peanut butter on a piece of bread
put jelly on another piece of bread
stick the peanut butter to the jelly</pre>
Essential complexity is when you start thinking, why jelly?  Why not cinnamon and raisins with the peanut butter?  Or currants?  What <em>kind</em> of bread?  Let's use multigrain.  Would peanut butter with jelly <em>and</em> banana be overkill?  What to drink?  Essential complexity looks at the problem, not the solution.  Accidental complexity is when you say "I really want to do THIS but dammit, my language just won't let me."  Or, "Gosh, we have <em>so much code</em> to move around, I can barely see what it does."  Or when you just can't figure out where to put that parameter, or method, or class.

<strong>So what does this have to do with "less code"?</strong>

This is why we say <a href="http://c2.com/xp/YouArentGonnaNeedIt.html">YAGNI</a>.  If you add that method on a hunch that it'll be helpful, you have more stuff to move around, more accidental complexity, more decisions to make about your housekeeping, all for a <em>speculative</em> benefit.  It's like playing lotto - you pay up front, and if you're really lucky, you'll win.  But if you lose, you've wasted resources, and now you have something you need to throw away.

Each of the possible ways to code and refactor that sandwich code is pretty valid...any of them could be in our source control repository.  A new hire is going to have to read through whichever one we coded, and try to mentally get from there, to the 3-liner at the end, before he can really be effective.  Why don't we just <em>start</em> him there?

Let's take that 3 + 3 + 3 + 3 + 3 + 3 example again.  What if we don't use multiplication?  We could still refactor it.  The first two threes are kind of together, let's group them:  6 + 3 + 3 + 3 + 3.  And the last one looks kind of bulky, so let's decompose it:  6 + 3 + 3 + 3 + 1 + 1 + 1.  Could we move some of the numericality from the middle 3 to an earlier one?  6 + 3 + 4 + 2 + 1 + 1 + 1.  Oh, and let's sort, so it's easier to find the numbers you want:  1 + 1 + 1 + 2 + 3 + 4 + 6.  There!  Is it immediately obvious to you that this is the same as 3 * 6?  Of course not.  Ralph Johnson calls refactoring "<a href="http://www.amazon.com/Refactoring-Improving-Existing-Addison-Wesley-Technology/dp/0201485672">wiping dirt off a window</a>," and you just put more dirt on.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>83</wp:post_id>
  <wp:post_date>2008-06-23 22:22:33</wp:post_date>
  <wp:post_date_gmt>2008-06-24 02:22:33</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>why-less-code-matters</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="abstraction"><![CDATA[abstraction]]></category>
  <category domain="category" nicename="programming"><![CDATA[Programming]]></category>
  <category domain="post_tag" nicename="refactoring"><![CDATA[refactoring]]></category>
  <category domain="post_tag" nicename="semantic-compression"><![CDATA[semantic compression]]></category>
  <category domain="category" nicename="software-thinking"><![CDATA[Software Thinking]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[292320]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>9449</wp:comment_id>
    <wp:comment_author><![CDATA[lispy]]></wp:comment_author>
    <wp:comment_author_email>otherjeff@netzero.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>65.40.95.160</wp:comment_author_IP>
    <wp:comment_date>2008-06-24 10:32:29</wp:comment_date>
    <wp:comment_date_gmt>2008-06-24 14:32:29</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Hey Daniel,

I think Perl exemplifies what you're talking about here.  As a substitute for, say VB6 text manipulation on one hand... and grep/sed/awk/shell on the other, it really cuts out gobs of accidental complexity.

Your OOP-only languages (Java/C#) certainly bring their own accidental complexity to the table whatever you're doing with them.  Their attempts to implement perlishness just seems clunky to me-- Perl's regex's are seamlessly integrated everywhere and you just say what you mean without having to fire up yet another object....

(Also, where did Ralph Johnson say that?  Your link just goes to an Amazon page with no Raplh Johnson stuff on it....)]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>1177370</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2008-06-24 14:32:29</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9450</wp:comment_id>
    <wp:comment_author><![CDATA[Daniel Bernier]]></wp:comment_author>
    <wp:comment_author_email>danbernier@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://invisibleblocks.wordpress.com/</wp:comment_author_url>
    <wp:comment_author_IP>12.24.127.147</wp:comment_author_IP>
    <wp:comment_date>2008-06-24 13:54:40</wp:comment_date>
    <wp:comment_date_gmt>2008-06-24 17:54:40</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Hey lispy,

I've only done a touch of Perl (I'm more of a Ruby guy), but from what I've seen, you're right.  Like you said, having regexps, arrays, and hashes built-in is big.  And having non-clunky function literals is a big help, too.

I originally found that Ralph Johnson quote in Martin Fowler's Refactoring, on page 56...it's the very last sentence on the page.  Here's the full paragraph:

<blockquote>Early on I do refactoring like this on little details. As the code gets clearer, I find I can see things about the design that I could not see before. Had I not changed the code, I probably never would have seen these things, because I'm just not clever enough to visualize all this in my head. Ralph Johnson describes these early refactorings as wiping the dirt off a window so you can see beyond. When I'm studying code I find refactoring leads me to higher levels of understanding that otherwise I would miss.</blockquote>]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>292320</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2008-06-24 17:54:40</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9451</wp:comment_id>
    <wp:comment_author><![CDATA[Daniel Bernier]]></wp:comment_author>
    <wp:comment_author_email>danbernier@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://invisibleblocks.wordpress.com/</wp:comment_author_url>
    <wp:comment_author_IP>12.24.127.147</wp:comment_author_IP>
    <wp:comment_date>2008-06-24 13:59:21</wp:comment_date>
    <wp:comment_date_gmt>2008-06-24 17:59:21</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Here's the <a href="http://books.google.com/books?id=1MsETFPD3I0C&amp;pg=PA56&amp;lpg=PA56&amp;dq=%22Ralph+Johnson+describes+these+early+refactorings+as+wiping+the+dirt+off+a+window%22&amp;ots=pKM2n0PDeb&amp;sig=PTibYIScP-9BoqB0UaU2pJLaF5E&amp;hl=en&amp;sa=X&amp;oi=book_result&amp;resnum=2&amp;ct=result#PPA56,M1" rel="nofollow">Ralph Johnson quote on Google Books</a>.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>292320</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2008-06-24 17:59:21</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Constructor Inheritance in C# and Ruby</title>
  <link>http://invisibleblocks.com/2008/06/30/constructor-inheritance-in-c-sharp-and-ruby/</link>
  <pubDate>Mon, 30 Jun 2008 21:01:15 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.wordpress.com/?p=85</guid>
  <description/>
  <content:encoded><![CDATA[This morning: "Surprise!  Want to conduct a job interview?"  I've been here a little over 3 months, but um, sure!  "Great.  He's in the conference room right now."  Wow, we move quick.

So, without much time to gather my thoughts for good tech-y interview questions, I printed out the resume, and I winged it.  In the middle of the interview, I flipped over his resume, and scribbled out short-hand C# like this:

[sourcecode language='c#']
class A {
   public A() {
      Console.WriteLine("in A");
   }
}
class B : A {
   public B() {
      Console.WriteLine("in B");
   }
}
class C : B {
   public C() {
      Console.WriteLine("in C");
   }
}
new C();
[/sourcecode]

I asked, "What does this print out?"  You know, see if he knows which order constructor inheritance goes in.  I wanted to hear, "in A, in B, in C", but not "in C, in B, in A".

I forget exactly what the candidate's answer was, but it stirred up a bit of discussion, because the three of us interviewing him disagreed on the answer:  one of us said it would only print "in C," because you need to stick <code>: base()</code> on the B and C constructors for the inheritance to work;  I agreed with the third interviewer, who said it would print "in A, in B, in C", because constructor inheritance is automatic (with no-arg constructors).  We fudged around it, laughed a bit, and the interview moved on.  (Update: <a href="#update">here's the answer</a>.)

Back at my desk, I had to try it out.  I didn't want to bother with a whole Visual Studio .sln and all that nonsense, so I tried it in Ruby:

[sourcecode language='ruby']
class A
    def initialize
        puts "in A"
    end
end
class B < A
    def initialize
        puts "in B"
    end
end
class C < B
    def initialize
        puts "in C"
    end
end

C.new
[/sourcecode]

And the output is..."in C"!  Huh?  That can't be right...I was <em>sure</em> constructors were inherited automatically!  Then I realized, of course!  I'm working in Ruby, and you have to explicitly call superclass methods, constructors included:

[sourcecode language='ruby']
class A
    def initialize
        super # <- call the superclass' constructor
        puts "in A"
    end
end
class B < A
    def initialize
        super # <- call the superclass' constructor
        puts "in B"
    end
end
class C < B
    def initialize
        super # <- call the superclass' constructor
        puts "in C"
    end
end

C.new
[/sourcecode]

Stupid Ruby!  Did I find a case where C# actually works nicer than Ruby?  But then I realized, this also means Ruby lets you change the order of the constructor inheritance: you can go bottom-up, if you want, or even stranger:

[sourcecode language='ruby']
class A
    def initialize
        super
        puts "in A"
    end
end
class B < A
    def initialize
        super
        puts "in B"
    end
end
class C < B
    def initialize
        puts "in C"
        super # <- call up the chain AFTER we're done
    end
end

C.new
[/sourcecode]

That one prints out "in C, in A, in B".  The nice thing?  No rule to memorize, and more control.  The down-side?  More to type.  But given how compact Ruby already is, I think the added control is worth it here.  What do you think?

<a name="update" href=""></a>
(<strong>Update:</strong> I eventually <em>did</em> fire up Visual Studio, and the code above printed "in A, in B, in C", without me typing out <code>: base()</code>.  C# inherits constructors automatically, and the superclass constructors run before subclass constructors.)]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>85</wp:post_id>
  <wp:post_date>2008-06-30 17:01:15</wp:post_date>
  <wp:post_date_gmt>2008-06-30 21:01:15</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>constructor-inheritance-in-c-sharp-and-ruby</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="c"><![CDATA[c#]]></category>
  <category domain="post_tag" nicename="inheritance"><![CDATA[inheritance]]></category>
  <category domain="category" nicename="programming"><![CDATA[Programming]]></category>
  <category domain="post_tag" nicename="ruby"><![CDATA[Ruby]]></category>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[constructor-inheritance]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[292320]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>9532</wp:comment_id>
    <wp:comment_author><![CDATA[Daniel Bernier]]></wp:comment_author>
    <wp:comment_author_email>danbernier@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://invisibleblocks.wordpress.com/</wp:comment_author_url>
    <wp:comment_author_IP>12.24.127.147</wp:comment_author_IP>
    <wp:comment_date>2008-11-03 17:00:21</wp:comment_date>
    <wp:comment_date_gmt>2008-11-03 21:00:21</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[@shahbaz, since you mention destructors, I take it you mean the C# code at the top.  Unfortunately, though, you're wrong -- the code prints "In A, In B, In C."  I'm also not sure what you mean by "reverse order".  I guess whether it's reverse depends on how you think about it.  In any case, superclass constructors fire before subclass constructors.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>292320</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2008-11-03 21:00:21</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9531</wp:comment_id>
    <wp:comment_author><![CDATA[shahbaz]]></wp:comment_author>
    <wp:comment_author_email>shahbazali_001@yahoo.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>119.154.53.150</wp:comment_author_IP>
    <wp:comment_date>2008-11-03 16:08:00</wp:comment_date>
    <wp:comment_date_gmt>2008-11-03 20:08:00</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[It Will Print in C ,in B , in A
Because constructors are call in the reverse order 
ad destructors are called in step by step]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2008-11-03 20:08:00</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9464</wp:comment_id>
    <wp:comment_author><![CDATA[Ben]]></wp:comment_author>
    <wp:comment_author_email>bdowden@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>12.178.84.66</wp:comment_author_IP>
    <wp:comment_date>2008-07-14 08:35:04</wp:comment_date>
    <wp:comment_date_gmt>2008-07-14 12:35:04</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Ah, you finally updated it!  Way to go, Dan.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2008-07-14 12:35:04</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9722</wp:comment_id>
    <wp:comment_author><![CDATA[someone]]></wp:comment_author>
    <wp:comment_author_email>postmaster@invisibleblocks.wordpress.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>66.193.204.77</wp:comment_author_IP>
    <wp:comment_date>2010-06-23 11:54:18</wp:comment_date>
    <wp:comment_date_gmt>2010-06-23 15:54:18</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Not exactly a Ruby nut here, but OF COURSE what Ruby is doing is better than the C# way.  Automatically calling superclass methods is horrible, because the programmer has to remember an arbitrary rule, and because the subclass doesn't have control over when the superclass does its stuff.  Sometimes to want to pre-process the arguments before calling the superclass' constructor, and sometimes you want to diddle with the construction before returning.  If you have an automatic call, then your language is only going to let you do one of those things (which one, depends on the rule).  Too many real-life cases where that results in a pain in the ass.  Explicit superclass calls are the Right Thing.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1277308459</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2010-06-23 15:54:18</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9697</wp:comment_id>
    <wp:comment_author><![CDATA[demikaze]]></wp:comment_author>
    <wp:comment_author_email>demikaze@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>62.141.223.223</wp:comment_author_IP>
    <wp:comment_date>2009-12-01 16:46:14</wp:comment_date>
    <wp:comment_date_gmt>2009-12-01 20:46:14</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[...
class B < A
    def initialize
        super
        puts "in B"
        super

    end
end
...

This (super...super) works! :)]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2009-12-01 20:46:14</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Gregory Brown at the Hartford Ruby Brigade</title>
  <link>http://invisibleblocks.com/2008/07/30/gregory-brown-at-the-hartford-ruby-brigade/</link>
  <pubDate>Wed, 30 Jul 2008 12:19:56 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.wordpress.com/?p=89</guid>
  <description/>
  <content:encoded><![CDATA[This past Monday night, <a href="http://rubymendicant.wikidot.com/">Gregory Brown, ruby mendicant</a>, stopped by for the <a href="http://groups.google.com/group/hartford-ruby-brigade">Hartford Ruby Brigade's</a> July meeting.

We started off with a <a href="http://rrobots.rubyforge.org/">Ruby Robots</a> show-down, but since everyone still had work to do on their bots, we decided it'll be a regular event.  Right now, my lame-ass <a href="http://groups.google.com/group/hartford-ruby-brigade/web/Edger.rb">Edger bot</a> is, I believe, the champion, but I expect that to change next month.  Greg's bot, the <a href="http://hartford-ruby-brigade.googlegroups.com/web/terminator.rb">terminator</a>, won the Matrix-version of the competition, where <span style="text-decoration:line-through;">cheating</span> hacking the system is allowed.  You can watch Greg <a href="http://www.vimeo.com/1428070?pg=embed&amp;sec=1428070">talk about cheating Ruby Robots</a>, how he hacked the enemy bots, and defended his bot against similar attacks.  It's relevant to any ruby discussion, because he's using basic ruby techniques, and ruby's open and dynamic nature, to do it all.

Greg's talks on <a href="http://rubyreports.org/">Ruport</a>, <a href="http://prawn.lighthouseapp.com/projects/9398/home">Prawn</a>, and the finer points of designing a useful API in ruby were really good, too.  With luck, they'll be up on Vimeo soon.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>89</wp:post_id>
  <wp:post_date>2008-07-30 08:19:56</wp:post_date>
  <wp:post_date_gmt>2008-07-30 12:19:56</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>gregory-brown-at-the-hartford-ruby-brigade</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="hartfordrb"><![CDATA[Hartford.rb]]></category>
  <category domain="category" nicename="programming"><![CDATA[Programming]]></category>
  <category domain="post_tag" nicename="ruby"><![CDATA[Ruby]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[292320]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Long-running averages, without the sum of preceding values</title>
  <link>http://invisibleblocks.com/2008/07/30/long-running-averages-without-the-sum-of-preceding-values/</link>
  <pubDate>Wed, 30 Jul 2008 17:54:42 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.wordpress.com/?p=99</guid>
  <description/>
  <content:encoded><![CDATA[Here's a little lunch-time diversionary math.  Suppose you want a function that takes a number, and returns the average of all the numbers it's been called with so far.  Handy for continuously updated displays, that kind of thing.  Here's a method that will return this averaging function.

<pre>
private static Func MakeAverager()
{
    float sum = 0;
    int count = 0;
    return delegate(float x)
    {
        sum += x;
        count += 1;
        return sum/count;
    };
}
</pre>

It creates <code>sum</code> and <code>count</code> variables for the function to close over.  The function takes a number, <code>x</code>, and adds it to <code>sum</code>.  It increments <code>count</code>, and divides.  Pretty standard.

Now, let's get crazy, and pretend this code is going on <a href="http://voyager.jpl.nasa.gov/">Voyager</a>, and it'll be running for ever.  <code>sum</code> will get pretty high, right?  We'll blow through 2<sup>31</sup>, the upper-bound for .Net 32-bit ints.  Sure, we could make it a <code>long</code>, and go up to 2<sup>63</sup>, but that's not the point.  The point is, it'll eventually run out, because <code>sum</code> is too high.

I've been chewing on this brain-teaser for a while.  I knew there must be a way to calculate a long-running average without storing the sum and the count; it seems the average so far, and the count, should be enough, but I don't want to resort to <code>((average * count) + x) / count++</code>, because that's the exact same problem.  (Of course, <code>count</code> could still get so high it overflows, but that's somewhat less likely.  Hush, you.)

I finally sat down and figured it out.  The trick is, each successive x tugs your average up or down -- first by a lot, but by less over time.  With each x, the average gets harder to move:  the effect each new x has on the average is inversely proportionate to the count.  We can put it like this:

<pre>
average += (x - average) / count
</pre>

We tug average by <code>x - average</code>, the distance between them, scaled down by count.  Then, add that on to average (of course, if x &lt; average, then x - average is negative, so it'll tug the average down).

Let's make a new averager.

<pre>
private static Func MakeNewAverager()
{
    float average = 0;
    int count = 0;
    return delegate(float x)
    {
        average += (x - average) / ++count;
        return average;
    };
}
</pre>

It works the same, but it'll take a lot longer for <code>count</code> to overflow than <code>sum</code>.

For the record, here's the ruby I used to sketch this idea out.  Of course, in ruby, this problem is even more bogus, because ruby's Bignum can handle any number that your machine has enough free RAM to store.  But still.

[sourcecode language="ruby"]
def make_averager
    sum, count = 0, 0
    lambda { |x|
        sum += x
        count += 1
        sum.to_f / count
    }
end

def make_sum_free_averager
    avg = 0.0
    count = 0
    lambda { |x|
        count += 1
        avg += (x - avg) / count
    }
end
[/sourcecode]]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>99</wp:post_id>
  <wp:post_date>2008-07-30 13:54:42</wp:post_date>
  <wp:post_date_gmt>2008-07-30 17:54:42</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>long-running-averages-without-the-sum-of-preceding-values</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="average"><![CDATA[average]]></category>
  <category domain="post_tag" nicename="c"><![CDATA[c#]]></category>
  <category domain="post_tag" nicename="math"><![CDATA[math]]></category>
  <category domain="category" nicename="programming"><![CDATA[Programming]]></category>
  <category domain="post_tag" nicename="ruby"><![CDATA[Ruby]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[292320]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[long-running-averages-without-the-sum-of-preceeding-values]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>9486</wp:comment_id>
    <wp:comment_author><![CDATA[Daniel Bernier]]></wp:comment_author>
    <wp:comment_author_email>danbernier@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://invisibleblocks.wordpress.com/</wp:comment_author_url>
    <wp:comment_author_IP>12.24.127.147</wp:comment_author_IP>
    <wp:comment_date>2008-08-01 08:39:17</wp:comment_date>
    <wp:comment_date_gmt>2008-08-01 12:39:17</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[@Guy, I think jonathantan86 did it just fine.  Though I have to admit, I didn't go through all that rigor, going from brute force to new equation...I kind of felt my way through the problem, formalized the new version in code, and tested it against the brute force version.  What can I say?  <a href="http://www.oopsla.org/2005/ShowEvent.do?id=403" rel="nofollow">Programming is a Good Medium for Expressing Poorly Understood and Sloppily Formulated Ideas.</a>]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>292320</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2008-08-01 12:39:17</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9485</wp:comment_id>
    <wp:comment_author><![CDATA[jonathantan86]]></wp:comment_author>
    <wp:comment_author_email>jonathantan86@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>60.49.57.176</wp:comment_author_IP>
    <wp:comment_date>2008-08-01 05:27:11</wp:comment_date>
    <wp:comment_date_gmt>2008-08-01 09:27:11</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[The math:

Let a := old average, a' := new average
Let n := *new* count
Let x := value just inserted

From brute-force:

a' = (a(n-1) + x) / n [a * (n-1) is the sum of the n-1 numbers]
= a(n-1)/n + x/n
= an/n - a/n + x/n
= a + (x-a)/n

which is average += (x - average)/n.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2008-08-01 09:27:11</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9478</wp:comment_id>
    <wp:comment_author><![CDATA[Top Posts &laquo; WordPress.com]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://botd.wordpress.com/2008/08/01/top-posts-826/</wp:comment_author_url>
    <wp:comment_author_IP>66.135.48.192</wp:comment_author_IP>
    <wp:comment_date>2008-07-31 20:01:55</wp:comment_date>
    <wp:comment_date_gmt>2008-08-01 00:01:55</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[...]  Long-running averages, without the sum of preceding values Here's a little lunch-time diversionary math.  Suppose you want a function that takes a number, and returns the [...] [...]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2008-08-01 00:01:55</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9477</wp:comment_id>
    <wp:comment_author><![CDATA[Running Standard Deviations &laquo; Subluminal Messages]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://subluminal.wordpress.com/2008/07/31/running-standard-deviations/</wp:comment_author_url>
    <wp:comment_author_IP>72.233.44.26</wp:comment_author_IP>
    <wp:comment_date>2008-07-31 15:53:16</wp:comment_date>
    <wp:comment_date_gmt>2008-07-31 19:53:16</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[...] 31, 2008   My friend Dan at Invisible Blocks came up with a great way to compute a long-running mean from the count and [...]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2008-07-31 19:53:16</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9476</wp:comment_id>
    <wp:comment_author><![CDATA[Jim McCusker]]></wp:comment_author>
    <wp:comment_author_email>mccusker@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://subluminal.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>130.132.202.26</wp:comment_author_IP>
    <wp:comment_date>2008-07-31 14:39:03</wp:comment_date>
    <wp:comment_date_gmt>2008-07-31 18:39:03</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[This is a great way of keeping running averages. I've used this for computing cluster centroids, since the average *is* the centroid, it's easier to keep the count, as you said. We worked with floats exclusively, as the values were multidimensional vectors converted from various data types. There's a variation on this that can be used to recompute the standard deviation from the new mean by tracking the power sum average, but you do need to recompute the sums:

(python)

count=0
mean=0
pwrSumAvg=0
stdDev=0

def update(x):
    count += 1
    mean += (x-mean)/count
    pwrSumAvg += ( x*x - pwrSumAvg) / count
    stdDev = sqrt(pwrSumAvg*count - mean*count) / (count*(count-1))]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2008-07-31 18:39:03</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9475</wp:comment_id>
    <wp:comment_author><![CDATA[Daniel Bernier]]></wp:comment_author>
    <wp:comment_author_email>danbernier@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://invisibleblocks.wordpress.com/</wp:comment_author_url>
    <wp:comment_author_IP>12.24.127.147</wp:comment_author_IP>
    <wp:comment_date>2008-07-31 07:56:08</wp:comment_date>
    <wp:comment_date_gmt>2008-07-31 11:56:08</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Stoat, witness the sloppy thinking:  I was actually thinking of summing ints, not floats, when I started the problem.  Then, when integer division caused wicked rounding errors, I thought "oh, right," and made them floats, forgetting about the change in range that meant.  Maybe I should have phrased the whole thing as just a mental exercise, with silly constraints, and a proof of correctness in code.  I trust no one's going to drop this code into production soon.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>292320</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2008-07-31 11:56:08</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9474</wp:comment_id>
    <wp:comment_author><![CDATA[Stoat]]></wp:comment_author>
    <wp:comment_author_email>anj@anjackson.net</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>194.66.238.27</wp:comment_author_IP>
    <wp:comment_date>2008-07-31 06:00:34</wp:comment_date>
    <wp:comment_date_gmt>2008-07-31 10:00:34</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[You're not summing an int, or a long, you are summing a float (http://steve.hollasch.net/cgindex/coding/ieeefloat.html).  If you use a double-precision one, this will not top-out at 2^63, but roughly 2^1023.  Your algorithm will top-out much faster than this, as it will break horribly when your integer 'count' overflows 2^32 and your reasoning for ignoring this depends on the values of x being larger than 1, and the value of sum also being an int. Finally, your algorithm is susceptible to ignoring any total contribution from small numbers that are not near the mean (summation underflow). Do everything in double precision, and be careful, and you'll be able to make it run forever.  See http://en.wikipedia.org/wiki/Kahan_summation_algorithm for some ideas.

Stoat.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2008-07-31 10:00:34</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9479</wp:comment_id>
    <wp:comment_author><![CDATA[Guy]]></wp:comment_author>
    <wp:comment_author_email>Guy.Eschemann@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>82.210.236.73</wp:comment_author_IP>
    <wp:comment_date>2008-08-01 03:29:23</wp:comment_date>
    <wp:comment_date_gmt>2008-08-01 07:29:23</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Could you please explain how you came to the expression:

average += (x - average) / count ?

from the brute-force version:

average(n) = ( sum(n-1) + x ) / ( count(n-1) + 1 )

Thanks!]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2008-08-01 07:29:23</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9466</wp:comment_id>
    <wp:comment_author><![CDATA[Bill]]></wp:comment_author>
    <wp:comment_author_email>bill.rawlinson@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://cf-bill.blogspot.com</wp:comment_author_url>
    <wp:comment_author_IP>198.183.217.221</wp:comment_author_IP>
    <wp:comment_date>2008-07-30 16:04:38</wp:comment_date>
    <wp:comment_date_gmt>2008-07-30 20:04:38</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Very cool solution to the problem - thanks for sharing your thoughts.

Out of curiosity to see how exact this method is I figured I would do a very simple test.  Both examples have an average of 2 after 200 iterations but the 201st iteration passes in a value of x=4 - the two resultant averages are very, close to each other (I imagine the difference is due to the calculator I used forcing a rounding on me) - I just figured I would post it here for consideration:

Traditional Result: (404/201)
2.0099502487562189054726368159204

Your Algorithim: 2 + (2/201)
2.009950248756218905472636815920398

Again, thanks for sharing.  I like it and it seems like an easier way, in general, to compute a running average.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2008-07-30 20:04:38</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9467</wp:comment_id>
    <wp:comment_author><![CDATA[Daniel Bernier]]></wp:comment_author>
    <wp:comment_author_email>danbernier@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://invisibleblocks.wordpress.com/</wp:comment_author_url>
    <wp:comment_author_IP>12.24.127.147</wp:comment_author_IP>
    <wp:comment_date>2008-07-30 16:16:24</wp:comment_date>
    <wp:comment_date_gmt>2008-07-30 20:16:24</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Whoa!  That aspect of the problem didn't occur to me, but I don't think I'd have expected that result, even if it had.  I guess I can deal with only-accurate-to-30-decimal-places.  Thanks!]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>292320</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2008-07-30 20:16:24</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9468</wp:comment_id>
    <wp:comment_author><![CDATA[Paul]]></wp:comment_author>
    <wp:comment_author_email>MorganPaulW@Hotmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>12.154.162.2</wp:comment_author_IP>
    <wp:comment_date>2008-07-30 16:28:23</wp:comment_date>
    <wp:comment_date_gmt>2008-07-30 20:28:23</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[If you replace your count with a weight factor you've got an exponential average (http://en.wikipedia.org/wiki/Exponential_average#Exponential_moving_average).  No chance for overflow but current values have more weight in the average that prior values.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2008-07-30 20:28:23</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9469</wp:comment_id>
    <wp:comment_author><![CDATA[Daniel Bernier]]></wp:comment_author>
    <wp:comment_author_email>danbernier@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://invisibleblocks.wordpress.com/</wp:comment_author_url>
    <wp:comment_author_IP>12.24.127.147</wp:comment_author_IP>
    <wp:comment_date>2008-07-30 16:39:01</wp:comment_date>
    <wp:comment_date_gmt>2008-07-30 20:39:01</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Paul, thanks for pointing that out...especially since it links to <a href="http://en.wikipedia.org/wiki/Triangle_number" rel="nofollow">Triangle numbers</a>, which I'd thought about, but didn't know had a name.

Every time I drive my Prius, I want it to give me a weighted running average of my mileage, instead of the straight running average.  I care more about my mileage over this tank of gas, or the past few weeks, than I do about 4 months ago.  I'll send this to Toyota.  :)]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>292320</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2008-07-30 20:39:01</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9470</wp:comment_id>
    <wp:comment_author><![CDATA[Drew]]></wp:comment_author>
    <wp:comment_author_email>drew.haven@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>171.65.19.32</wp:comment_author_IP>
    <wp:comment_date>2008-07-30 17:50:35</wp:comment_date>
    <wp:comment_date_gmt>2008-07-30 21:50:35</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I had thought of doing this, but I was always worried that in a long-running system you'd reach a point where a (x - average)/count = 0 due to precision problems.  Essentially each iteration becomes less precise until you've lost all your precision.  Then it will never change even if the next (10 * count) values of x are (average + 1)

I suppose as long as this takes a few orders of magnitude longer than the sum version, then it is useful.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2008-07-30 21:50:35</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9471</wp:comment_id>
    <wp:comment_author><![CDATA[Daniel Bernier]]></wp:comment_author>
    <wp:comment_author_email>danbernier@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://invisibleblocks.wordpress.com/</wp:comment_author_url>
    <wp:comment_author_IP>64.252.167.233</wp:comment_author_IP>
    <wp:comment_date>2008-07-30 18:24:14</wp:comment_date>
    <wp:comment_date_gmt>2008-07-30 22:24:14</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[@Drew

You mean, as count gets really huge, (x-average)/count tends towards 0, and eventually the precision will bottom out, right?  I hadn't thought of that, good point.  I tried it out in ruby -- a really tiny x-average, and count is .Net's long.MaxValue, 263, or ~9 quintillion.

1.0e-300 / (2 ** 63)  #-&gt; 1.08417765323403e-319

So there's enough precision (in ruby, on WinXP 32, at least) to last through all that.  I guess that's the few orders of magnitude difference.  :)]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>292320</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2008-07-30 22:24:14</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9472</wp:comment_id>
    <wp:comment_author><![CDATA[Guy Hurst]]></wp:comment_author>
    <wp:comment_author_email>gnhurst@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>72.218.145.118</wp:comment_author_IP>
    <wp:comment_date>2008-07-31 01:41:15</wp:comment_date>
    <wp:comment_date_gmt>2008-07-31 05:41:15</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I felt drawn to work on this problem before seeing your solution. (I tend to like such challenges). As I worked on it, I realized that it was just an exercise in transferring the use of precision on the left side of the decimal point to the right side. Really, what is the difference between multiplying two numbers for a large result and dividing two numbers for a tiny result? The computer is just bit shifting in the opposite direction, now that I think about it.

So, in the end, it is all about precision, whether during multiplication or division. You started out trying to keep things within 32 bits, but notice how you resolved the division precision with 63 :)  We will run into a similar situation if the count exceeds that as well.

In any case, thank you for the stimulating post!]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2008-07-31 05:41:15</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9784</wp:comment_id>
    <wp:comment_author><![CDATA[annonymous]]></wp:comment_author>
    <wp:comment_author_email>ab@invalid.com.moon</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>189.31.207.184</wp:comment_author_IP>
    <wp:comment_date>2011-01-08 11:50:23</wp:comment_date>
    <wp:comment_date_gmt>2011-01-08 15:50:23</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Thanks for the solution

You can also use boost/accumulators with tag::mean(immediate):

#include 
#include 
#include 

#include 
#include 
#include 

namespace bacc = boost::accumulators;

void test1()
{
    int i, j;
    typedef int16_t mytype;
    bacc::accumulator_set<mytype, bacc::stats > bm;
    for(i = 0; i < 100; i++) {
	for(j = 0; j < 99; j++) {
	    bm(10000);
	}
	std::cout << i << '%\n';
    }
    std::cout << bacc::mean(bm) << '\n';
}

void test2()
{
    int i;
    typedef char mytype;
    bacc::accumulator_set<mytype, bacc::stats > bm;
    for(i = 0; i < 100; i++) {
	bm(i);
	std::cout << 'bm: ' << bacc::mean(bm) << '\n';
    }
}
void test3()
{
    int i;
    typedef int64_t mytype;
    bacc::accumulator_set<mytype, bacc::stats > bm;
    for(i = 0; i < 100; i++) {
	bm(i);
	std::cout << 'bm: ' << bacc::mean(bm) << '\n';
    }
}

int main()
{
    std::cout << 'TEST 1\n';
    test1();
    std::cout << 'TEST 2\n';
    test2();
    std::cout << 'TEST 3\n';
    test3();
    return 0;
}]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1294501823</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1294501824.0051";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2011-01-08 15:50:23</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9785</wp:comment_id>
    <wp:comment_author><![CDATA[annonymoous]]></wp:comment_author>
    <wp:comment_author_email>ab@invalid.com.moon</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>189.31.207.184</wp:comment_author_IP>
    <wp:comment_date>2011-01-08 11:52:05</wp:comment_date>
    <wp:comment_date_gmt>2011-01-08 15:52:05</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Gah... Includes got removed...

Here are the ones I provided:

iostream
boost/cstdint.hpp
boost/accumulators/accumulators.hpp
boost/accumulators/statistics/mean.hpp
boost/accumulators/statistics/stats.hpp]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1294501925</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1294501926.1489";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2011-01-08 15:52:05</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9795</wp:comment_id>
    <wp:comment_author><![CDATA[Charles]]></wp:comment_author>
    <wp:comment_author_email>charles@loneaspen.com</wp:comment_author_email>
    <wp:comment_author_url>http://flvcomm.org</wp:comment_author_url>
    <wp:comment_author_IP>134.197.171.62</wp:comment_author_IP>
    <wp:comment_date>2011-06-16 16:12:35</wp:comment_date>
    <wp:comment_date_gmt>2011-06-16 20:12:35</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[You still have a failure area, and that is the count can overflow, you can do this by faking a running average.

double avg;
void update(double val) {
    avg = (avg + val / 9) * .9;
}

That will give a nice running average for a fast updating system, a nice "health monitor" of some procedure or temperature with jittery inputs.

Play with 9 and .9 till you get the responsiveness you desire :)]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1308255156</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1308255157.6341";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2011-06-16 20:12:35</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9796</wp:comment_id>
    <wp:comment_author><![CDATA[Charles]]></wp:comment_author>
    <wp:comment_author_email>charles@loneaspen.com</wp:comment_author_email>
    <wp:comment_author_url>http://flvcomm.org</wp:comment_author_url>
    <wp:comment_author_IP>134.197.171.62</wp:comment_author_IP>
    <wp:comment_date>2011-06-16 17:20:16</wp:comment_date>
    <wp:comment_date_gmt>2011-06-16 21:20:16</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Just a note about that routine....

avg = (avg + newval/A) * B;

Where B =  A / (A+1);  Choose A

This will amplify certain frequencies generated in the signal.  For fast update use A = .1;  For long use A=10 or more;]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>9795</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1308259217</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1308259217.3099";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2011-06-16 21:20:16</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9858</wp:comment_id>
    <wp:comment_author><![CDATA[Charles]]></wp:comment_author>
    <wp:comment_author_email>charles@loneaspen.com</wp:comment_author_email>
    <wp:comment_author_url>http://www.loneaspen.com</wp:comment_author_url>
    <wp:comment_author_IP>72.87.252.234</wp:comment_author_IP>
    <wp:comment_date>2012-03-14 10:04:57</wp:comment_date>
    <wp:comment_date_gmt>2012-03-14 14:04:57</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Thanks...  I figured there was a name behind that one, I noticed it back in the early 1990's when writing some audio processing software that needed a frequency filter.   Random wave samples (white/pink noise) in, and you get a nice roar/boom around a certain frequency out.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>9857</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1331733897</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1331733898.1699";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2012-03-14 14:04:57</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9857</wp:comment_id>
    <wp:comment_author><![CDATA[moooeeeep]]></wp:comment_author>
    <wp:comment_author_email>skipjack@peru.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>134.102.219.31</wp:comment_author_IP>
    <wp:comment_date>2012-03-14 09:51:21</wp:comment_date>
    <wp:comment_date_gmt>2012-03-14 13:51:21</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Apparantly you have discovered that part of Welford's algorithm to online compute the mean: http://en.wikipedia.org/wiki/Algorithms_for_calculating_variance#On-line_algorithm]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1331733084</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1331733084.8962";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2012-03-14 13:51:21</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Working Faster, Avoiding the Mouse</title>
  <link>http://invisibleblocks.com/2008/08/18/working-faster-avoiding-the-mouse/</link>
  <pubDate>Mon, 18 Aug 2008 16:40:13 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.wordpress.com/?p=113</guid>
  <description/>
  <content:encoded><![CDATA[I'm moving away from my mouse all the time.  On the one hand, it's so much faster to keep my fingers in the same place, and on the other, it's easier to automate keystrokes than mouse motions &amp; clicks.  I especially don't like mousing through menus, so I'm always on the lookout for keyboard shortcuts.  Here are two tools that help me stay away from the mouse.
<h3>SlickRun</h3>
<a href="http://www.bayden.com/SlickRun/">SlickRun</a> is an application launcher: a special keystroke brings up a small pseudo-command-line window, you type in a command, and it launches the associated application.  By default, it uses a tiny window, but I made mine use an 18pt font, right in the middle of the screen -- it's my main focus when I use it, and it disappears right after.  When it first pops up, I have it display the date &amp; time.

<a href="http://invisibleblocks.files.wordpress.com/2008/08/datetime.gif"><img class="alignnone size-medium wp-image-119" src="http://invisibleblocks.files.wordpress.com/2008/08/datetime.gif?w=300" alt="" width="300" height="50" /></a>

You can type in URLs, and it launches them in the default browser.  It includes the Ctrl+Enter shortcut, so "google" + Ctrl+Enter launches "http://www.google.com", just like in Firefox and IE.  You can type in file paths, and it helps you with tab completion.

<a href="http://invisibleblocks.files.wordpress.com/2008/08/filesystem_completion.gif"><img class="alignnone size-medium wp-image-120" src="http://invisibleblocks.files.wordpress.com/2008/08/filesystem_completion.gif?w=300" alt="" width="300" height="46" /></a>

You define "magic words", short names for applications, so "mail" launches Outlook, "ffox" for Firefox, etc.  But long, descriptive magic words are no problem, because it auto-completes them for you.  I can launch "editor_programmers_notepad" with only "ed".

<a href="http://invisibleblocks.files.wordpress.com/2008/08/long_magic_words_are_great.gif"><img class="alignnone size-medium wp-image-121" src="http://invisibleblocks.files.wordpress.com/2008/08/long_magic_words_are_great.gif?w=300" alt="" width="300" height="49" /></a>

Magic words can take parameters too.  Here, the magic word "release" opens explorer to a network share where my team stores release information, each release in its own folder.  The magic word uses the release name to create the path, and launches explorer.

<a href="http://invisibleblocks.files.wordpress.com/2008/08/parameters.gif"><img class="alignnone size-medium wp-image-122" src="http://invisibleblocks.files.wordpress.com/2008/08/parameters.gif?w=300" alt="" width="300" height="42" /></a>

SlickRun can export and import its list of magic words, which is great, because I move between three computers regularly.  If you're curious, you can import <a href="http://danbernier.googlepages.com/magic_words.qrs">my magic words</a>.

SlickRun comes with Jot, which is a pop-up notepad for short-term notes.  It's kind of strange,  coupling this with a launcher.  I never really use it, but if you have a use for it, it's there.

I've used SlickRun for about a year, and at this point, I don't think I could live without a launcher.  I'm thinking of trying <a href="http://www.launchy.net">Launchy</a>, which looks very promising.
<h3>StExBar</h3>
<a href="http://tools.tortoisesvn.net/StExBar">StExBar</a> is an add-in for Windows Explorer that I found on the <a href="http://productiveprogrammer.com/wiki/index.php/Acceleration">wiki</a> for <a href="http://www.amazon.com/gp/product/0596519788?ie=UTF8&amp;tag=invisblock-20&amp;linkCode=as2&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0596519788">The Productive Programmer</a><img style="border:none !important;margin:0 !important;" src="http://www.assoc-amazon.com/e/ir?t=invisblock-20&amp;l=as2&amp;o=1&amp;a=0596519788" border="0" alt="" width="0" height="1" />.  It creates hot-key shortcuts for common actions:  Ctrl+Shift+N creates a new folder, Ctrl+M opens a command prompt in the current folder, Ctrl+Shift+C copies the full paths of selected files, Ctrl+Shift+R renames files in the current folder with regular expressions.  This is really nice -- it shows the current file name on the left, and the new on the right, based on the pattern you typed in.  You know exactly how the rename will work before you run it.

It also lets you define custom commands.  So far, I have Ctrl+E opening the file for editing in <a href="http://www.pnotepad.org/">Programmer's Notepad</a>, Shift+U running svn update on the selected items, and Ctrl+B opening a cygwin bash shell in the current folder.  <strong>UPDATE:</strong> I just added Ctrl+Shift+D for running a diff.

I just installed StExBar three days ago, so it's not ingrained into my fingers yet, but I already missed it at home this weekend.  It fills a narrow spot, adding hotkeys to Explorer, but it does it really well.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>113</wp:post_id>
  <wp:post_date>2008-08-18 12:40:13</wp:post_date>
  <wp:post_date_gmt>2008-08-18 16:40:13</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>working-faster-avoiding-the-mouse</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="productivity"><![CDATA[Productivity]]></category>
  <category domain="category" nicename="programming"><![CDATA[Programming]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[292320]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>9503</wp:comment_id>
    <wp:comment_author><![CDATA[Luis Lavena]]></wp:comment_author>
    <wp:comment_author_email>luislavena@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://blog.mmediasys.com</wp:comment_author_url>
    <wp:comment_author_IP>82.66.224.128</wp:comment_author_IP>
    <wp:comment_date>2008-08-20 18:27:43</wp:comment_date>
    <wp:comment_date_gmt>2008-08-20 22:27:43</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I've been using Launchy with Win+Spacebar.

I've setup custom commands to start and stop services (or even restart them).

Other things include special links and folders with shortcuts to faster access special projects locations. so:

1) Win+Spacebar, 
2) type prj and hit (tab) completes to Projects
3) type a few letters of the name of the project, then hit enter.

The more I use them the better it rate, so I don't have to type the exact project name.

The thing with this shortcut is that open a explorer window being this project folder the root (instead of My Computer).

The used command line is:

%windir%\explorer.exe /e,/root,[FOLDER NAME]

HTH,
Luis Lavena]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2008-08-20 22:27:43</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9497</wp:comment_id>
    <wp:comment_author><![CDATA[todd]]></wp:comment_author>
    <wp:comment_author_email>levinsontodd@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://levinsontodd.tumblr.com</wp:comment_author_url>
    <wp:comment_author_IP>216.178.113.29</wp:comment_author_IP>
    <wp:comment_date>2008-08-18 15:36:41</wp:comment_date>
    <wp:comment_date_gmt>2008-08-18 19:36:41</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Thanks for this. I use Enso which is similar, but have been frustrated by its inability to open urls that haven't been bookmarked and "learned by Enso."]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2008-08-18 19:36:41</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9498</wp:comment_id>
    <wp:comment_author><![CDATA[Daniel Bernier]]></wp:comment_author>
    <wp:comment_author_email>danbernier@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://invisibleblocks.wordpress.com/</wp:comment_author_url>
    <wp:comment_author_IP>12.24.127.147</wp:comment_author_IP>
    <wp:comment_date>2008-08-18 16:39:33</wp:comment_date>
    <wp:comment_date_gmt>2008-08-18 20:39:33</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I tried <a href="http://humanized.com/enso" rel="nofollow">Enso</a> once for a bit.  It was really interesting, but its use of caps-lock as the trigger really bit me...I guess partly because I'm on Dvorak, and O is where S is on a QWERTY -- Caps-lock+S is uncomfortable.  But also, there seemed to be too much magic.  Sometimes, I just want to tell my launcher what I want it to do.  Still, though, it's worth a try, if only to see what it's all about.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>292320</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2008-08-18 20:39:33</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Simplifying Boolean Expressions</title>
  <link>http://invisibleblocks.com/2008/12/24/simplifying-boolean-expressions/</link>
  <pubDate>Wed, 24 Dec 2008 16:43:25 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.wordpress.com/?p=136</guid>
  <description/>
  <content:encoded><![CDATA[(Apologies if this material seems elementary, but I've found enough code to make me think it should be talked about.)

I found some C# today that looked kind of like this.

[sourcecode language='csharp']
if (someCondition) {
    return true;
}
return false;
[/sourcecode]

This code says the author missed some key points about booleans.  You can find it in almost any language.

Any code that fits into an <em>if</em> or <em>while</em> eventually becomes a boolean.  Using an <em>if</em> to "return true, else false" is redundant -- just return the condition.  That code can be simplified down to this one-liner:

[sourcecode language='csharp']
return someCondition;
[/sourcecode]

The same goes for assigning a variable.  This:

[sourcecode language='csharp']
bool result = false;
if (someCondition) {
    result = true;
}
[/sourcecode]

...is the same as this:

[sourcecode language='csharp']
bool result = someCondition;
[/sourcecode]

(If you feel the longer version is clearer, as <a href="http://c2.com/cgi/wiki?ReturnBooleanEvaluations">some do</a>, I respectfully disagree with you, but that's a different point, and I'm not interested in debating preferences.  You can probably stop reading here, but thanks for stopping by.)

What if your boolean values are swapped?  You can invert your condition:

[sourcecode language='csharp']
if (someCondition) {
    return false;
}
return true;

// is the same as:
return !someCondition;
[/sourcecode]

As the nesting gets deeper, it gets hairier, but it can still be tamed:

[sourcecode language='csharp']
if (condition1) {
    if (condition2) {
        return true;
    }
    return false;
}
return false;

// is basically:
return condition1 && condition2;
[/sourcecode]

And...

[sourcecode language='csharp']
if (condition1) {
    return true;
}
else if (condition2) {
   return true;
}
else {
   return false;
}

// is just:
return condition1 || condition2;
[/sourcecode]

There are <a href="http://cs.wellesley.edu/~cs111/spring00/lectures/boolean-simplification.html">many other ways to tame a wild boolean</a> -- follow that link, and check the first table.  It's like simplifying an algebraic equation: <em>x</em>+0 is always <em>x</em>, and <em>y</em> &amp;&amp; true is always <em>y</em>.
<h3>An Example</h3>
Let's work through a contrived, yet nasty, example, to see how some of this works.

[sourcecode language='jscript']
function contrivedYetNasty(hasYirmish, isNingle, amount) {
    var tooMuch = false;
    if (amount > 100) {
        tooMuch = true;
    }

    var foo = false;
    if (hasYirmish == false) {
        if (!!tooMuch) {
          foo = true;
        }
        else {
          foo = false;
        }
    }
    else {
        foo = true;
    }

    if (isNingle == true) {
        if (foo == false) {
            return false;
        }
        else {
            return true;
        }
    }
    else {
        return false;
    }
}
[/sourcecode]

I have no idea what this does, but it's nasty (which is often the situation with legacy code).  These handy unit tests tell us how it behaves:

[sourcecode language='jscript']
assert(false, contrivedYetNasty(false, false, 0))
assert(true,  contrivedYetNasty(false, true, 110))
assert(false, contrivedYetNasty(true, false, 0))
assert(true,  contrivedYetNasty(true, true, 110))  

assert(false, contrivedYetNasty(false, false, 0))
assert(true,  contrivedYetNasty(false, true, 110))
assert(false, contrivedYetNasty(true, false, 0))
assert(true,  contrivedYetNasty(true, true, 110))
[/sourcecode]

First, let's tackle <code>tooMuch</code>.  It's false, but if <code>amount</code> is over 100, then it's true.  If it always has the same truthiness as <code>amount &gt; 100</code>, then it's <em>equivalent</em> to <code>amount &gt; 100</code>.  Let's write it that way.

[sourcecode language='jscript']
var tooMuch = amount > 100;
[/sourcecode]

The tests pass.

Next, let's look inside the <code>if (hasYirmish == false)</code> block, lines 9 - 14 in the original.  First, <code>!!tooMuch</code> is a double-negative: the first <code>!</code> cancels out the second.  We can just say <code>if (tooMuch)</code>.  "If <code>tooMuch</code> is true, <code>foo</code> is true; else (if <code>tooMuch</code> is false), <code>foo</code> is false."  So <code>foo</code> is the same as <code>tooMuch</code>, and we can rewrite the block like this:

[sourcecode language='jscript']
if (hasYirmish == false) {
    foo = tooMuch;
}
else {
    foo = true;
}
[/sourcecode]

Tests pass.

"If <code>hasYirmish</code> is false, <code>foo</code> is <code>tooMuch</code>; else, <code>foo</code> is true."  This is just like a boolean <em>OR</em> expression.  When <code>a || b</code> is evaluated, if <code>a</code> is true, the expression evaluates to true, without even checking <code>b</code>; but if <code>a</code> is false, then the expression evaluates to the value of <code>b</code>.  And that's exactly what we want here.  That block just becomes:

[sourcecode language='jscript']
var foo = hasYirmish || tooMuch;
[/sourcecode]

The tests still pass.  So far, we're down to this:

[sourcecode language='jscript']
function contrivedYetNasty(hasYirmish, isNingle, amount) {
    var tooMuch = amount > 100;
    var foo = hasYirmish || tooMuch;

    if (isNingle == true) {
        if (foo == false) {
            return false;
        }
        else {
            return true;
        }
    }
    else {
        return false;
    }
}
[/sourcecode]

Not bad!

Inside the <code>isNingle == false</code> block, on lines 6 - 11 above, we have: "if <code>foo</code> is false, return false; else (if it's true), return true."  Again, we just want to return the value of <code>foo</code>.  Let's re-write it that way, test it (they pass), and take a look at the <code>isNingle == true</code> block.

[sourcecode language='jscript']
if (isNingle == true) {
    return foo;
}
else {
    return false;
}
[/sourcecode]

Now, we have a similar situation to when we introduced the <em>OR</em> expression, but it's slightly different.  If <code>isNingle</code> is false, the whole thing is false; if it's true, then it's the value of <code>foo</code>.  Sounds like an <em>AND</em> expression.  Let's try it.

[sourcecode language='jscript']
return isNingle && foo;
[/sourcecode]

The tests still pass.  Let's step back and look at our progress:

[sourcecode language='jscript']
function contrivedYetNasty(hasYirmish, isNingle, amount) {
    var tooMuch = amount > 100;
    var foo = hasYirmish || tooMuch;
    return isNingle && foo;
}
[/sourcecode]

From 31 lines down to five, and it's actually readable.  We can in-line those variables, and it gets even clearer:

[sourcecode language='jscript']
function contrivedYetNasty(hasYirmish, isNingle, amount) {
    return isNingle && (hasYirmish || amount > 100);
}
[/sourcecode]

It returns true "if isNingle, and either it hasYirmish, or amount is over 100."  Much better.
<h3>Beyond the Basics</h3>
Once you're comfortable with simplifying boolean expressions, there's a number of rules you can employ to refactor nastier boolean expressions.  Most of them are easy to remember, and can be easily illustrated in real-life terms.  Meet <a href="http://en.wikipedia.org/wiki/De_Morgan%27s_laws">DeMorgan</a>:

* <code>!(a || b) == !a &amp;&amp; !b</code>.  "It's not red or green" is the same as "It's not red, and it's not green."</li>
* <code>!(a &amp;&amp; b) == !a || !b</code>.  "I'm not rich and handsome" is true if I'm not rich, OR if I'm not handsome.  (Or if I'm neither.)</li>

These rules are part of a larger topic called <a href="http://en.wikipedia.org/wiki/Boolean_algebra_(introduction)">Boolean algebra</a>, which is useful for <a href="http://www.allaboutcircuits.com/vol_4/chpt_7/5.html">simplifying circuits</a>, and (of course) programming.  At my university, Boolean algebra was taught in Discrete Math, which was required for CS majors.  Maybe programmers without a CS degree have a harder time with booleans because they missed this class, but the good news is, it's easy enough to <a href="http://en.wikipedia.org/wiki/Boolean_algebra_(introduction)">pick up</a>.]]></content:encoded>
  <excerpt:encoded><![CDATA[Many programmers can't simplify boolean expressions...or at least code like they can't.  Here are some basic rules for simplifying boolean expressions, and an example, with some pointers to more material on boolean algebra.]]></excerpt:encoded>
  <wp:post_id>136</wp:post_id>
  <wp:post_date>2008-12-24 12:43:25</wp:post_date>
  <wp:post_date_gmt>2008-12-24 16:43:25</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>simplifying-boolean-expressions</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="programming"><![CDATA[Programming]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[292320]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>9537</wp:comment_id>
    <wp:comment_author><![CDATA[Paco]]></wp:comment_author>
    <wp:comment_author_email>pacospam@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>83.84.56.34</wp:comment_author_IP>
    <wp:comment_date>2008-12-24 13:32:26</wp:comment_date>
    <wp:comment_date_gmt>2008-12-24 17:32:26</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Don't forget that the |= &amp;= and ^= operators can be useful too.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2008-12-24 17:32:26</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Use Ruby's method_missing to see what happens to an object</title>
  <link>http://invisibleblocks.com/2008/09/12/use-rubys-method_missing-to-see-what-happens-to-an-object/</link>
  <pubDate>Fri, 12 Sep 2008 13:24:35 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.wordpress.com/?p=143</guid>
  <description/>
  <content:encoded><![CDATA[Lately I've been generating MS Word .docs from text files, with <a href="http://whytheluckystiff.net/ruby/redcloth/">RedCloth</a> and <a href="http://code.whytheluckystiff.net/hpricot/">Hpricot</a> (thank you, <a href="http://whytheluckystiff.net/">why</a>, for both of those), and <a href="http://www.ruby-doc.org/stdlib/libdoc/win32ole/rdoc/index.html">win32ole</a>.  It's been fun, except for the OLE parts:  the ruby bridge is great, but the OLE API itself is strange, good documentation is sparse, and things get...flaky, sometimes.

In troubleshooting a bug that turns bold text on and off at the <em>wrong</em> times, I thought "it'd be nice if I could see all the calls that happen to this 'selection' object, in order they happen.  Maybe I don't realize I'm turning the 'bold' on at the wrong times."  Enter the Echoer:

[sourcecode language='ruby']
class Echoer
    def initialize(name)
        @name = name
    end
    def method_missing(method_name, *args)
        puts "#{@name}.#{method_name}: #{args * ', '}"
        Echoer.new("#{@name}.#{method_name}")
    end
end
[/sourcecode]

The <code>Echoer</code> is a stand-in for a regular object.  Whenever a method is called on it, it prints its own name, the name of the method called, and the arguments.

[sourcecode language='ruby']
def get_me_my_object
    # RealObject.new
    Echoer.new('obj')
end
obj = get_me_my_object
obj.puts 'Hello there'
obj.name = "Puddin'head Wilson"

# prints:
obj.puts: Hello there
obj.name=: Puddin'head Wilson
[/sourcecode]

Each method call returns a new Echoer, whose name is based on its name, and the method name, so  you can chain method calls.

[sourcecode language='ruby']
obj.next.upcase.match /pattern/

# prints:
obj.next: 
obj.next.upcase: 
obj.next.upcase.match: (?-mix:pattern)
[/sourcecode]

I should probably make Echoer a <a href="http://onestepback.org/index.cgi/Tech/Ruby/BlankSlate.rdoc">BlankSlate</a> object, but I haven't run into a need for it just yet.  I could also inspect the method's arguments with <code>args.map { |arg| arg.inspect }</code>, so you can tell strings and symbols apart.

Back in OLE-land, I replaced all instances of the selection object with <code>Echoer.new('selection')</code>, re-ran my code, and watched the output.  I <em>still</em> haven't found the source of the bug, but at least I know I'm not turning bold on or off when I don't expect to.

Thanks to Michael Feathers for this idea.  He wrote on the Beautiful Code blog about <a href="http://www.google.com/search?rlz=1C1GGLS_enUS291&amp;sourceid=chrome&amp;ie=UTF-8&amp;q=Spelunking+Ruby+Methods+with+Pebbles">Spelunking Ruby Methods with Pebbles</a>, but it seems O'Reilly took the blog down.  All that's left are the links from sites like reddit...does anyone know if the content is floating around somewhere out there?]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>143</wp:post_id>
  <wp:post_date>2008-09-12 09:24:35</wp:post_date>
  <wp:post_date_gmt>2008-09-12 13:24:35</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>use-rubys-method_missing-to-see-what-happens-to-an-object</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="programming"><![CDATA[Programming]]></category>
  <category domain="post_tag" nicename="ruby"><![CDATA[Ruby]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[292320]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>9516</wp:comment_id>
    <wp:comment_author><![CDATA[Daniel Bernier]]></wp:comment_author>
    <wp:comment_author_email>danbernier@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://invisibleblocks.wordpress.com/</wp:comment_author_url>
    <wp:comment_author_IP>12.24.127.147</wp:comment_author_IP>
    <wp:comment_date>2008-09-16 07:51:40</wp:comment_date>
    <wp:comment_date_gmt>2008-09-16 11:51:40</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Thanks Rob!  Yes, I'm using Textile.

One trick I have is a custom tool in Programmer's Notepad 2 that wraps the selected text in '@', or if the text has a newline, in pre-tags.  The '@' is for in-line code, and the pre-tags for code blocks, so I have it triggered by Ctrl+Shift+C.

I'm considering doing a post on the whole text-to-Word thing at some point: the need, the approach, everything.  If there's any interest, I might even gem the whole thing up.  IMHO, it's a much nicer way to write MS Word .docs.  It's not perfect, but I think it beats Word's mousing and binary formats.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>292320</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2008-09-16 11:51:40</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9514</wp:comment_id>
    <wp:comment_author><![CDATA[Rob Bazinet]]></wp:comment_author>
    <wp:comment_author_email>rbazinet@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://accidentaltechnologist.com</wp:comment_author_url>
    <wp:comment_author_IP>68.118.184.111</wp:comment_author_IP>
    <wp:comment_date>2008-09-15 20:01:18</wp:comment_date>
    <wp:comment_date_gmt>2008-09-16 00:01:18</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Good stuff here Dan, you have great posts.  Tell me, I thought you were using Textile?]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2008-09-16 00:01:18</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9515</wp:comment_id>
    <wp:comment_author><![CDATA[Rob Bazinet]]></wp:comment_author>
    <wp:comment_author_email>rbazinet@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://accidentaltechnologist.com</wp:comment_author_url>
    <wp:comment_author_IP>68.118.184.111</wp:comment_author_IP>
    <wp:comment_date>2008-09-15 21:18:47</wp:comment_date>
    <wp:comment_date_gmt>2008-09-16 01:18:47</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Sorry Dan, I was thinking of LaTEX when I posted this, which you are not using.  I think I need more sleep at night. 

I am going to try my hand at using your method of writing in text and converting to Word.  Do you have some techniques you care to pass along?]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2008-09-16 01:18:47</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Hartford Ruby Brigade meeting tonight</title>
  <link>http://invisibleblocks.com/2008/09/29/hartford-ruby-brigade-meeting-tonight/</link>
  <pubDate>Mon, 29 Sep 2008 12:50:15 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.wordpress.com/?p=146</guid>
  <description/>
  <content:encoded><![CDATA[If you're in the area, feel free to drop in:

The Hartford Ruby Brigade's September meeting is tonight, from 6 to 8 PM, at <a href="https://www.geezeo.com/">GeeZeo's</a> offices on <a href="http://maps.google.com/maps?f=q&amp;hl=en&amp;q=750+main+st+hartford+ct&amp;ie=UTF8">750 Main St, Suite 1314, in Hartford</a> (next to the CVS).

The big news is Addison Wesley has a ticket for the <a href="http://www.voicesthatmatter.com/ruby2008/">Voices That Matter: Professional Ruby Conference</a> this November, and we'll raffle it off.  It looks like a sweet conference, go take a look.  You have to be there to win, so if you've been waiting for the right time to make an appearance, this is it.  And since only one of us can win the ticket, we'll also raffle off a great Ruby book, Hal Fulton's <a href="http://www.amazon.com/Ruby-Way-Second-Addison-Wesley-Professional/dp/0672328844">The Ruby Way</a>.  A big thanks to Addison Wesley!

<a href="http://rubydoes.net/">Aaron</a> will give his long-promised IronRuby talk, and I'll show a mini-project of mine that generates MSWord .docs from <a href="http://textism.com/tools/textile">Textile</a>, with <a href="http://redcloth.org">RedCloth</a>.  It's flashy, I promise.

Remember, if you have a topic you'd like to talk about, or one you'd like to hear about, or even if you just have an idea for what to do for the evening, don't be shy, speak up!  The group is what we make it, and it belongs to all of us.

As always, we'll have free pizza and soda, courtesy of Sun Microsystems.

Hope to see you there!]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>146</wp:post_id>
  <wp:post_date>2008-09-29 08:50:15</wp:post_date>
  <wp:post_date_gmt>2008-09-29 12:50:15</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>hartford-ruby-brigade-meeting-tonight</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="hartfordrb"><![CDATA[Hartford.rb]]></category>
  <category domain="category" nicename="programming"><![CDATA[Programming]]></category>
  <category domain="post_tag" nicename="ruby"><![CDATA[Ruby]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[292320]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>9524</wp:comment_id>
    <wp:comment_author><![CDATA[Daniel Bernier]]></wp:comment_author>
    <wp:comment_author_email>danbernier@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://invisibleblocks.wordpress.com/</wp:comment_author_url>
    <wp:comment_author_IP>12.24.127.147</wp:comment_author_IP>
    <wp:comment_date>2008-10-15 09:29:39</wp:comment_date>
    <wp:comment_date_gmt>2008-10-15 13:29:39</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Great!  We're planning out the next meeting now, for 10/27.  Details to follow on the group...]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>292320</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2008-10-15 13:29:39</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9523</wp:comment_id>
    <wp:comment_author><![CDATA[Jeffry Houser]]></wp:comment_author>
    <wp:comment_author_email>jeff@farcryfly.com</wp:comment_author_email>
    <wp:comment_author_url>http://www.jeffryhouser.com</wp:comment_author_url>
    <wp:comment_author_IP>69.183.115.182</wp:comment_author_IP>
    <wp:comment_date>2008-10-14 21:37:51</wp:comment_date>
    <wp:comment_date_gmt>2008-10-15 01:37:51</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Cool thanks!  Just joined the Google group.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2008-10-15 01:37:51</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9522</wp:comment_id>
    <wp:comment_author><![CDATA[Daniel Bernier]]></wp:comment_author>
    <wp:comment_author_email>danbernier@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://invisibleblocks.wordpress.com/</wp:comment_author_url>
    <wp:comment_author_IP>64.252.166.149</wp:comment_author_IP>
    <wp:comment_date>2008-10-02 19:16:54</wp:comment_date>
    <wp:comment_date_gmt>2008-10-02 23:16:54</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Ah, that's too bad!  No, the Meetup closed last month.  It was pretty much defunct since February, which is why we started the Google Group meetings in March.  We pretty much run the group through there now, and it's the best place to catch word of our meetings: http://groups.google.com/group/hartford-ruby-brigade

Hope you can make it to one!]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>292320</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2008-10-02 23:16:54</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9521</wp:comment_id>
    <wp:comment_author><![CDATA[Jeffry Houser]]></wp:comment_author>
    <wp:comment_author_email>jeff@farcryfly.com</wp:comment_author_email>
    <wp:comment_author_url>http://www.jeffryhouser.com</wp:comment_author_url>
    <wp:comment_author_IP>69.183.115.182</wp:comment_author_IP>
    <wp:comment_date>2008-10-02 11:02:11</wp:comment_date>
    <wp:comment_date_gmt>2008-10-02 15:02:11</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[No reminder via the meetup group?  

I could have made this one probably.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2008-10-02 15:02:11</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Hartford Ruby Brigade next meeting: 10/27</title>
  <link>http://invisibleblocks.com/2008/10/23/hartford-ruby-brigade-next-meeting-1027/</link>
  <pubDate>Thu, 23 Oct 2008 17:27:58 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.wordpress.com/?p=148</guid>
  <description/>
  <content:encoded><![CDATA[The <a href="http://groups.google.com/group/hartford-ruby-brigade">Hartford Ruby Group</a> is meeting this Monday, 10/27, at 6:00 PM.

We'll be tackling a <a href="http://rubyquiz.com">Ruby Quiz</a> problem, pairing up newcomers with veterans, and we'll be raffling off a copy of <a href="http://www.amazon.com/Design-Patterns-Ruby-Addison-Wesley-Professional/dp/0321490452?tag=invisblock-20">Design Patterns in Ruby</a>, by Russ Olsen.

GeeZeo offices
750 Main St, Hartford
Suite 1314
(next to the CVS)

Thanks to GeeZeo for hosting us, to Sun for feeding us, and to Addison Wesley for giving us books to raffle off.  Hope to see you there!]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>148</wp:post_id>
  <wp:post_date>2008-10-23 13:27:58</wp:post_date>
  <wp:post_date_gmt>2008-10-23 17:27:58</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>hartford-ruby-brigade-next-meeting-1027</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="hartfordrb"><![CDATA[Hartford.rb]]></category>
  <category domain="category" nicename="programming"><![CDATA[Programming]]></category>
  <category domain="post_tag" nicename="ruby"><![CDATA[Ruby]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[292320]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Next Hartford Ruby Group meeting: 11/24</title>
  <link>http://invisibleblocks.com/2008/11/18/next-hartford-ruby-group-meeting-1124/</link>
  <pubDate>Tue, 18 Nov 2008 13:25:26 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.wordpress.com/?p=151</guid>
  <description/>
  <content:encoded><![CDATA[The <a href="http://groups.google.com/group/hartford-ruby-brigade">Hartford Ruby Group</a> is meeting this Monday, 11/24, from 6 - 8 PM.

<a href="http://www.actsasflinn.com/">Flinn Mueller</a> will be talking about <a href="http://rspec.info/">rspec</a>, and we'll hopefully hear stories from the <a href="http://www.voicesthatmatter.com/ruby2008/">Voices that Matter</a> attendees.

We'll raffle off <a href="http://www.amazon.com/gp/product/0132417995?ie=UTF8&amp;tag=invisblock-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0132417995">The Professional Ruby Collection: Mongrel, Rails Plugins, Rails Routing, Refactoring to REST, and Rubyisms CD</a>.

GeeZeo offices
750 Main St, Hartford
Suite 1314
(next to the CVS)

Thanks to GeeZeo for hosting us, to Sun for feeding us, and to Addison Wesley for giving us books to raffle off.  Hope to see you there!]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>151</wp:post_id>
  <wp:post_date>2008-11-18 09:25:26</wp:post_date>
  <wp:post_date_gmt>2008-11-18 13:25:26</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>next-hartford-ruby-group-meeting-1124</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="hartfordrb"><![CDATA[Hartford.rb]]></category>
  <category domain="category" nicename="programming"><![CDATA[Programming]]></category>
  <category domain="post_tag" nicename="ruby"><![CDATA[Ruby]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[292320]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>The Twelve Bugs of Christmas, via Ruby</title>
  <link>http://invisibleblocks.com/2008/12/30/the-twelve-bugs-of-christmas-via-ruby/</link>
  <pubDate>Tue, 30 Dec 2008 13:46:48 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.wordpress.com/?p=194</guid>
  <description/>
  <content:encoded><![CDATA[Here's a little bit of post-Christmas fun, based on the <a href="http://en.wikipedia.org/wiki/Twelve_Days_of_Christmas#In_song">Twelve Days of Christmas</a>.

[sourcecode language='ruby']
bugs = %{
     Tell them it's a feature
     Say it's not supported
     Change the documentation
     Blame it on the hardware
     Find a way around it
     Say they need an upgrade
     Reinstall the software
     Ask for a dump
     Run with the debugger
     Try to reproduce it
     Ask them how they did it and
     See if they can do it again.
}.strip.split("\n").map { |bug| bug.strip }.reverse

days = %w[first second third fourth fifth sixth seventh eighth ninth tenth eleventh twelfth]

0.upto(11) do |day_num|
  puts "For the #{days[day_num]} bug of Christmas, my manager said to me"
  day_num.downto(0) do |bug_num|
    puts bugs[bug_num]
  end
  puts
end
[/sourcecode]]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>194</wp:post_id>
  <wp:post_date>2008-12-30 09:46:48</wp:post_date>
  <wp:post_date_gmt>2008-12-30 13:46:48</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>the-twelve-bugs-of-christmas-via-ruby</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="programming"><![CDATA[Programming]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[292320]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Accuracy and Precision: Not the Same</title>
  <link>http://invisibleblocks.com/2009/01/12/accuracy-and-precision-not-the-same/</link>
  <pubDate>Mon, 12 Jan 2009 14:29:38 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.wordpress.com/?p=211</guid>
  <description/>
  <content:encoded><![CDATA[I often hear people mis-use the words <em>accuracy</em> and <em>precision</em>, but they mean different things.

To say I'm 117 years, 93 days, 4 hours, 17 minutes, and 48.249 seconds old is very precise, but it's inaccurate (right now, anyway).  To say I'm in my thirties is accurate, but imprecise.  Precision is about level of detail, accuracy is about truthiness.

They make a wonderful pair, working pretty much orthogonally to each other.

Wikipedia has <a title="Accuracy and Precision" href="http://en.wikipedia.org/wiki/Accuracy#Accuracy_versus_precision.3B_the_target_analogy">a nice analogy using a bulls-eye target</a>.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>211</wp:post_id>
  <wp:post_date>2009-01-12 10:29:38</wp:post_date>
  <wp:post_date_gmt>2009-01-12 14:29:38</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>accuracy-and-precision-not-the-same</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[292320]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Come to the Hartford Ruby Brigade's January Meeting</title>
  <link>http://invisibleblocks.com/2009/01/20/come-to-the-hartford-ruby-brigades-january-meeting/</link>
  <pubDate>Tue, 20 Jan 2009 14:38:06 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.wordpress.com/?p=214</guid>
  <description/>
  <content:encoded><![CDATA[As we trudge back to our regular schedules after assorted holiday debaucheries, here's a heartening thought:  Hartford.rb is meeting on Monday, 1/26!  Gary Wright will tell us the story of how he learned Git, and some lucky stiff will walk away with a free copy of <a href="http://www.amazon.com/gp/product/0321445619?ie=UTF8&amp;tag=invisblock-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0321445619">The Rails Way</a>.  We'll even have pizza -- though we're now on the look-out for a pizza sponsor, so if you know anyone looking to feed us (for only ~$50 a month!), it might even be free.

The usual details:
Monday, 1/26, 6 - 8 PM
GeeZeo
750 Main St, Hartford

See you soon.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>214</wp:post_id>
  <wp:post_date>2009-01-20 10:38:06</wp:post_date>
  <wp:post_date_gmt>2009-01-20 14:38:06</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>come-to-the-hartford-ruby-brigades-january-meeting</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="hartford-ruby-brigade"><![CDATA[Hartford Ruby Brigade]]></category>
  <category domain="post_tag" nicename="hartfordrb"><![CDATA[Hartford.rb]]></category>
  <category domain="post_tag" nicename="ruby"><![CDATA[Ruby]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[292320]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>9560</wp:comment_id>
    <wp:comment_author><![CDATA[Raymond Zeitler]]></wp:comment_author>
    <wp:comment_author_email>r.zeitler@ieee.org</wp:comment_author_email>
    <wp:comment_author_url>http://www.ieee.org/ct/</wp:comment_author_url>
    <wp:comment_author_IP>63.144.137.94</wp:comment_author_IP>
    <wp:comment_date>2009-02-04 18:02:56</wp:comment_date>
    <wp:comment_date_gmt>2009-02-04 22:02:56</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Hi Dan:

I saw your question about IEEE activity on the Hartford Ruby Brigade forum.  I am the Chair of the Connecticut Section of IEEE this year.

We have a chapter of Computer Society, chaired by Sanjiv Rai.  At the local level, our members generate activity.  If you, as a member, wanted to organize a workshop, we would be very happy to support you.

Also, we'd be happy to include your meeting announcements in our monthly newsletter.  We expect some of our members would be interested in your activities.

Please feel free to call or e-mail me with any IEEE questions you might have.

Thank you]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2009-02-04 22:02:56</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Heading to the Int'l Lisp Conf, 2009</title>
  <link>http://invisibleblocks.com/2009/02/24/heading-to-the-intl-lisp-conf-2009/</link>
  <pubDate>Wed, 25 Feb 2009 01:30:50 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.wordpress.com/?p=225</guid>
  <description/>
  <content:encoded><![CDATA[My next step on <a href="http://www.google.com/search?q=the+road+to+lisp">the road to lisp</a> is at the <a href="http://www.international-lisp-conference.org/2009/index">International Lisp Conference</a> in Cambridge, MA, this March.

A lot of people are surprised to hear I'm interested in Lisp, but I've been studying scheme informally for about 3 years, reading <a href="http://www.amazon.com/gp/product/0262011530?ie=UTF8&amp;tag=invisblock-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0262011530">SICP</a>, and finishing <a href="http://www.amazon.com/gp/product/0262560992?ie=UTF8&amp;tag=invisblock-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0262560992">The Little Schemer</a> last year.  I've been interested in <a href="http://clojure.org">clojure</a> for about 18 months, especially after <a href="http://news.e-scribe.com/411">seeing Rich Hickey talk about it last March</a>.  Now I'm studying it in earnest with Stu Halloway's <a href="http://www.amazon.com/gp/product/1934356336?ie=UTF8&amp;tag=invisblock-20&amp;link_code=as3&amp;camp=211189&amp;creative=373489&amp;creativeASIN=1934356336">Programming Clojure</a>.

I don't use lisps of any sort at work, so it's not a "practical" language to study like, say, C# is.  But that's short-term thinking.  Learning lisp is plenty practical, if you're looking longer-term -- even if it's only three years out.  Learning lisp teaches you about some of the core issues of programming.

I like learning lisp because it's a window into the workings of programming languages, being so close to the AST.  I want to learn more about meta-programming with macros, hygienic or not.

And for the record, the functional techniques in <a href="http://www.amazon.com/gp/product/0262560992?ie=UTF8&amp;amp;tag=invisblock-20&amp;amp;linkCode=as2&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=0262560992">The Little Schemer</a> have improved my Ruby, JavaScript, and C# in some really <a href="http://notes-on-haskell.blogspot.com/2007/02/whats-wrong-with-for-loop.html">solid</a> <a href="http://weblog.raganwald.com/2007/03/why-why-functional-programming-matters.html">ways</a>. Functional programming is making its way to the rest of the programming world, and lisp does functional programming.

If you'll be at the conference, I'd love to hear from you.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>225</wp:post_id>
  <wp:post_date>2009-02-24 21:30:50</wp:post_date>
  <wp:post_date_gmt>2009-02-25 01:30:50</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>heading-to-the-intl-lisp-conf-2009</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="functional-programming"><![CDATA[Functional Programming]]></category>
  <category domain="category" nicename="learning"><![CDATA[Learning]]></category>
  <category domain="category" nicename="programming"><![CDATA[Programming]]></category>
  <category domain="category" nicename="software-thinking"><![CDATA[Software Thinking]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[292320]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Book Review: Pragmatic Thinking and Learning</title>
  <link>http://invisibleblocks.com/2009/04/15/book-review-pragmatic-thinking-and-learning/</link>
  <pubDate>Wed, 15 Apr 2009 20:48:36 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.wordpress.com/?p=230</guid>
  <description/>
  <content:encoded><![CDATA[I was planning on reading Andy Hunt's <a href="http://www.pragprog.com/titles/ahptl/">Pragmatic Thinking and Learning: Refactor Your Wetware</a> for a while, but kept putting it off, thinking it wasn't really central to what I'm interested in, what I'm doing.  I was wrong.

People have different skill levels, from novice to expert.  One sign of expertise is the ability to intuit solutions not available through linear thinking.  Intuition happens on the right side of the brain, so we need to use the right side more effectively.  Rather than "left brain" and "right brain", he calls them "L-mode" and "R-mode", for "linear" and "rich", to emphasize that it's not literally two halves of your brain working differently, but two different modes of thinking.  Most of the book is about using R-mode more, and using L-mode appropriately, to fact-check your R-mode.

It draws on psychology, neurobiology, cognition studies, managing, teaching, the arts, product design, and math.  The bibliography is ten pages long, and I've got a bunch of them highlighted for my next evening at the bookstore.

The most valuable changes I've made since finishing the book are:

#### Be ready when your R-mode strikes.

Since "querying" the R-mode can take a long time, we run it asynchronously, and we never know when the results will come in.  (This explains the "ah-ha!" moments in the shower, on the drive home, and when you're falling asleep.)  So keep a notebook handy for writing things down.  I'm writing in a notebook almost daily (I've joined the cult of <a href="http://www.amazon.com/gp/product/8883701038?ie=UTF8&amp;tag=invisblock-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=8883701038">moleskine</a>), writing down ideas as they come up.  It's also a tider home for all the scraps of paper that have lived in my wallet for years, ideas scrawled and smudged into them.  And I'm on my 4th or 5th <a href="http://www.pocketmod.com/">pocket mod</a>.

#### Maintain your 'exo-cortex,' your external memory.

I wrote a mini-wiki engine with <a href="http://www.sinatrarb.com/">Sinatra</a>, and so far, I've used it for everything from clojure, to saving quotes, to robot rights.  I wrote it for practice, but it's nice to have a searchable, non-linear notebook.

The book mentions Gerald Weinberg's fieldstone method of writing: to build a stone wall, you gradually gather stones from the field as you clear it, and pile them up.  When you have enough, build your wall.  Both the wiki and the notebook serve this purpose.

#### Map out your thinking, and doodle.

Drawing pictures engages your R-mode, making it more active, helping you make connections, and understand more clearly.  Besides, it's fun. This is my 3rd time learning emacs, and it's finally sticking -- I think it's mostly because I drew up a <a href="http://invisibleblocks.files.wordpress.com/2009/04/emacs_cheat_sheet.jpg">cheat-sheet</a>, pictorially explaining each command's effect.  I also map out my learning and career goals this way.

<img src="http://invisibleblocks.files.wordpress.com/2009/04/emacs_cheat_sheet.jpg?w=300" alt="emacs cheat sheet" title="emacs cheat sheet" width="300" height="218" class="alignnone size-medium wp-image-245" />

One of my favorite parts is, after you've mapped something out, and the drawing looks like a pile of yarn, re-draw it on a clean sheet, fixing up all the awkward placements and messy bits.  The benefit of this second version is in its creation -- by considering how to re-organize it, you're thinking more about the problem, in ways you might not have before.  This works for note-taking, too.

#### Take advantage of your brain's plasticity.

You can change how your brain works by <em>believing</em> it works differently: make it smarter, more creative, cheerier.  This is a pretty incredible claim, but he cites <a href="http://www.amazon.com/gp/product/0345472322?ie=UTF8&amp;tag=invisblock-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0345472322">two</a> <a href="http://www.amazon.com/gp/product/0143113100?ie=UTF8&amp;tag=invisblock-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0143113100">books</a> I'd like to check out.  It sounds impossible, but I've seen it work on me, to some extent.  My biggest problem is <em>continuing</em> to believe it works.

Some things I have yet to try:

- Take a walk.  A meditative walk, like around a <a href="http://en.wikipedia.org/wiki/Labyrinth">labyrinth</a>.

- Write morning pages: for three weeks, as soon as you wake, write down three pages of text.  It doesn't have to be anything specific.  The idea is, right after we wake, our R-mode is more active, so the gems will be more accessible, and they'll pop out onto the page.  I'm more curious to see what I come up with.

- I have to get better at setting SMART goals: specific, measurable, achievable, relevant, and time-boxed.  I've never been much for this kind of discipline -- I made a few, but didn't stick to them, and haven't gotten into the habit yet.  But like the book says, change is hard:
<blockquote>Change is always harder than it looks — that's a physical reality, not just an aphorism. An old, ingrained habit makes the equivalent of a neural highway in your brain. These old habits don't go away. You can make new neural highways alongside, going a different route and making short-cuts, but the old highways remain. They are always there for you to revert to—to fall back on. Practice may not make perfect, but it sure makes permanent.</blockquote>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>230</wp:post_id>
  <wp:post_date>2009-04-15 16:48:36</wp:post_date>
  <wp:post_date_gmt>2009-04-15 20:48:36</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>book-review-pragmatic-thinking-and-learning</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="learning"><![CDATA[Learning]]></category>
  <category domain="category" nicename="productivity"><![CDATA[Productivity]]></category>
  <category domain="category" nicename="recommended-reading"><![CDATA[Recommended Reading]]></category>
  <category domain="category" nicename="software-thinking"><![CDATA[Software Thinking]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[292320]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>9627</wp:comment_id>
    <wp:comment_author><![CDATA[Rob Bazinet]]></wp:comment_author>
    <wp:comment_author_email>rbazinet@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://accidentaltechnologist</wp:comment_author_url>
    <wp:comment_author_IP>68.118.184.111</wp:comment_author_IP>
    <wp:comment_date>2009-06-22 09:56:24</wp:comment_date>
    <wp:comment_date_gmt>2009-06-22 13:56:24</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Good review Dan.  I have this book but haven't read it yet.  I am traveling later this week and plan to take the book with me, it sounds really interesting and useful.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2009-06-22 13:56:24</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Higher-Order Functions and Function Composition, with Processing</title>
  <link>http://invisibleblocks.com/2009/05/04/higher-order-functions-and-function-composition-with-processing/</link>
  <pubDate>Mon, 04 May 2009 17:41:53 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.wordpress.com/?p=250</guid>
  <description/>
  <content:encoded><![CDATA[I was looking for a good way to illustrate functional composition and higher order functions, and thought that something could be done with <a href="http://processing.org">Processing</a>, a java-based graphics tool. Among other things, Processing exposes raw pixel data for the images it renders, and you can update the pixels programatically, providing a simple kind of image filtering.

For example, here's some code that converts a color image to grayscale. Just like with HTML, colors are represented<sup><a name="f1" href="#1">1</a></sup> as 3 channels (red, green, blue), and each channel has 255 increments. A gray pixel has equal amounts of red, green, and blue, so if you get the overall brightness of a pixel, and set its color to that much red, green, and blue, it should turn the image gray.

[sourcecode language="java"]
PImage img = loadImage("tattoo.jpg");
size(img.width, img.height);  // set the window size
image(img, 0, 0);  // render the image at x:y = 0:0

loadPixels(); // load the image's pixels into an array
for (int i = 0; i < pixels.length; i++) {
    // get the color for this pixel
    color c = pixels[i];

    // get its brightness
    float bright = brightness(c);

    // Change its color to its grayscale equivalent
    pixels[i] = color(bright, bright, bright);
}
updatePixels();  // render the new pixels to the screen
[/sourcecode]

Here's the original image:

<a href="http://invisibleblocks.files.wordpress.com/2009/05/tattoo.jpg"><img class="size-medium wp-image-265" src="http://invisibleblocks.files.wordpress.com/2009/05/tattoo.jpg?w=300" alt="the original image" width="300" height="199" /></a>

...and here's the filtered version:

<a href="http://invisibleblocks.files.wordpress.com/2009/05/tattoo_grayscale.jpg"><img class="size-medium wp-image-266" src="http://invisibleblocks.files.wordpress.com/2009/05/tattoo_grayscale.jpg?w=300" alt="the image in grayscale" width="300" height="199" /></a>

You can define a bunch of routines like this, each looping through the pixels the same way, but adjusting the colors differently. But if you can separate the pixel-changing part from the pixel-looping part, then you can swap in ANY pixel-changing routine, giving you a flexible image filtering system.

The pixel-changing code is essentially a function that turns one pixel's color into a new color, and the pixel-looping code uses it to replace each pixel's original color.  The pixel-changing function could be described like this:

[sourcecode language="java"]
color transform(color c) {
    ...
}
[/sourcecode]

Many modern programming languages support first-class functions, which are a natural way to model this. Processing uses a form of Java, which doesn't have first-class functions, but we can wrap the functions in a class, giving us an object called a functor.  I called this one ColorTrans, for "color transformer".

[sourcecode language="java"]
abstract class ColorTrans {
    public abstract color transform(color c);
}
[/sourcecode]

The ColorTrans class' only method, <code>transform</code>, is our pixel-changing function. We can re-write the loop from before to use a ColorTrans filter, and while we're at it, we'll move it into a method that takes the filename as a parameter, too.

[sourcecode language="java"]
void filterImage(String path, ColorTrans filter) {
    PImage img = loadImage(path);
    size(img.width, img.height);
    image(img, 0, 0);

    loadPixels();
    for (int i = 0; i < pixels.length; i++) {
        // use the filter parameter
        pixels[i] = filter.transform(pixels[i]);
    }
    updatePixels();
}
[/sourcecode]

We can easily recreate the grayscale filter from earlier as a ColorTrans.

[sourcecode language="java"]
ColorTrans grayscale = new ColorTrans() {
    color transform(color c) {
        float bright = brightness(c);
        return color(bright, bright, bright);
    }
};

filterImage("tattoo.jpg", grayscale);
[/sourcecode]

Another really easy filter to write is an inverter. If a pixel has R:100, G:30, B:255, an inverter will return the color R:(255-100), G:(255-30), B:(255-255), or R:155, G:225, B:0.

[sourcecode language="java"]
ColorTrans invert = new ColorTrans() {
    color transform(color c) {
        return color(255 - red(c),
                     255 - green(c),
                     255 - blue(c));
    }
};

filterImage("tattoo.jpg", invert);
[/sourcecode]

The image produced by an inverter is like a film negative.

<a href="http://invisibleblocks.files.wordpress.com/2009/05/tattoo_invert.jpg"><img class="size-medium wp-image-268" src="http://invisibleblocks.files.wordpress.com/2009/05/tattoo_invert.jpg?w=300" alt="inverted, like a negative" width="300" height="199" /></a>

Now we begin to see the benefits of keeping the-parts-that-change separate from the-parts-that-don't: we can easily define and swap in new filters. This is one of the big parts of higher-order programming: writing routines that are configured by passing in functions (or functors, in this case) to do part of the work.
<h3>Manufacturing a ColorTrans</h3>
A useful kind of filter is one that increases (or decreases) the color on one channel: add some red, or remove some green. This kind of filter is easy to create:

[sourcecode language="java"]
ColorTrans aFifthMoreRed = new ColorTrans() {
    color transform(color c) {
    	return color(red(c) * 1.2, green(c), blue(c));
    }
};
[/sourcecode]

This filter will increase the amout of red in the image by 20%. But 20% is a pretty arbitrary number; it'd be better if we could tell the filter how much to increase the red by. Generally, you'd add an "amount" parameter to the transform method, but then filterImage would have to know that this ColorTrans object takes an extra parameter. It's kind of nice having filterImage treat all ColorTrans objects the same, just passing in the color.

Instead, we can make a method that builds ColorTrans objects: we tell it how much to increase the red by, and it builds a ColorTrans that does it for us.

[sourcecode language="java"]
ColorTrans ampRed(final float amount) {
    return new ColorTrans() {
        color transform(color c) {
            color(red(c) * amount, green(c), blue(c));
        }
    };
}

ColorTrans aQuarterMoreRed = ampRed(1.25);
ColorTrans aThirdLessRed = ampRed(2/3);
ColorTrans noRedAtAll = ampRed(0);
[/sourcecode]

(If you're curious why <code>amount</code> is final, the short answer is "because the compiler says so," but there's a better answer<sup><a name="f2" href="#2">2</a></sup>.)

This is pretty nice, because we can use this inside an animation loop, animating the amount of color amplification.

[sourcecode language="java"]
float theta = 0.0;

void setup() {
    filterImage("tattoo.jpg", noChange);
}

void draw() {
    float ampRedAmount = sin(theta) * 1.2;
    filterImage("tattoo.jpg", ampRed(ampRedAmount));
    theta += 0.1;
}
[/sourcecode]

[Here's where I'd link to the applet, nicely hosted somewhere, if I had a hosting service that allowed applets.  I'll try to find a place to put all the code, so you can try it yourself.]

Processing calls <code>setup</code> to initialize the animation, and calls <code>draw</code> once per "tick", to advance the animation. Here, in each frame of the animation, a new ColorTrans is constructed by <code>ampRed</code>, with the amount tied to the sine wave function, oscillating between 0 and 1.2. When viewed, the amount of red in the image swells and falls, and back again<sup><a name="f3" href="#3">3</a></sup>.

This is another big part of higher-order programming: writing functions that build other functions, based on some arguments. Combined with routines that take functions as arguments, it's a handy way to break down some problems. If done well, the routines that take functions as arguments, and the functions that build those functions, can become a sort of mini-language, a fluent interface, or almost an embedded DSL.
<h3>Plugging filters together - filter composition</h3>
This is where it gets fun. Suppose you've created an ampBlue that works just like ampRed, and now you want to filter an image with <em>both</em> of them.  One approach might be something like this:

[sourcecode language="java"]
void draw() {
    filterImage("tattoo.jpg", ampRed(sin(theta) * 1.2));
    filterImage("tattoo.jpg", ampBlue(cos(theta) * 1.2));
}
[/sourcecode]

Using the sine and cosine functions, the image should pulse nicely through reds and blues. The only problem is that it doesn't really work, because filterImage loads the image fresh from the filesystem each time, so you only get the effect of the ampBlue filter. So how can we apply multiple filters?

We plug them together. We want a filter that does the work of two other filters, and we want it to look like any other filter, so filterImage won't know the difference. To get this, we can add a method to ColorTrans that returns a <em>new</em> ColorTrans, which calls first the one, and then the other.

[sourcecode language="java"]
class ColorTrans {
    ...
    public ColorTrans then(final ColorTrans applySecond) {
        final ColorTrans applyFirst = this;
        return new ColorTrans() {
	    color transform(color c) {
	        return applySecond(applyFirst(c));
	    }
	};
    }
}

filterImage("tattoo.jpg", grayscale.then(invert));
[/sourcecode]

<a href="http://invisibleblocks.files.wordpress.com/2009/05/tattoo_grayscale_invert.jpg"><img class="size-medium wp-image-268" src="http://invisibleblocks.files.wordpress.com/2009/05/tattoo_grayscale_invert.jpg?w=300" alt="first grayscaled, then inverted" width="300" height="199" /></a>

Combining filters becomes a matter of chaining them together through <code>then</code>. The red-and-blue example becomes:

[sourcecode language="java"]
void draw() {
   filterImage("tattoo.jpg",
        ampRed(sin(theta) * 1.2).then(
            ampBlue(cos(theta) * 1.2)));
}
[/sourcecode]
<h3>Processing does it kind of this way, too</h3>
If you look at the <a href="http://dev.processing.org/source/">source for Processing</a>, in <a href="http://dev.processing.org/source/index.cgi/trunk/processing/core/src/processing/core/PImage.java?view=markup&amp;rev=5417">PImage.java</a> on line 619, you'll find code that looks kind of like this:

[sourcecode language="java"]
  public void filter(int kind) {
    loadPixels();

    switch (kind) {
      case BLUR: ...
      case GRAY: ...
      case INVERT: ...
      case POSTERIZE: ...
      case RGB: ...
      case THRESHOLD: ...
      case ERODE: ...
      case DILATE: ...
    }
    updatePixels();  // mark as modified
  }
[/sourcecode]

It basically does just what I've been doing, except the operations are hard-coded into the source, rather than being separated behind a class interface. The filters aren't composable directly, though you can call a number of them in a row:

[sourcecode language="java"]
filter(INVERT);
filter(THRESHOLD);
filter(DILATE);
[/sourcecode]

One benefit of this approach is that it's easy to see, line-by-line, exactly what's happening.  I'd bet it beats the pants off of the ColorTrans version in benchmarks, too. But filters aren't composeable, and it's certainly not extendable. When you're doing computation-intensive graphics, every bit of speed is important; when you're illustrating a programming idea, it's not.  Decide for yourself which is more important for your needs.

____________________________________

<a name="1"></a>
1. It may seem weird, if you know Java, that the parameter's type is <code>color</code> -- it's not a java primitive, but it doesn't follow the normal classname conventions. It's just the way Processing does it. You can read more about the <a href="http://processing.org/reference/color_.html">color constructor in the Processing reference</a>.  <a href="#f1">[back]</a>

<a name="2"></a>
2. Taken from the <a href="http://c2.com/cgi/wiki?AnonymousInnerClass">AnonymousInnerClasses</a> page on the Portland Patterns Repository, 2009-04-30:
<blockquote>AnonymousInnerClasses can also be used to create something like closures in the JavaLanguage. However they do not "close over" the lexical environment so they aren't TrueClosures. (They can capture the value of local variables, but they do not have access to the variable binding so they can't change the original variable. Which Java makes quite clear by only allowing InnerClasses to refer to local variables that have been declared final (so no-one can change them)).</blockquote>
<a href="#f2">[back]</a>

<a name="3"></a>
3. The <code>noChange</code> filter returns the same color it was given -- an identity function.  <code>filterImage</code> is called inside <code>setup</code> only so the window size is set correctly, since setting the size inside <code>draw</code> has no effect. And <em>theta</em> is just a Greek letter often used for angles and trigonometry.<a href="#f3">[back]</a>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>250</wp:post_id>
  <wp:post_date>2009-05-04 13:41:53</wp:post_date>
  <wp:post_date_gmt>2009-05-04 17:41:53</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>higher-order-functions-and-function-composition-with-processing</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="functional-programming"><![CDATA[Functional Programming]]></category>
  <category domain="category" nicename="programming"><![CDATA[Programming]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[292320]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>twitter_cards_summary_img_size</wp:meta_key>
    <wp:meta_value><![CDATA[a:7:{i:0;i:500;i:1;i:333;i:2;i:2;i:3;s:24:"width="500" height="333"";s:4:"bits";i:8;s:8:"channels";i:3;s:4:"mime";s:10:"image/jpeg";}]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>9609</wp:comment_id>
    <wp:comment_author><![CDATA[Dan]]></wp:comment_author>
    <wp:comment_author_email>ano@nym.ous</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>93.38.82.168</wp:comment_author_IP>
    <wp:comment_date>2009-05-05 13:31:04</wp:comment_date>
    <wp:comment_date_gmt>2009-05-05 17:31:04</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I think:

float bright = brightness(c);

in the first code block should be:

float bright = brightness(i); //(s/c/i/)

and:

ColorTrans grayscale = new ColorTrans() {  
    float bright = brightness(c);  
    return color(bright, bright, bright);  
};

should be:

ColorTrans grayscale = new ColorTrans() {
    color transform(color c) {
        float bright = brightness(c);  
        return color(bright, bright, bright);
    }
};]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2009-05-05 17:31:04</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9610</wp:comment_id>
    <wp:comment_author><![CDATA[Daniel Bernier]]></wp:comment_author>
    <wp:comment_author_email>danbernier@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://invisibleblocks.wordpress.com/</wp:comment_author_url>
    <wp:comment_author_IP>12.24.127.147</wp:comment_author_IP>
    <wp:comment_date>2009-05-05 15:42:15</wp:comment_date>
    <wp:comment_date_gmt>2009-05-05 19:42:15</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Dan,

Thanks, my bad.  You almost had it...for the first block, I forgot to make a reference to the pixel:

color c = pixels[i];

// get its brightness
float bright = brightness(c);

For the second, I forgot to put the anonymous class' method in there (oops):

ColorTrans grayscale = new ColorTrans() {
    color transform(color c) {
        float bright = brightness(c);
        return color(bright, bright, bright);
    }
};

The hazards of restructuring pasted-in code, and not re-testing it...]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>292320</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2009-05-05 19:42:15</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>A JavaScript War Story</title>
  <link>http://invisibleblocks.com/2009/10/20/a-javascript-war-story/</link>
  <pubDate>Wed, 21 Oct 2009 02:03:46 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.wordpress.com/?p=294</guid>
  <description/>
  <content:encoded><![CDATA[<i>What follows is an account from the author's experience.  Some details have been changed for the usual reasons, and a poor memory has fuzzed out the rest.</i>

<i><b>UPDATE:</b> it <a href="http://www.reddit.com/r/javascript/comments/9w53i/a_javascript_war_story/c0eqxrd">turns out</a> the technique described below is known as <a href="http://en.wikipedia.org/wiki/Switch#Contact_bounce">debouncing</a>.  What an awesome name!</i>

My last job was for a company that made case-management software.  With this software, you could track all kinds of data about your case: you could categorize it, sub-categorize it, say where and when it happened, note whether it was still open, track who was responsible...all kinds of stuff, great for data fiends.

One of our customers' favorite features was the reports, and they were pretty spiffin'.  But, not being ones to rest on our laurels, we were adding pivot-table reports, so you could count the number of cases, grouped by any criteria you wanted.  The input screen let the customer pick their pivot criterion, and which criteria they wanted as columns, for sub-counts.  We struggled to name these UI fields -- something lucid, something explanatory, something <i>evocative</i> -- something to make them understand what kind of report they were in for.  After a while, we decided to just <i>show</i> them: when they changed their pivot criterion, we'd run some javascript to render a skeleton report, same as the real report, but minus the data.  It would save them time, and save our servers.

The javascript was pretty involved.  It had to generate the same HTML as we did for the pivot table, which meant it had to know (or make up) values for each criterion, like all the case categories and sub-categories, and which sub-categories belonged to which categories.  And we let the customers pivot on up to THREE, count 'em, different criteria.  And it had to happen each time the user picked different pivot criteria.  It took a few tricks, but we got it working.  It ran slowly, maybe a few seconds, but it was quick enough, probably, especially once we threw in a little "please wait" spinner.  Then we realized we needed to re-render whenever the window resized.

No biggie, I thought, and I quickly added <code>window.onResize(reportPreview);</code>.  It worked great, except it re-rendered the report with every pixel-wide movement of the mouse, as the window was dragged to new widths and heights.  Calling a function, one that runs for a few seconds, <i>a hundred times</i> in the time it took to widen the browser an inch, meant a locked browser.  It meant "time to get more coffee," and after, "time to fix the bug."

I knew we could delay calling <code>reportPreview</code>, but we only wanted to delay it when the window was being resized -- when the user changed the columns, there was no reason to wait.  I was sure <code>window.setTimeout()</code> would do what we needed, but I didn't want to muck up <code>reportPreview()</code> with it.

I'd been reading <a href="http://www.amazon.com/gp/product/0262560992?ie=UTF8&amp;tag=invisblock-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0262560992">The Little Schemer</a> lately, and noticing some striking similarities between javascript and scheme: first-class functions, and higher-order functions that take functions as arguments, and return other functions as values.  It was fun reading, with its strange teacher-student dialog style.  The material was better than brainteasers, and I knew it would make me a better programmer down the road, but I didn't think of it as relevant to the day-job, as...applicable.

Then I realized higher-order functions were a way out of this.  I could write a function, <code>delay</code>, that would wrap one long-running, slow-poke function in <i>another</i> function: an intermediary that you could call as many times a second as you wanted, but it would only call the slow-poke once things had settled down.  <code>delay</code> would let us keep <code>setTimeout</code> out of <code>reportPreview</code>.  Something like this:

[sourcecode language="javascript"]
function delay(millis, slowPoke) {
    var timeoutId = undefined;

    // This is the intermediary.  Call it lots, it won't hurt.
    return function() {
        if (timeoutId) {  // If we're waiting...
            clearTimeout(timeoutId); // re-start the clock.
        }
        timeoutId = window.setTimeout(slowPoke, millis);
    }
}
[/sourcecode]

The first time you call the intermediary, it tells the window to call <code>slowPoke</code> after a bit, but every time you call it after that, it starts the clock over.  It's like when you're in a five-minute time-out, and you start acting up after only three, so your mom says "Ok, buster, another five minutes."

[sourcecode language="javascript"]
var fiveMinutes = 5 * 60 * 1000;
var screamAndShout = delay(fiveMinutes, function() {
    getBackToPlaying();
});

screamAndShout(); // Aw nuts, I'm in time-out.

// I'll be good for as long as I can, but...
screamAndShout(); // dang, five MORE minutes!
[/sourcecode]

Once <code>delay</code> was in place, running <code>reportPreview</code> when the window was resized was no problem.

[sourcecode language="javascript"]
function reportPreview() {
    // recursion, DOM manipulation, insanity...
}
columnPicker.onChange(reportPreview);
window.onResize(delay(100, reportPreview));
[/sourcecode]

After testing, we found that delaying it for 100 milliseconds made all the difference in the world.

<i>Do you have a war story?  Share it, and start the healing: tell a short one in the comments, or link to a longer one on your own damn blog.</i>   ]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>294</wp:post_id>
  <wp:post_date>2009-10-20 22:03:46</wp:post_date>
  <wp:post_date_gmt>2009-10-21 02:03:46</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>a-javascript-war-story</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="functional-programming"><![CDATA[Functional Programming]]></category>
  <category domain="post_tag" nicename="html"><![CDATA[HTML]]></category>
  <category domain="post_tag" nicename="javascript"><![CDATA[JavaScript]]></category>
  <category domain="category" nicename="programming"><![CDATA[Programming]]></category>
  <category domain="post_tag" nicename="scheme"><![CDATA[scheme]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[292320]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>9683</wp:comment_id>
    <wp:comment_author><![CDATA[uberVU - social comments]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://www.ubervu.com/conversations/invisibleblocks.wordpress.com/2009/10/20/a-javascript-war-story/</wp:comment_author_url>
    <wp:comment_author_IP>67.202.32.232</wp:comment_author_IP>
    <wp:comment_date>2009-10-21 15:43:02</wp:comment_date>
    <wp:comment_date_gmt>2009-10-21 19:43:02</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[<strong>Social comments and analytics for this post...</strong>

This post was mentioned on Reddit by Jack9: Nice solution,...]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>trackback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2009-10-21 19:43:02</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9679</wp:comment_id>
    <wp:comment_author><![CDATA[Jordi]]></wp:comment_author>
    <wp:comment_author_email>jbieger@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>194.171.252.101</wp:comment_author_IP>
    <wp:comment_date>2009-10-21 05:25:48</wp:comment_date>
    <wp:comment_date_gmt>2009-10-21 09:25:48</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Very nice description of a very useful higher-order function and how functional programming can be applied in real life. I have made similar functions in a previous job as well.

What I don't really understand is why you would need to redraw everything when the window resized. It seems to me like the JavaScript generates the HTML and as we all know, the browser takes care of how that should look when the window is resized. It seems to me that if you are generating good HTML, you should not have to worry about this. Furthermore, wouldn't it have been a lot easier to just tell your users to not resize their browser windows all the time or to make a 'refresh' button that they can press after they're done resizing. Your final solution is very elegant, but if you spent a lot of time thinking about this, I can't help but wonder if it was worth it.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2009-10-21 09:25:48</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9680</wp:comment_id>
    <wp:comment_author><![CDATA[Daniel Bernier]]></wp:comment_author>
    <wp:comment_author_email>danbernier@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://invisibleblocks.wordpress.com/</wp:comment_author_url>
    <wp:comment_author_IP>12.24.127.147</wp:comment_author_IP>
    <wp:comment_date>2009-10-21 07:54:59</wp:comment_date>
    <wp:comment_date_gmt>2009-10-21 11:54:59</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Jordi,

Yeah, we probably could have generated better, more liquid HTML.  When we built the original report, we just made sure it looked good enough in IE6 (our clients were large corporations - their IT departments installed IE6 and locked down the machine).  When we got to the report preview, we needed it to match the real report's HTML.  At the time, between a whole redesign of the report HTML, and throwing in delay(), we chose the latter.

Besides, if we'd had better HTML, there'd be no war story.  :)]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>292320</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2009-10-21 11:54:59</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Clojure Changing My Mind</title>
  <link>http://invisibleblocks.com/2009/11/13/clojure-changing-my-mind/</link>
  <pubDate>Fri, 13 Nov 2009 22:15:17 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.wordpress.com/?p=328</guid>
  <description/>
  <content:encoded><![CDATA[As good as <a href="http://processing.org">Processing</a> is, it's still java.  I've slowly been learning <a href="http://clojure.org">clojure</a>, and trying to use it with Processing, via <a href="http://github.com/rosado/clj-processing">clj-processing</a>. While <a href="http://clojure.org/Reference">the clojure docs</a> and <a href="http://www.amazon.com/gp/product/1934356336?ie=UTF8&amp;tag=invisblock-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=1934356336">the book</a> are both good, I'm still in that flounder-around stage, trying out tiny experiments to understand how things work.

I wanted a function to make saw-step sequences: (1 2 3 2 1 2 3 2 ...).  You give it the low bound, the high bound, and the step-size.  For example:

* <code>(saw-step 1 4 1)</code> gives <code>(1 2 3 4 3 2 1 2 3 4 3 ...)</code>
* <code>(saw-step 0 15 5)</code> gives <code>(0 5 10 15 10 5 0 5 ...)</code>
* <code>(saw-step 0 5 2)</code> gives <code>(0 2 4 5 3 1 0 2 4 5 ...)</code>

I've coded this kind of thing up in ruby, javascript, or java a dozen times, though it's usually inside a loop, not returning a list.  Something like this:

[sourcecode language="javascript"]
var min = 3;
var max = 7;
var step = 2;

var n = min;
while(shouldContinue()) {
    doSomethingWith(n);
    n += step;
    if (n+step &gt; max || n-step &lt; min) {
        step *= -1;  // turn around
    }
}
[/sourcecode]

My first try in clojure took a similar tack.  I never got it right, but it was something like this:

```clojure
(defn saw-step
  [min max step-size]
    (let [step (ref step-size)]
      (iterate
       (fn [x]
         (if (or ( min (- x @step)))
           (dosync (alter step -)))
         (+ @step x))
         min)))
```

It's a disaster -- the parentheses don't even match -- but you get the gist.  I was trying to cram the same imperative algorithm into clojure: keep some mutable state, add <code>step</code> to it, and when you reach the edges, mutate <code>step</code> to change direction.  I kept getting bugs where it would go one step beyond the edge, or it would start working its way back from one edge, only to turn around again, and bounce against the edge forever.

I gave up and went to bed, but a few days later, I had better luck.
```clojure
(defn saw-step
  [min max step]
     (cycle
      (into (vec (range min max step)) ; vec, so (into) adds to end
	    (for [x
		  (iterate #(- % step) max)
      :while (&gt; x min)] x))))
```

The first not-entirely-wrong step I made was to try breaking the list of numbers I wanted into two parts: the going-up numbers, and the coming-down numbers.  (0 2 4 5 3 1) is just (0 2 4) + (5 3 1).  The <code>(range min max step)</code> part gives you the going-ups, and the <code>(for [x (iterate ...)</code> stuff is the going-downs, as a list comprehension.

(One mistake I made was trying <code>(range max min step)</code> for the going-downs, which yields an empty list; another was using <code>(iterate dec max)</code>, which never ends, because it keeps decrementing into the negatives.  I found my way out with the list comprehension, but I bet there's a better way.)

Once you have those two lists, you can use <code>into</code> to add each item from the second list to the first, giving you (0 2 4 5 3 1).  That goes into <code>cycle</code> for a lazy, infinite sequence.

The solution's not too bad: a saw-step is a cycle of the going-ups, followed by the going-downs.  The code looks about that way.

(It occurred to me after that I could always use a default step of 1, and pipe the result through a scaling map.  That would give me the bounds I wanted, with the extra benefit of evenly-spaced steps.  Maybe I'll remove <code>step</code> later.)

<a href="http://www.cs.yale.edu/quotes.html">Alan Perlis</a> said, "A language that doesn't affect the way you think about programming, is not worth knowing."  He also said, "The only difference(!) between Shakespeare and you was the size of his idiom list - not the size of his vocabulary."  Clojure's changing my mind, a bit at a time.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>328</wp:post_id>
  <wp:post_date>2009-11-13 18:15:17</wp:post_date>
  <wp:post_date_gmt>2009-11-13 22:15:17</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>clojure-changing-my-mind</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="clojure"><![CDATA[clojure]]></category>
  <category domain="category" nicename="functional-programming"><![CDATA[Functional Programming]]></category>
  <category domain="category" nicename="programming"><![CDATA[Programming]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[292320]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>9687</wp:comment_id>
    <wp:comment_author><![CDATA[Alex Osborne]]></wp:comment_author>
    <wp:comment_author_email>ato@meshy.org</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>210.1.197.1</wp:comment_author_IP>
    <wp:comment_date>2009-11-14 00:40:21</wp:comment_date>
    <wp:comment_date_gmt>2009-11-14 04:40:21</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I kind of like this way:

<pre>

(defn saw-step [min max step]
  (cycle (concat (range min max step)
                 (range max min (- step)))))

</pre>]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2009-11-14 04:40:21</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9689</wp:comment_id>
    <wp:comment_author><![CDATA[Daniel Bernier]]></wp:comment_author>
    <wp:comment_author_email>danbernier@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://invisibleblocks.wordpress.com/</wp:comment_author_url>
    <wp:comment_author_IP>64.252.51.85</wp:comment_author_IP>
    <wp:comment_date>2009-11-15 20:46:17</wp:comment_date>
    <wp:comment_date_gmt>2009-11-16 00:46:17</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Oh, ok -- that's much nicer!  I hadn't tried giving (range) a negative step.  I tried (range max min), but got an empty list -- which makes sense, since the step defaults to 1.  If you add 1 to max, until it's greater than min, you'll get the empty list.  Thanks Alex!]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>292320</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2009-11-16 00:46:17</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9690</wp:comment_id>
    <wp:comment_author><![CDATA[Daniel Bernier]]></wp:comment_author>
    <wp:comment_author_email>danbernier@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://invisibleblocks.wordpress.com/</wp:comment_author_url>
    <wp:comment_author_IP>64.252.51.85</wp:comment_author_IP>
    <wp:comment_date>2009-11-15 20:49:54</wp:comment_date>
    <wp:comment_date_gmt>2009-11-16 00:49:54</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[...and (concat seq1 seq2) is clearer than (into (vec seq1) seq2), also.  Like I said, I'm still in flounder-around mode, I don't even know the seq library very well.  I'm going to start reading the source for the clojure core libs.  I've heard they're very good, and reading through all the functions, seeing how they work, and all their variations, should both teach me what's there, and show me some good clojure style.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>292320</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2009-11-16 00:49:54</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9691</wp:comment_id>
    <wp:comment_author><![CDATA[Rob Bazinet]]></wp:comment_author>
    <wp:comment_author_email>rbazinet@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://accidentaltechnologist.com</wp:comment_author_url>
    <wp:comment_author_IP>24.177.4.105</wp:comment_author_IP>
    <wp:comment_date>2009-11-16 11:35:47</wp:comment_date>
    <wp:comment_date_gmt>2009-11-16 15:35:47</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Dan, it's pretty cool you are working with Clojure, I am a fan but not good at it yet.  Are you using Clojure at work or for personal exploration?]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2009-11-16 15:35:47</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9692</wp:comment_id>
    <wp:comment_author><![CDATA[Daniel Bernier]]></wp:comment_author>
    <wp:comment_author_email>danbernier@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://invisibleblocks.wordpress.com/</wp:comment_author_url>
    <wp:comment_author_IP>12.24.127.147</wp:comment_author_IP>
    <wp:comment_date>2009-11-16 12:29:41</wp:comment_date>
    <wp:comment_date_gmt>2009-11-16 16:29:41</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[For fun, really, especially with Processing.org.  My co-workers are aware of Clojure.net, but no one's looking at it.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>292320</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2009-11-16 16:29:41</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Firebug and Monaco, on Windows</title>
  <link>http://invisibleblocks.com/2009/11/20/firebug-and-monaco-on-windows/</link>
  <pubDate>Fri, 20 Nov 2009 22:06:45 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.wordpress.com/?p=351</guid>
  <description/>
  <content:encoded><![CDATA[I've been running <a href="http://getfirebug.com/">Firebug</a> at work for a long time, it's a really solid tool.  A while ago, I started using a <a href="http://www.webdevkungfu.com/textmate-envy-aka-monaco-font-for-windows/">Monaco.ttf for Windows</a>.  I think it looks much better on my Ubuntu system, but it's nice to have on Vista.

Firebug was apparently written for the Mac, because it uses Monaco all over the place. That would be very nice, but on Windows, a bold Monaco is a wider Monaco.  This makes the line number gutters uneven, and makes the screen flash when you scroll through text:

<a href="http://invisibleblocks.files.wordpress.com/2009/11/firebug-monaco-vista2.gif"><img class="alignnone size-full wp-image-361" title="Firebug and Monaco on Vista" src="http://invisibleblocks.files.wordpress.com/2009/11/firebug-monaco-vista2.gif" alt="" width="349" height="257" /></a>

I finally got irritated enough to google it, and I found this <a href="http://toscho.de/2009/schrift-in-firebug-aendern/" target="_blank">post by Thomas Scholz</a> (it's in German, here's <a href="http://translate.google.com/translate?js=y&amp;prev=_t&amp;hl=en&amp;ie=UTF-8&amp;u=http%3A%2F%2Ftoscho.de%2F2009%2Fschrift-in-firebug-aendern%2F&amp;sl=de&amp;tl=en">Google's translation</a>).

The details: Firebug's CSS files are located in its extension directory, which is probably someplace like this:

* Vista: C:\Users\{<strong>USERNAME</strong>}\AppData\Roaming\Mozilla\Firefox\Profiles\{<strong>alphanumerics</strong>}.default\extensions\firebug@software.joehewitt.com\skin\classic
* XP: C:\Documents and Settings\{<strong>USERNAME</strong>}\Application Data\Mozilla Firefox\Profiles\extensions\firebug@software.joehewitt.com\skin\classic

Search-and-replace the Monaco away, and restart Firefox.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>351</wp:post_id>
  <wp:post_date>2009-11-20 18:06:45</wp:post_date>
  <wp:post_date_gmt>2009-11-20 22:06:45</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>firebug-and-monaco-on-windows</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="firebug-monaco-fonts"><![CDATA[Firebug Monaco fonts]]></category>
  <category domain="category" nicename="tools"><![CDATA[Tools]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[292320]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_fb91d3ca1e4e3d3646be0737c184b822</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>9719</wp:comment_id>
    <wp:comment_author><![CDATA[MkFly]]></wp:comment_author>
    <wp:comment_author_email>mmkfly@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>128.193.8.91</wp:comment_author_IP>
    <wp:comment_date>2010-06-08 16:27:42</wp:comment_date>
    <wp:comment_date_gmt>2010-06-08 20:27:42</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I love Firebug, but the developer would like us to use the OS X "Monaco" font instead of letting the user decide which monospaced font to use (via the system default).

Monaco sucks.

A quick-fix I made, apply via the Stylish extension:
http://monacosucks.pastebin.com/3KwAg1Le]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1276028864</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2010-06-08 20:27:42</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Array.prototype.toString</title>
  <link>http://invisibleblocks.com/2010/02/02/array-prototype-tostring/</link>
  <pubDate>Tue, 02 Feb 2010 18:27:30 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.wordpress.com/?p=366</guid>
  <description/>
  <content:encoded><![CDATA[This is one of my favorite javascript tricks, because of its effort-to-payoff ratio.

Problem: the default Array.prototype.toString hides any nested structure.

[sourcecode language="javascript"]
[1, 2, 3, 4, 5].toString(); //-&gt; &quot;1, 2, 3, 4, 5&quot;
[1, 2, [3, 4], 5].toString(); //-&gt; &quot;1, 2, 3, 4, 5&quot;
[/sourcecode]

Solution: override Array.prototype.toString.

[sourcecode language="javascript"]
Array.prototype.toString = function() {
    return '[' + this.join(', ') + ']';
};

[1, 2, 3, 4, 5].toString(); //-&gt; &quot;[1, 2, 3, 4, 5]&quot;
[1, 2, [3, 4], 5].toString(); //-&gt; &quot;[1, 2, [3, 4], 5]&quot;
[/sourcecode]]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>366</wp:post_id>
  <wp:post_date>2010-02-02 14:27:30</wp:post_date>
  <wp:post_date_gmt>2010-02-02 18:27:30</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>array-prototype-tostring</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="javascript"><![CDATA[JavaScript]]></category>
  <category domain="category" nicename="programming"><![CDATA[Programming]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[292320]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>9708</wp:comment_id>
    <wp:comment_author><![CDATA[Shaurya Anand]]></wp:comment_author>
    <wp:comment_author_email>shauryaanand@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://geekswithblogs.net/shauryaanand</wp:comment_author_url>
    <wp:comment_author_IP>83.65.139.98</wp:comment_author_IP>
    <wp:comment_date>2010-02-23 13:10:06</wp:comment_date>
    <wp:comment_date_gmt>2010-02-23 17:10:06</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Overriding is my favorite in any language, but you should consider a better example to show it for toString() in JS?

['1', '2', '[3, 4]', '5'].toString() does the job effortlessly.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2010-02-23 17:10:06</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9709</wp:comment_id>
    <wp:comment_author><![CDATA[Daniel Bernier]]></wp:comment_author>
    <wp:comment_author_email>danbernier@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://invisibleblocks.wordpress.com/</wp:comment_author_url>
    <wp:comment_author_IP>69.37.34.194</wp:comment_author_IP>
    <wp:comment_date>2010-02-23 13:58:09</wp:comment_date>
    <wp:comment_date_gmt>2010-02-23 17:58:09</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Shaurya, your example only works because you manually .toString()'d the [3,4], putting <code>'[3, 4]'</code> (a string) into the root array.  If I'd changed Array.toString() to use a lispy style, like this:

[sourcecode language="jscript"]
Array.prototype.toString = function() {
    return '(' + this.join(' ') + ')';
};
[/sourcecode]

...then your example would return <code>'(1 2 [3, 4] 5)'</code>, which isn't what's intended.  

The thing that makes this trick work is that it's recursive, so it'll correctly show an array that's nested at any level.  For example, the default:
<code>[[[[[[[[[1]]]]]]]]].toString(); //-&gt; '1'</code>
...with the above addition:
<code>[[[[[[[[[1]]]]]]]]].toString(); //-&gt; '[[[[[[[[[1]]]]]]]]]'</code>]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>292320</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2010-02-23 17:58:09</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9717</wp:comment_id>
    <wp:comment_author><![CDATA[Benjamin Oakes]]></wp:comment_author>
    <wp:comment_author_email>ben@benjaminoakes.com</wp:comment_author_email>
    <wp:comment_author_url>http://www.benjaminoakes.com/</wp:comment_author_url>
    <wp:comment_author_IP>71.234.195.126</wp:comment_author_IP>
    <wp:comment_date>2010-06-04 00:20:04</wp:comment_date>
    <wp:comment_date_gmt>2010-06-04 04:20:04</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[That's useful -- thanks for sharing.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1275625206</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2010-06-04 04:20:04</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Where the Abstraction Leaks: JavaScript's Fake Arrays</title>
  <link>http://invisibleblocks.com/2010/06/15/where-the-abstraction-leaks-javascripts-fake-arrays/</link>
  <pubDate>Tue, 15 Jun 2010 16:01:08 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.wordpress.com/?p=369</guid>
  <description/>
  <content:encoded><![CDATA[Ruby arrays have a nice feature: you can construct a new array with an integer N, and a block, which will be called N times, to fill up the array:

[sourcecode language="ruby"]
Array.new(5) { 'yo' }
# gives:
[&quot;yo&quot;, &quot;yo&quot;, &quot;yo&quot;, &quot;yo&quot;, &quot;yo&quot;]

# Closures, too!
i = 0
Array.new(4) { i = i + 1 }
# gives:
[1, 2, 3, 4]
[/sourcecode]

I tried to recreate this in JavaScript:

[sourcecode language="javascript"]
new Array(5, function() { return &quot;drip&quot;; });
// gives:
[5, function() {
    return &quot;drip&quot;;
}]
[/sourcecode]

Oops!  I guess the Array constructor works differently in JavaScript.  No worries, we can just call map on the new array.

[sourcecode language="javascript"]
new Array(5).map(function() { return &quot;drip&quot;; });
// gives:
[, , , , ]
[/sourcecode]

...um, what?  Shouldn't that be <code>["drip", "drip", "drip", "drip", "drip"]</code>?  If I call <code>new Array(3)</code>, I should get a brand new array, with 3 slots, all set to <code>undefined</code>; and I should be able to map over it, and fill up the array.

Let's see what its elements are:
[sourcecode language="javascript"]
var array = new Array(5);
array[0]; // undefined, as expected
array[1]; // also undefined
[/sourcecode]

So far, so good.  What arguments are passed to the function? 
[sourcecode language="javascript"]
function printAndDrip(arg) {
    print(arg);
    return &quot;drip&quot;;
}
array.map(printAndDrip); // prints nothing, and returns [, , , , ]
[/sourcecode]

It looks like the <code>printAndDrip</code> function is never being called, almost like the array has no contents.

Let's try setting a value manually, <i>then</i> mapping:

[sourcecode language="javascript"]
array[2] = &quot;hey there&quot;; // [, , &quot;hey there&quot;, , ], as expected
array.map(printAndDrip);
// prints &quot;hey there&quot;, and returns [, , &quot;drip&quot;, , ]
[/sourcecode]

So, it only calls the function for values we've manually put there.  Maybe map doesn't call the function if the value of a slot is undefined?  I know, I'm reaching here...

[sourcecode language="javascript"]
array = [1, undefined, 2];
array.map(printAndDrip);

/* prints:
1
undefined
2
then outputs:
[&quot;drip&quot;, &quot;drip&quot;, &quot;drip&quot;]
*/
[/sourcecode]

So it <i>does</i> call the function for undefined values!  Then why didn't it in our newly-created array?

This is when it hit me, and it's a funny JavaScript fact that I always forget: JavaScript has fake arrays.

They're actually closer to hash tables, whose keys are numbers.  <code>["zero", "one"]</code> is just syntax sugar: it creates an object with two properties, named 0 and 1; 0 points to "zero", and 1 points to "one".  

[sourcecode language="javascript"]
// pretty much the same:
var arrayLiteral = [&quot;zero&quot;, &quot;one&quot;];
var objectLiteral = { 0: &quot;zero&quot;, 1: &quot;one&quot; };
[/sourcecode]

Apparently, if you use the <code>new Array(10)</code> constructor, it creates an array with length 10, but with no named properties.

We can see the properties an object has with the <a href="https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Global_Objects/Object/hasOwnProperty">hasOwnProperty</a> method, so we can use that to test our hypothesis.

[sourcecode language="javascript"]
var emptyArray = new Array(10);
emptyArray.hasOwnProperty(0); // false
emptyArray.hasOwnProperty(1); // false

var fullArray = [1,2,3];
fullArray.hasOwnProperty(0); // true
fullArray.hasOwnProperty(1); // true
fullArray.hasOwnProperty(99); // false: gone past the end
[/sourcecode]

So where does that leave us? Nowhere, really.  At least I'm a little clearer about JavaScript's fake arrays.  Imitating Ruby's Array constructor is pretty much out; it's easy enough, though a bit unsatisfying, to hand-roll our own:

[sourcecode language="javascript"]
Array.filled = function(n, fn) {
    var array = [];
    while(n-- &gt; 0) {
        array.push(fn());
    }
    return array;
}
Array.filled(5, function() { return &quot;drip&quot;; });
// gives:
[&quot;drip&quot;, &quot;drip&quot;, &quot;drip&quot;, &quot;drip&quot;, &quot;drip&quot;]
[/sourcecode]

Perhaps the folks working on the new JavaScript standards can put in a line-item about initializing Arrays with all the right numbered slots, and that'll be unnecessary.

<i>While writing this post, I used the <a href="http://www.squarefree.com/shell/shell.html">JavaScript Shell 1.4</a> in FireFox 3.6.3 on Windows 7.  I also redefined <code>Array.prototype.toString</code> to <a href="{% post_url 2010-02-02-array-prototype-tostring %}">display JavaScript arrays the way you type them</a>.</i>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>369</wp:post_id>
  <wp:post_date>2010-06-15 12:01:08</wp:post_date>
  <wp:post_date_gmt>2010-06-15 16:01:08</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>where-the-abstraction-leaks-javascripts-fake-arrays</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="javascript"><![CDATA[JavaScript]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[292320]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Disable Your Links, or Gate Your Functions? </title>
  <link>http://invisibleblocks.com/2010/07/01/disable-your-links-or-gate-your-functions/</link>
  <pubDate>Thu, 01 Jul 2010 23:02:18 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.wordpress.com/?p=434</guid>
  <description/>
  <content:encoded><![CDATA[It's pretty common to disable links and buttons that cause updates, so those updates don't happen twice, and re-enable them when the update has finished.

At work, our app's links are usually wired to javascript functions that use jQuery to scrape the form data and post it to web services via ajax.  We normally disable links and buttons something like this:

[sourcecode language="javascript"]
var updateLink = $('#updateLink');  // Find the link.
updateLink.click(function() {       // When it's clicked...
   updateLink.disable();            // disable it...
   ajax({
      data: getFormData(),          // ... &amp; send the form data
      url: 'http://someWebService', // to some web service.
      success: function(results) {  // When the service
         if (results.hasErrors) {   // finishes,
            showErrors(results);    // show any errors,
            updateLink.enable();    // and enable the link
         }                          // so they can try again.
      }
   });
});
[/sourcecode]

We added those enable() and disable() functions to jQuery -- they just add or remove the <code>disabled</code> attribute from whatever they're called on.  But it seems Firefox doesn't support <code>disabled</code> on anchor tags, like IE8 does, so we couldn't stop the repeat-calls that way.

We got to thinking, what if the link <em>always</em> called its javascript function, but the function could turn itself off after the first call, and back on after a successful ajax post?  That led to this:

[sourcecode language="javascript"]
function makeGated(fn) {
   var open = true;
   var gate = {
      open: function() { open = true; }
      shut: function() { open = false; }
   };

   return function() {
      if (open) {
         fn(gate);
      }
   };
}
[/sourcecode]

makeGated takes your function, and wraps it in another function, a gate function (it "makes your function a gated function").  When you call the function it creates, it will only call your function if the gate is open -- which it is, at first. But then, your function can decide whether to close the gate (that's why the gate is passed to your function).  You could use it like this:

[sourcecode language="javascript"]
var updateLink = $('#updateLink');  // Find the link.
updateLink.click(
   makeGated(function(gate) {       // When it's clicked...
      gate.shut();                  // shut the gate...
      ajax({
         data: getFormData(),       // ...same as before...
         url: 'http://someWebService',
         success: function(results) {
            if (results.hasErrors) {
               showErrors(results);
               gate.open();  // Open the gate
                             // so they can try again.
            }
         }
      });
   }));
[/sourcecode]

We dropped this in, and it worked pretty much as expected: you can click all you want, and the update will only fire once; when the update completes, it'll turn back on.

The downside? Since it doesn't disable the link, the user has no idea what's going on.  In fact, since the closed-gate function finishes so quickly, it seems like the button's not doing anything at all, which might even make it look broken.

So we chucked it, and hid the links instead. It's not as nifty, and it's not reusable, but it's clear enough for both end-users and programmers who don't grok higher-order functions.  Even when you have a nice, flexible language, and can make a sweet little hack, it doesn't mean the dumb approach won't sometimes win out.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>434</wp:post_id>
  <wp:post_date>2010-07-01 19:02:18</wp:post_date>
  <wp:post_date_gmt>2010-07-01 23:02:18</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>disable-your-links-or-gate-your-functions</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="functional-programming"><![CDATA[Functional Programming]]></category>
  <category domain="post_tag" nicename="javascript"><![CDATA[JavaScript]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[292320]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>After OsCon 2010</title>
  <link>http://invisibleblocks.com/2010/07/28/after-oscon-2010/</link>
  <pubDate>Wed, 28 Jul 2010 12:07:24 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.wordpress.com/?p=445</guid>
  <description/>
  <content:encoded><![CDATA[<a href="http://www.oscon.com/oscon2010">OsCon 2010</a> is done, and I'm pooped. I met some great people, the talks were good, and I saw some promising ideas and technologies. Portland is a great city, with free public transportation, good beer, veggie-friendly restaurants, and <a href="http://images.google.com/images?q=mt+hood+oregon">Mt. Hood</a> close by. What more could you want?

Here's my highlights and impressions.
<h4>Innovation</h4>
<a href="http://www.oscon.com/oscon2010/public/schedule/detail/13553">Rolf Skyberg</a> explained where corporate innovation initiatives come from, and <a href="http://www.oscon.com/oscon2010/public/schedule/detail/14836">Simon Wardley</a> talked about innovation. Those links are to the talk descriptions, but you can watch <a href="http://www.youtube.com/watch?v=5Oyf4vvJyy4&amp;feature=PlayList&amp;p=12696FB0B040FA53&amp;playnext_from=PL&amp;index=39">Simon's talk on youtube</a>, since it was a keynote.

As a company ages, Rolf says it gets more risk-averse, and that stifles innovation. He names each life-stage of a company for its most prominent employees: innovators, rock-stars, proceduralists, optimizers, and vultures. Once the company becomes so risk-averse that new ideas are stifled, and it starts losing money, the CEO assumes the problem is a lack of new ideas, rather than a culture that can't absorb them.

As a technology matures, Simon says it gets more stable and ubiquitous, becoming a commodity. This "creative destruction" frees us up to do more interesting things.

I'll be going back over their presentations, thinking about the commonalities between their talks.
<h4>Google's Go</h4>
Rob Pike's talk <a href="http://www.youtube.com/watch?v=5kj5ApnhPAE&amp;feature=PlayList&amp;p=12696FB0B040FA53&amp;playnext_from=PL&amp;index=25">Public Static Void</a> gave  some context around Google's new(-ish) language, <a href="http://golang.org/">Go</a>, which I'd pretty much ignored. A few choice bits:
<ul>
	<li>"there's a false dichotomy between nice &amp; dynamic &amp; interpreted, and ugly &amp; static &amp; compiled"</li>
	<li>Scala is "beautiful and rigorous"</li>
	<li>(my favorite) "a language should be light on the page"</li>
</ul>
<h4>Processing</h4>
I got to show Processing to a bunch of people, which made me happy -- Processing is a great tool, and a lot of fun.  <a href="http://www.kathrynaaker.com/blog/">Kathryn Aaker</a> was there, and she even made a <a href="http://openprocessing.org/visuals/?visualID=10950">sketch</a> on the flight home.

I also talked with a guy whose name I can't remember, and whose card I didn't get, about how his friend used Processing to teach math concepts to his kids.  That's a pretty amazing thing. Take that, <a href="http://www.maa.org/devlin/LockhartsLament.pdf">Mathematician's Lament</a>!
<h4>Scala, Mirah?</h4>
I really enjoy <a href="http://processing.org">Processing</a>, but...Java. Can we have something fast, but with closures and easy syntax, please? Either Scala or Mirah might meet that need.

<a href="http://www.mirah.org/">Mirah</a> is a Java compiler that reads Ruby-like syntax: looks like Ruby, but  it's still Java. That seems promising, but I don't think you can use,  say, Array.map, since it's not part of Java's core library.

<a href="http://www.scala-lang.org/">Scala</a> is a functional/OO hybrid language that brings closures and  higher-order programming to Java, with a helping of type inference.  It  seems promising, but it also seems like a lot of features mixed in  together; compared to Io or Scheme, there's tons to learn.  But maybe  that's the wrong way to look at it -- maybe it's close enough to Java that it'll be fairly quick to learn.
<h4>Powell's Technical Books</h4>
Powell's books is humbling, and amazing. There are whole sections I'm not even smart enough to understand. I still walked out with three books, though.

<a href="http://invisibleblocks.files.wordpress.com/2010/07/img_2860-small.jpg"><img class="alignnone size-full wp-image-448" src="http://invisibleblocks.files.wordpress.com/2010/07/img_2860-small.jpg" alt="I'm a book fiend" width="456" height="258" /></a>

The first one is <a href="http://www.amazon.com/gp/product/0312186509?ie=UTF8&amp;tag=invisblock-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0312186509">The Philosophical Programmer</a><img class=" byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi hiumsgquelgxvvjyynze hiumsgquelgxvvjyynze hiumsgquelgxvvjyynze hiumsgquelgxvvjyynze hiumsgquelgxvvjyynze hiumsgquelgxvvjyynze hiumsgquelgxvvjyynze hiumsgquelgxvvjyynze hiumsgquelgxvvjyynze hiumsgquelgxvvjyynze hiumsgquelgxvvjyynze hiumsgquelgxvvjyynze hiumsgquelgxvvjyynze hiumsgquelgxvvjyynze" style="border:none!important;margin:0!important;" src="http://www.assoc-amazon.com/e/ir?t=invisblock-20&amp;l=as2&amp;o=1&amp;a=0312186509" border="0" alt="" width="1" height="1" />, which I'd never heard of, but for $6, I had to grab it.  (Yes, it's an old library book.)  I got <a href="http://www.amazon.com/gp/product/0262561158?ie=UTF8&amp;tag=invisblock-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0262561158">A Little Java, A Few Patterns</a><img class=" byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi hiumsgquelgxvvjyynze hiumsgquelgxvvjyynze hiumsgquelgxvvjyynze hiumsgquelgxvvjyynze hiumsgquelgxvvjyynze hiumsgquelgxvvjyynze hiumsgquelgxvvjyynze hiumsgquelgxvvjyynze hiumsgquelgxvvjyynze hiumsgquelgxvvjyynze hiumsgquelgxvvjyynze hiumsgquelgxvvjyynze hiumsgquelgxvvjyynze hiumsgquelgxvvjyynze" style="border:none!important;margin:0!important;" src="http://www.assoc-amazon.com/e/ir?t=invisblock-20&amp;l=as2&amp;o=1&amp;a=0262561158" border="0" alt="" width="1" height="1" /> because I loved <a href="http://www.amazon.com/gp/product/0262560992?ie=UTF8&amp;tag=invisblock-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0262560992">The Little Schemer</a><img class=" byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi hiumsgquelgxvvjyynze hiumsgquelgxvvjyynze hiumsgquelgxvvjyynze hiumsgquelgxvvjyynze hiumsgquelgxvvjyynze hiumsgquelgxvvjyynze hiumsgquelgxvvjyynze hiumsgquelgxvvjyynze hiumsgquelgxvvjyynze hiumsgquelgxvvjyynze hiumsgquelgxvvjyynze hiumsgquelgxvvjyynze hiumsgquelgxvvjyynze hiumsgquelgxvvjyynze" style="border:none!important;margin:0!important;" src="http://www.assoc-amazon.com/e/ir?t=invisblock-20&amp;l=as2&amp;o=1&amp;a=0262560992" border="0" alt="" width="1" height="1" />.  <a href="http://www.amazon.com/gp/product/354021304X?ie=UTF8&amp;tag=invisblock-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=354021304X">Grammatical Picture Generation</a><img class=" byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi hiumsgquelgxvvjyynze hiumsgquelgxvvjyynze hiumsgquelgxvvjyynze hiumsgquelgxvvjyynze hiumsgquelgxvvjyynze hiumsgquelgxvvjyynze hiumsgquelgxvvjyynze hiumsgquelgxvvjyynze hiumsgquelgxvvjyynze hiumsgquelgxvvjyynze hiumsgquelgxvvjyynze hiumsgquelgxvvjyynze hiumsgquelgxvvjyynze hiumsgquelgxvvjyynze" style="border:none!important;margin:0!important;" src="http://www.assoc-amazon.com/e/ir?t=invisblock-20&amp;l=as2&amp;o=1&amp;a=354021304X" border="0" alt="" width="1" height="1" /> is about writing tiny languages that generate fractal-type images, something I've been playing with recently.  And I actually bought <a href="http://www.amazon.com/gp/product/1449379869?ie=UTF8&amp;tag=invisblock-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=1449379869">Beautiful Visualization</a><img class=" byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi byxmxweyeumkaqzmwcfi hiumsgquelgxvvjyynze hiumsgquelgxvvjyynze hiumsgquelgxvvjyynze hiumsgquelgxvvjyynze hiumsgquelgxvvjyynze hiumsgquelgxvvjyynze hiumsgquelgxvvjyynze hiumsgquelgxvvjyynze hiumsgquelgxvvjyynze hiumsgquelgxvvjyynze hiumsgquelgxvvjyynze hiumsgquelgxvvjyynze hiumsgquelgxvvjyynze hiumsgquelgxvvjyynze" style="border:none!important;margin:0!important;" src="http://www.assoc-amazon.com/e/ir?t=invisblock-20&amp;l=as2&amp;o=1&amp;a=1449379869" border="0" alt="" width="1" height="1" /> at the conference itself, not at Powell's.  It's fantastic, though, I read it the whole flight home.

OK!  Enough fawning over books, I'm embarrassing myself.
<h4>Asynchronous JavaScript</h4>
My team's been bogged down lately by some ASPX pages with very complex javascript behavior.  Somewhere between <a href="http://stratifiedjs.org/">Stratefied.js</a> and <a href="http://msdn.microsoft.com/en-us/devlabs/ee794896.aspx">Reactive Extensions for JS</a>, there might be a way to tame them.

Stratefied.js introduces new language constructs to javascript to implement concurrency semantics. I'm not 100% on the semantics themselves -- they bear looking further into, but they don't seem terribly complicated. The part I thought was neat was how they're implemented in all browsers, even geriatric IE6:

[sourcecode lang="html"]
&lt;script src=&quot;stratefied.js&quot; type=&quot;text/js&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/sjs&quot;&gt;
  /* your code here, including new syntax */
&lt;/script&gt;
[/sourcecode]

Notice the type attribute of the second script?  Once the page is loaded, Stratefied.js loads all scripts of type "text/sjs", and does some source-transformation, turning the new constructs into (I'm guessing) gnarly, but standard, javascript.

Reactive Extensions for JS come from open source's best friend Microsoft. The gist is this: asynchronous coding with call-backs is hard, but if you treat events (from the user, from ajax HTTP, or whatever) as a collection that you can subscribe to, and you can map and filter those collections with anonymous functions, it's easier. We'll have to see. The speaker, Erik Meijer, gave a <a href="http://live.visitmix.com/MIX10/Sessions/FTL01">pretty similar talk at MIX</a>.
<h4>Badges, with Ribbons</h4>
<a href="http://invisibleblocks.files.wordpress.com/2010/07/img_2857-small.jpg"><img class="alignnone size-full wp-image-447" src="http://invisibleblocks.files.wordpress.com/2010/07/img_2857-small.jpg" alt="my badge" width="342" height="456" /></a>

They took some flak for the ribbon color-text, especially for the <a href="http://www.flickr.com/photos/oreillyconf/4816395283/in/set-72157624428101453/">desperate perl hackers</a>, but they were pretty good about it.  They even asked what ribbons we'd like to see next year, so we don't have to customize quite so much.
<h4>Inspiration and Awesomeness</h4>
The world is full of inventive, stubborn people doing really cool things to make the world better. <a href="http://mifos.org/">Mifos.org</a> helps microfinance banks run smoothly. <a href="http://arduino.cc">Arduino</a> and <a href="http://www.concurrency.cc/">Plumbing</a> making hardware hacking accessible to whole new audiences.  <a href="http://www.oscon.com/oscon2010/public/schedule/detail/13425">OpenSETI</a> wants to involve programmers more in finding whether we're alone in the universe.  <a href="http://codeforamerica.org/">Code for America</a> can help our government be more efficient and transparent.  If you ever wanted to start contributing to open source, joining <em>any</em> of these projects should be a great start.
<h4>Pretend You Were There!</h4>
Or re-live the experience, if you were!  Here's the <a href="http://www.youtube.com/view_play_list?p=12696FB0B040FA53">keynotes on youtube</a>, and <a href="http://www.flickr.com/photos/oreillyconf/sets/72157624428101453/">photos on flickr</a>.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>445</wp:post_id>
  <wp:post_date>2010-07-28 08:07:24</wp:post_date>
  <wp:post_date_gmt>2010-07-28 12:07:24</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>after-oscon-2010</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="conferences-2"><![CDATA[Conferences]]></category>
  <category domain="category" nicename="open-source"><![CDATA[Open Source]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[292320]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>WordCram: Open-Source Word Clouds for Processing</title>
  <link>http://invisibleblocks.com/2010/08/31/wordcram-open-source-word-clouds-for-processing/</link>
  <pubDate>Wed, 01 Sep 2010 01:31:08 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.wordpress.com/?p=463</guid>
  <description/>
  <content:encoded><![CDATA[I just released a project I've been working on for a while, called <a href="http://wordcram.org">WordCram</a>.  As the title says, it's a Processing library for generating word clouds.

I found <a href="http://wordle.net">wordle.net</a> a few years ago and really liked it, and after seeing the code for Algirdas Rascius' <a href="http://www.openprocessing.org/visuals/?visualID=1811">Scattered Letters</a> on OpenProcessing.org, I tried making <a href="http://www.flickr.com/photos/bonsai_giant/tags/wordle/">some of my own</a>.  It was fun, but I thought it ran too slowly to bother bundling it into a Processing library.

After reading the <a href="http://blog.wordle.net/2010/05/wordle-as-beautiful-visualization.html">Wordle chapter</a> from <a href="http://www.amazon.com/gp/product/1449379869?ie=UTF8&amp;tag=invisblock-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=1449379869">Beautiful Visualization</a>, I learned a few new tricks, and it's a bit faster now, so here it is.  There's still work to do, but that's the fun part.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>463</wp:post_id>
  <wp:post_date>2010-08-31 21:31:08</wp:post_date>
  <wp:post_date_gmt>2010-09-01 01:31:08</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>wordcram-open-source-word-clouds-for-processing</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="wordcram"><![CDATA[WordCram]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[292320]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Redder Pastures</title>
  <link>http://invisibleblocks.com/2011/08/17/redder-pastures/</link>
  <pubDate>Thu, 18 Aug 2011 01:46:44 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.wordpress.com/?p=470</guid>
  <description/>
  <content:encoded><![CDATA[What the hell happened? I mean, I don't care for "I haven't been blogging because..." posts either, but it's been <em>quiet</em> here lately, hasn't it?

The explanation comes in two parts:

After I announced I was releasing <a href="http://wordcram.org">WordCram</a>, I worked like mad on it. In my last post, the one announcing WordCram, I said "There's still work to do, but that's the fun part," but I had no idea. And it's not even a big library, or do anything useful! And there is certainly still work to do. I have a new, visceral appreciation for how much open source software developers give us. That's the first part.

But all that stopped last April, when my employer began going through some - I guess "changes" is a safe enough word. Nevermind what they were. It got me thinking it was time to find a job I liked better. The job search is the second part of the explanation. I didn't want another ordinary-business kind of job, but I didn't know which direction to head in. After  sinking myself in some Processing.org dataviz, science, and Ruby, talking to a bunch of excellent people, and finding some luck, I got a spot on the <a href="http://seeclickfix.com">SeeClickFix</a> team, doing Ruby on Rails, and helping citizens improve their community.

Get a great job, working in a great language, making the world a little bit better:

<a href="http://invisibleblocks.files.wordpress.com/2011/08/checked_box.jpg"><img class="size-full wp-image-473 alignnone" style="border-color:initial;border-style:initial;border-width:0;" title="checked_box" src="http://invisibleblocks.files.wordpress.com/2011/08/checked_box.jpg" alt="" width="100" height="98" /></a>

<img class="alignright" style="float:right" src="http://upload.wikimedia.org/wikipedia/commons/7/73/Ruby_logo.svg" alt="" width="100" height="100" />I start in September, right before I start classes at <a href="http://university.rubymendicant.com/">Ruby Mendicant University</a>. It's been a busy spring and summer, and it'll be a busy fall, too.

And at some point, I have some WordCram things to finish...]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>470</wp:post_id>
  <wp:post_date>2011-08-17 21:46:44</wp:post_date>
  <wp:post_date_gmt>2011-08-18 01:46:44</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>redder-pastures</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[292320]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>twitter_cards_summary_img_size</wp:meta_key>
    <wp:meta_value><![CDATA[a:7:{i:0;i:100;i:1;i:98;i:2;i:2;i:3;s:23:"width="100" height="98"";s:4:"bits";i:8;s:8:"channels";i:3;s:4:"mime";s:10:"image/jpeg";}]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>9801</wp:comment_id>
    <wp:comment_author><![CDATA[Rob Bazinet (@rbazinet)]]></wp:comment_author>
    <wp:comment_author_email>rbazinet@twitter.example.com</wp:comment_author_email>
    <wp:comment_author_url>http://twitter.com/rbazinet</wp:comment_author_url>
    <wp:comment_author_IP>24.177.4.148</wp:comment_author_IP>
    <wp:comment_date>2011-08-22 10:21:27</wp:comment_date>
    <wp:comment_date_gmt>2011-08-22 14:21:27</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Love the post title. :-)  Good luck on the new gig, sounds more like a fit for you than the latest one.  Are you going to be able to work from home?]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>hc_post_as</wp:meta_key>
      <wp:meta_value>twitter</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_avatar</wp:meta_key>
      <wp:meta_value>http://a3.twimg.com/profile_images/1318869805/RobBazinet_normal.jpg</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_foreign_user_id</wp:meta_key>
      <wp:meta_value>9573202</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1314022888</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1314022889.4574";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2011-08-22 14:21:27</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9802</wp:comment_id>
    <wp:comment_author><![CDATA[Daniel Bernier]]></wp:comment_author>
    <wp:comment_author_email>danbernier@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://invisibleblocks.wordpress.com/</wp:comment_author_url>
    <wp:comment_author_IP>69.0.37.25</wp:comment_author_IP>
    <wp:comment_date>2011-08-22 18:45:55</wp:comment_date>
    <wp:comment_date_gmt>2011-08-22 22:45:55</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Thanks! They'll let me work from home occasionally, but it's much nicer to be in the same place.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>292320</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1314053156</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1314053156.2163";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:11:"bonsaigiant";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2011-08-22 22:45:55</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Cover your Moleskine in Brown Paper</title>
  <link>http://invisibleblocks.com/2012/02/21/cover-your-moleskine-in-brown-paper/</link>
  <pubDate>Tue, 21 Feb 2012 04:05:25 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.com/?p=501</guid>
  <description/>
  <content:encoded><![CDATA[(He's kidding, right? He didn't really cover his moleskine in ugly brown papeAUGGUGHHUH)

<a href="http://invisibleblocks.files.wordpress.com/2012/02/finished-moleskine.jpg"><img class="size-medium wp-image-502" title="Moleskine notebook, covered in brown paper" src="http://invisibleblocks.files.wordpress.com/2012/02/finished-moleskine.jpg?w=300" alt="" width="300" height="225" /></a>

(..UGUGHAOMIGOD, he actually did. So gross.)

Ok. Did you hear the story about the reporter who interviewed Steve Jobs about the iPod, and Steve Jobs was outraged that the reporter's iPod was in a protective neoprene case, which made it a) look ugly, and b) not gradually pick up that "scratched stainless steel" patina? Maybe this is like that. Maybe a brown paper bag is uglier than sleek faux-leather. Maybe a moleskine should look like it doesn't often drink beer, but when it does...

Or maybe raw brown paper is DIY-chic. Maybe you can't tell your moleskine from everybody else's. Maybe your notebook already takes enough abuse. Maybe a brown paper cover is a good idea.

Whatever. I got the idea for this about a year ago, and did it just to see whether I could. (The moleskine elastic, as you'll see, makes this a little trickier than your typical book covering.) I've done it several times, because I kind of like it. I finally googled today to see whether anyone else had instructions up for this, and was surprised I couldn't find any. So here we go!
<h3>Materials</h3>
<a href="http://invisibleblocks.files.wordpress.com/2012/02/moleskine-materials.jpg"><img class="size-medium wp-image-503" title="Materials" src="http://invisibleblocks.files.wordpress.com/2012/02/moleskine-materials.jpg?w=300" alt="" width="300" height="225" /></a>

* Your uncovered moleskine notebook. I'm using a <a href="http://www.amazon.com/Moleskine-Plain-Notebook-Large/dp/8883701143/">large</a>, but I've also done this with <a href="http://www.amazon.com/Moleskine-Ruled-Notebook-Pocket/dp/8883701003/">small ones</a>.
* A brown paper bag. For the large notebook, I'm using a bag that's 7 1/16 x 4 1/2 x 13 3/4; for small notebooks, you can use something as small as a lunch bag.
* scissors
* a pen
* packing tape (optional - just for reinforcing some weak joints)

<h3>The Easy Part - a pretty ordinary book covering</h3>
This part is just like the <a href="http://www.google.com/search?q=how%20to%20cover%20a%20book%20with%20a%20shopping%20bag">book coverings you maybe made in school.</a>

Cut down the seam of the paper bag, and cut off the bottom, so you have a large sheet of brown paper.

Fold the top and bottom edges of the paper down, so the book is the same height as the paper.

<a href="http://invisibleblocks.files.wordpress.com/2012/02/notebook-on-folded-paper.jpg"><img class="size-medium wp-image-504 alignnone" title="notebook-on-folded-paper" src="http://invisibleblocks.files.wordpress.com/2012/02/notebook-on-folded-paper.jpg?w=300" alt="" width="300" height="225" /></a>

The paper folds create a sleeve, and you want to be able to slide the front cover into it. In fact, slide the notebook's front cover into it now, and fold it back, around the book. If it looks like this:

<a href="http://invisibleblocks.files.wordpress.com/2012/02/too-much-paper.jpg"><img class="alignnone size-medium wp-image-506" title="too-much-paper" src="http://invisibleblocks.files.wordpress.com/2012/02/too-much-paper.jpg?w=300" alt="" width="300" height="225" /></a>

...then cut the extra paper, so it looks like this:

<a href="http://invisibleblocks.files.wordpress.com/2012/02/just-enough-paper.jpg"><img class="alignnone size-medium wp-image-505" title="just-enough-paper" src="http://invisibleblocks.files.wordpress.com/2012/02/just-enough-paper.jpg?w=300" alt="" width="300" height="225" /></a>
<h3>Where it gets different</h3>
That elastic is getting in the way, right? Unwrap the book a bit, we're gonna use the scissors - but read through this part all the way before you start cutting.

If you measure, you'll see that the elastic is 1/4" wide, and 3/4" from the edge of the book cover (sorry for the blue-and-purple):

<a href="http://invisibleblocks.files.wordpress.com/2012/02/measurments.jpg"><img class="alignnone size-medium wp-image-507" title="measurments" src="http://invisibleblocks.files.wordpress.com/2012/02/measurments.jpg?w=300" alt="" width="300" height="225" /></a>

The trick is to cut some of the paper off of the cover-flap, so the elastics can get out. In this picture, I marked the parts to cut out with a black marker (the green arrows):

<a href="http://invisibleblocks.files.wordpress.com/2012/02/where-to-cut2.jpg"><img class="alignnone size-full wp-image-510" title="where-to-cut" src="http://invisibleblocks.files.wordpress.com/2012/02/where-to-cut2.jpg" alt="" width="500" height="375" /></a>

Make sure you cut on the back flap, not on the back cover. For some reason, I always screw this up - I want to cut the back cover. Don't do that. Cut the back flap.

Leave at least 1/4" between the cut and the fold. I cut a trapezoid shape, which makes it a bit easier to put it together, but it's not that important. Here's how it should look when you're done:

<a href="http://invisibleblocks.files.wordpress.com/2012/02/cut-results1.jpg"><img class="alignnone size-full wp-image-513" title="cut-results" src="http://invisibleblocks.files.wordpress.com/2012/02/cut-results1.jpg" alt="" width="500" height="375" /></a>

You don't <em>have</em> to reinforce this section with packing tape, but I'd recommend it - with the larger notebook, the elastic jerks this part of the cover around a lot, and the packing tape will make it last a lot longer. Don't forget to do the bottom half, too.

Take the whole cover off the book - it's easiest to put the back cover on first. Slide it in, so the elastic pops out of the cuts you just made:

<a href="http://invisibleblocks.files.wordpress.com/2012/02/img_3762.jpg"><img class="alignnone size-full wp-image-512" title="Elastic sticking through the slits" src="http://invisibleblocks.files.wordpress.com/2012/02/img_3762.jpg" alt="" width="500" height="375" /></a>

Ok, this is the tricky bit - getting the cover on, and the elastic arranged right. Close the front of the book under, so you're still looking at the back side of it:

<a href="http://invisibleblocks.files.wordpress.com/2012/02/putting-it-together.jpg"><img class="alignnone size-full wp-image-514" title="putting-it-together" src="http://invisibleblocks.files.wordpress.com/2012/02/putting-it-together.jpg" alt="" width="500" height="375" /></a>

Fold the elastic around the spine (to the right, in the above picture), so it's holding the book shut. Here's a close-up of the top of the book:

<a href="http://invisibleblocks.files.wordpress.com/2012/02/putting-it-together-2.jpg"><img class="alignnone size-full wp-image-515" title="putting-it-together-2" src="http://invisibleblocks.files.wordpress.com/2012/02/putting-it-together-2.jpg" alt="" width="500" height="375" /></a>

The hard part's done! Wrap the cover around the back of the book. Before you wrap it around the front, take the elastic off again - you'll need to open the notebook to get the front of the cover on. Open the front cover of the notebook, and slide on the cover flap. Pop the elastic back on, and...

<a href="http://invisibleblocks.files.wordpress.com/2012/02/finished-moleskine.jpg"><img class="alignnone size-full wp-image-502" title="Moleskine notebook, covered in brown paper" src="http://invisibleblocks.files.wordpress.com/2012/02/finished-moleskine.jpg" alt="" width="500" height="375" /></a>

All done!
<h3>Side Benefits</h3>
Moleskines famously sport that back accordion pocket. Covering one in brown paper like this means you can add two more:

<a href="http://invisibleblocks.files.wordpress.com/2012/02/front-pocket.jpg"><img class="alignnone size-medium wp-image-517" title="front-pocket" src="http://invisibleblocks.files.wordpress.com/2012/02/front-pocket.jpg?w=225" alt="" width="225" height="300" /></a>   <a href="http://invisibleblocks.files.wordpress.com/2012/02/back-pocket.jpg"><img class="size-medium wp-image-516 alignnone" title="back-pocket" src="http://invisibleblocks.files.wordpress.com/2012/02/back-pocket.jpg?w=300" alt="" width="300" height="225" /></a>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>501</wp:post_id>
  <wp:post_date>2012-02-21 00:05:25</wp:post_date>
  <wp:post_date_gmt>2012-02-21 04:05:25</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>cover-your-moleskine-in-brown-paper</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="diy"><![CDATA[diy]]></category>
  <category domain="post_tag" nicename="moleskine-notebook"><![CDATA[moleskine notebook]]></category>
  <category domain="category" nicename="notebooks"><![CDATA[Notebooks]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[292320]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>tagazine-media</wp:meta_key>
    <wp:meta_value><![CDATA[a:7:{s:7:"primary";s:73:"http://invisibleblocks.files.wordpress.com/2012/02/finished-moleskine.jpg";s:6:"images";a:13:{s:73:"http://invisibleblocks.files.wordpress.com/2012/02/finished-moleskine.jpg";a:6:{s:8:"file_url";s:73:"http://invisibleblocks.files.wordpress.com/2012/02/finished-moleskine.jpg";s:5:"width";s:3:"600";s:6:"height";s:3:"450";s:4:"type";s:5:"image";s:4:"area";s:6:"270000";s:9:"file_path";s:0:"";}s:74:"http://invisibleblocks.files.wordpress.com/2012/02/moleskine-materials.jpg";a:6:{s:8:"file_url";s:74:"http://invisibleblocks.files.wordpress.com/2012/02/moleskine-materials.jpg";s:5:"width";s:3:"600";s:6:"height";s:3:"450";s:4:"type";s:5:"image";s:4:"area";s:6:"270000";s:9:"file_path";s:0:"";}s:79:"http://invisibleblocks.files.wordpress.com/2012/02/notebook-on-folded-paper.jpg";a:6:{s:8:"file_url";s:79:"http://invisibleblocks.files.wordpress.com/2012/02/notebook-on-folded-paper.jpg";s:5:"width";s:3:"600";s:6:"height";s:3:"450";s:4:"type";s:5:"image";s:4:"area";s:6:"270000";s:9:"file_path";s:0:"";}s:69:"http://invisibleblocks.files.wordpress.com/2012/02/too-much-paper.jpg";a:6:{s:8:"file_url";s:69:"http://invisibleblocks.files.wordpress.com/2012/02/too-much-paper.jpg";s:5:"width";s:3:"600";s:6:"height";s:3:"450";s:4:"type";s:5:"image";s:4:"area";s:6:"270000";s:9:"file_path";s:0:"";}s:72:"http://invisibleblocks.files.wordpress.com/2012/02/just-enough-paper.jpg";a:6:{s:8:"file_url";s:72:"http://invisibleblocks.files.wordpress.com/2012/02/just-enough-paper.jpg";s:5:"width";s:3:"600";s:6:"height";s:3:"450";s:4:"type";s:5:"image";s:4:"area";s:6:"270000";s:9:"file_path";s:0:"";}s:66:"http://invisibleblocks.files.wordpress.com/2012/02/measurments.jpg";a:6:{s:8:"file_url";s:66:"http://invisibleblocks.files.wordpress.com/2012/02/measurments.jpg";s:5:"width";s:3:"600";s:6:"height";s:3:"450";s:4:"type";s:5:"image";s:4:"area";s:6:"270000";s:9:"file_path";s:0:"";}s:68:"http://invisibleblocks.files.wordpress.com/2012/02/where-to-cut2.jpg";a:6:{s:8:"file_url";s:68:"http://invisibleblocks.files.wordpress.com/2012/02/where-to-cut2.jpg";s:5:"width";s:3:"600";s:6:"height";s:3:"450";s:4:"type";s:5:"image";s:4:"area";s:6:"270000";s:9:"file_path";s:0:"";}s:67:"http://invisibleblocks.files.wordpress.com/2012/02/cut-results1.jpg";a:6:{s:8:"file_url";s:67:"http://invisibleblocks.files.wordpress.com/2012/02/cut-results1.jpg";s:5:"width";s:3:"600";s:6:"height";s:3:"450";s:4:"type";s:5:"image";s:4:"area";s:6:"270000";s:9:"file_path";s:0:"";}s:63:"http://invisibleblocks.files.wordpress.com/2012/02/img_3762.jpg";a:6:{s:8:"file_url";s:63:"http://invisibleblocks.files.wordpress.com/2012/02/img_3762.jpg";s:5:"width";s:3:"600";s:6:"height";s:3:"450";s:4:"type";s:5:"image";s:4:"area";s:6:"270000";s:9:"file_path";s:0:"";}s:74:"http://invisibleblocks.files.wordpress.com/2012/02/putting-it-together.jpg";a:6:{s:8:"file_url";s:74:"http://invisibleblocks.files.wordpress.com/2012/02/putting-it-together.jpg";s:5:"width";s:3:"600";s:6:"height";s:3:"450";s:4:"type";s:5:"image";s:4:"area";s:6:"270000";s:9:"file_path";s:0:"";}s:76:"http://invisibleblocks.files.wordpress.com/2012/02/putting-it-together-2.jpg";a:6:{s:8:"file_url";s:76:"http://invisibleblocks.files.wordpress.com/2012/02/putting-it-together-2.jpg";s:5:"width";s:3:"600";s:6:"height";s:3:"450";s:4:"type";s:5:"image";s:4:"area";s:6:"270000";s:9:"file_path";s:0:"";}s:67:"http://invisibleblocks.files.wordpress.com/2012/02/front-pocket.jpg";a:6:{s:8:"file_url";s:67:"http://invisibleblocks.files.wordpress.com/2012/02/front-pocket.jpg";s:5:"width";s:3:"450";s:6:"height";s:3:"600";s:4:"type";s:5:"image";s:4:"area";s:6:"270000";s:9:"file_path";s:0:"";}s:66:"http://invisibleblocks.files.wordpress.com/2012/02/back-pocket.jpg";a:6:{s:8:"file_url";s:66:"http://invisibleblocks.files.wordpress.com/2012/02/back-pocket.jpg";s:5:"width";s:3:"600";s:6:"height";s:3:"450";s:4:"type";s:5:"image";s:4:"area";s:6:"270000";s:9:"file_path";s:0:"";}}s:6:"videos";a:0:{}s:11:"image_count";s:2:"13";s:6:"author";s:6:"292320";s:7:"blog_id";s:6:"290283";s:9:"mod_stamp";s:19:"2012-02-21 04:09:15";}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>BarCamp Boston 7: This Weekend!</title>
  <link>http://invisibleblocks.com/2012/04/03/barcamp-boston-7-this-weekend/</link>
  <pubDate>Tue, 03 Apr 2012 20:34:09 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.com/?p=535</guid>
  <description/>
  <content:encoded><![CDATA[<img src="{{site.baseurl}}/assets/2012/04/barcampboston7logo.png" alt="BarCamp Boston 7">

I don't know what the tea thing is about, but whatever! I'll be there, come say hi!]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>535</wp:post_id>
  <wp:post_date>2012-04-03 16:34:09</wp:post_date>
  <wp:post_date_gmt>2012-04-03 20:34:09</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>barcamp-boston-7-this-weekend</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[292320]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>New Haven Ruby: First Thursday, Third Wednesday</title>
  <link>http://invisibleblocks.com/2012/06/09/new-haven-ruby-first-thursday-third-wednesday/</link>
  <pubDate>Sat, 09 Jun 2012 16:04:54 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.com/?p=539</guid>
  <description/>
  <content:encoded><![CDATA[The <a href="http://newhavenrb.org">New Haven ruby group</a> is gonna start building some rhythm, meeting twice every month, on the first Thursday and the third Wednesday. Even months (June, August, October) are hack-nights; odd months are social nights.

<a href="http://invisibleblocks.files.wordpress.com/2012/06/photo.jpg"><img class="alignright size-medium wp-image-562" title="Denis visits SeeClickFix" src="http://invisibleblocks.files.wordpress.com/2012/06/photo.jpg?w=225" alt="" width="225" height="300" /></a>

We had our <a href="http://www.meetup.com/newhavenrb/events/67147902/">first one last Thursday</a>, at the <a href="http://seeclickfix.com">SeeClickFix</a> offices, and had a great turn out - about 15 people! Even <a href="http://twitter.com/jumph4x">Denis</a> came out to join us. We were hacking on web apps for coordinating tasks, on ruby for reformatting <em>other</em> ruby, and some of us were just discovering programming for the first time.

Our <a href="http://www.meetup.com/newhavenrb/events/68306772/">next one is Wednesday, June 20th</a>, and will again be at SeeClickFix, where free parking is just around the corner, and good pizza delivers. New Haven's newest hackerspace, <a href="http://makehaven.org/">MakeHaven</a>, is <em>also</em> around the corner, and there's talk of doing a visit at some point. I'll be there, probably hacking on an app for printing fliers for user groups, or an IRC bot for the group, or a regular expression parser, or some <a href="http://projecteuler.net">Project Euler</a> problems.

Hope to see you there!

<a href="http://invisibleblocks.files.wordpress.com/2012/06/june-thursday-hacknight.jpg"><img class="aligncenter size-medium wp-image-569" title="june-thursday-hacknight" src="http://invisibleblocks.files.wordpress.com/2012/06/june-thursday-hacknight.jpg?w=300" alt="" width="300" height="225" /></a>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>539</wp:post_id>
  <wp:post_date>2012-06-09 12:04:54</wp:post_date>
  <wp:post_date_gmt>2012-06-09 16:04:54</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>new-haven-ruby-first-thursday-third-wednesday</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="new-haven-ruby"><![CDATA[New Haven Ruby]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[292320]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Out of Love with Active Record</title>
  <link>http://invisibleblocks.com/2012/05/08/out-of-love-with-active-record/</link>
  <pubDate>Wed, 09 May 2012 00:36:44 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.com/?p=540</guid>
  <description/>
  <content:encoded><![CDATA[(I'm a new-comer to Rails. When I first found Ruby, and Rails, I liked the Ruby better. And I never found many Rails jobs near home anyway. So for years, Ruby flavored my C#, and C# is where I learned, among other things, to persist my domain aggregates with NHibernate. Now I'm a card-carrying Rails jobber, which is great, because I play with Ruby all day. And the Rails community is discovering domain-driven design, and ORMs...)

Steve Klabnik just posted about <a href="http://blog.steveklabnik.com/posts/2012-05-07-mixins--a-refactoring-anti-pattern">resisting the urge to factor your models into behavior-in-a-mixin and dumb-persistence-with-active-record</a>. He nails it when he says:
<blockquote>Whenever we refactor, we have to consider what we're using to evaluate that our refactoring has been successful. For me, the default is complexity. That is, any refactoring I'm doing is trying to reduce complexity... One good way that I think about complexity on an individual object level [is its] 'attack surface.' We call this 'encapsulation' in object oriented software design.</blockquote>
If you learn only one thing from his post, let it be that "mixins do not really reduce the complexity of your objects." Greg Brown threw me when he said that mixins are just another form of inheritance, and I think he was getting at the same thing.

Steve's suggestion for separating persistence and behavior is to - duh, once you see it - separate them into different classes: a Post and a PostMapper, or a Post and a PostRepository. When I used C# and NHibernate, we loaded our Posts from the PostRepository, which used our PostMapper for data access. (Actually, our PostMapper was an XML mapping file.) You might call that overkill, but in a legacy app, it was nice to sheetrock our repositories over all the different data access technologies we'd acquired over the years, from the shiny new ORM to the crusty old Strongly-Typed DataSets.

When I was on that team, the thing that we worried about was, what grain should we build our repositories at? We didn't have simple models, we had domain aggregates: we'd load a ThirdPartyAdministrator, which had many Clients, which each had a number of Accounts of different types, each of which had different options and sub-objects. So, what kind of repositories should we build, and what methods should they have? If we want to load the Client's Accounts, should we load the ThirdPartyAdministrator, find the Client, and get its Accounts? load the Accounts directly? load the Client, and get its Accounts?

For a ridiculously simplified example, but to give you the flavor of it, say we load the ThirdPartyAdministrator, the aggregate root, and go from there:

[sourcecode lang="ruby"]
class ThirdPartyAdministratorRepository
  def load_tpa(id)
    ...
  end
end

tpa = ThirdPartyAdministratorRepositor.load_tpa(42)
client = tpa.clients[client_id]
accounts = client.accounts
[/sourcecode]

That's too coarse; do we really have to load the TPA before we can get the client we're after?

[sourcecode lang="ruby"]
class ClientRepository
  def load_client(id)
    ...
  end
end

class AccountRepository
  def load_account(id)
    ...
  end
end

client = ClientRepository.load_client(client_id)
accounts = client.account_ids.map { |id|
  AccountRepository.load_account(id)
}
[/sourcecode]

That's too fine a grain, too low-level; we don't want to have to muck around with Account IDs.

[sourcecode lang="ruby"]
client = ClientRepository.load_client(client_id)
accounts = client.accounts
[/sourcecode]

That might be a good middle-approach.

It comes down to knowing your application's data-access patterns, and your domain's constraints. If you often need a chunk of data, all together, you should probably have a repository for it. If one piece of data depends on another, your repository probably shouldn't make you get them separately.

With Rails' ActiveRecord, all this is sorted out for you - you define your associations, it provides all those querying methods, and you use the correct ones for what you need. With repositories, you have decisions to make - you have to design it, and design is choice. But choosing is work! and you can choose inconsistently! sometimes, it even makes sense to! I'm curious to see how the Rails community, with its culture of convention, tackles this. And for myself, I plan to check out DataMapper at some point.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>540</wp:post_id>
  <wp:post_date>2012-05-08 20:36:44</wp:post_date>
  <wp:post_date_gmt>2012-05-09 00:36:44</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>out-of-love-with-active-record</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="productivity"><![CDATA[Productivity]]></category>
  <category domain="post_tag" nicename="rails"><![CDATA[rails]]></category>
  <category domain="post_tag" nicename="ruby"><![CDATA[Ruby]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[292320]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_72ef4e8dc47dc956070aa658cc2e3e5e</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>9944</wp:comment_id>
    <wp:comment_author><![CDATA[Sheldon Hearn]]></wp:comment_author>
    <wp:comment_author_email>sheldonh@starjuice.net</wp:comment_author_email>
    <wp:comment_author_url>http://starjuice.net/</wp:comment_author_url>
    <wp:comment_author_IP>41.185.173.208</wp:comment_author_IP>
    <wp:comment_date>2012-07-15 08:55:46</wp:comment_date>
    <wp:comment_date_gmt>2012-07-15 12:55:46</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Thank you. You've validated both the sense of dread I feel when I consider moving beyond Active Record, and the sense of hope I feel about the potential results.

Here's where I'm at with this:

http://starjuice.net/post/27254089033/active-records-vs-objects]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1342356946</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1342356946.9237";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:8:"sheldonh";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2012-07-15 12:55:46</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Chaos, Order, and Software Development</title>
  <link>http://invisibleblocks.com/2012/09/10/chaos-order-and-software-development/</link>
  <pubDate>Mon, 10 Sep 2012 22:17:57 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.com/?p=559</guid>
  <description/>
  <content:encoded><![CDATA[<a href="http://www.continuousthinking.com/">Zach Dennis</a> gave a very interesting, but not terribly well-received talk at RailsConf 2012, called "Sand Piles and Software." (It's on the <a href="http://railsconf2012.busyconf.com/schedule/full">schedule</a> on Tuesday in Salon J, if you want to check it out.) Here are the <a href="https://speakerdeck.com/u/zdennis/p/sand-piles-and-software-railsconf-2012">slides</a> (which are more suggestion than information), and here's the synopsis:

> This talk applies the concepts of chaos theory to software development using the <a href="http://www.thp.uni-duisburg.de/~sven/_publications/_pub_source/preprint_1997_03.pdf">Bak–Tang–Wiesenfeld sand pile model</a> [PDF link] as the vehicle for exploration. The sand pile model, which is used to show how a complex system is attracted to living on the edge of chaos, will be used as a both a powerful metaphor and analogy for building software. Software, it turns out, has its own natural attraction to living in its own edge of chaos. In this talk, we'll explore what this means and entertain questions for what to do about it.

The TL;DR of the talk was: as you build your software system, as you add features, you add complexity, and when it's <em>too</em> complex, you won't be able to add anything more, until you clean something up. So you clean a bit up, and add more complexity, until it falls over again. Like dropping grains of sand onto a sand pile, each grain is tiny, hardly worth noting, but one of them will cause a slide.

That much rang very true with me.

Zach's advice, then, was to "fall in love with simplicity," and "loathe unnecessary complication," and there are some more slides about practices and values and refactoring, but I can't remember the ideas for them; I'll have to check my notes.

To me, that part sounded virtuous.

This morning, I turned again, for other reasons, to Dick Gabriel's <a href="http://www.dreamsongs.com/MobSoftware.html">Mob Software: The Erotic Life of Code</a>. (I'll say it until I stop meeting programmers who haven't read him: <em>you are missing out.</em>) I got to the part where he talks about swarms (he's preparing to introduce us to the Mob, the open-source hackers), and complexity emerging from local actors with simple rules, and this part reminded me of Zach Dennis' talk:

> Chaos is unpredictability: Combinations that might have lasting value or interest don't last—the energy for change is too high. Order is total predictability: The only combinations that exist are the ones that always have—the energy for stability is too high.

He goes on to quote Stuart Kauffman from "At Home in the Universe":

> It is a lovely hypothesis, with considerable supporting data, that genomic systems lie in the ordered regime near the phase transition to chaos. Were such systems too deeply into the frozen ordered regime, they would be too rigid to coordinate the complex sequences of genetic activities necessary for development. Were they too far into the gaseous chaotic regime, they would not be orderly enough.
> ...cell networks achieve both stability and flexibility...by achieving a kind of poised state balanced on the edge of chaos.

Is Zach telling us to stay where it's safe and ordered? Are we stuck on this edge between chaos and order, if we want to write interesting software? I'd like my software to be both stable and flexible. If, to achieve this stability and flexibility, its behavior must be emergent, not guided by my brain, is that ok? Or is there a way for me to still specify requirements, and get this stability and flexibility? Is emergent-design only able to produce certain kinds of software?

<a href="http://invisibleblocks.files.wordpress.com/2012/09/zach-slide-critical-point.png"><img class="aligncenter size-medium wp-image-620" title="One of Zach's slides: reaching your software's critical point" src="http://invisibleblocks.files.wordpress.com/2012/09/zach-slide-critical-point.png?w=300" alt="One of Zach's slides: reaching your software's critical point" width="300" height="224" /></a>

<em>Thanks to <a href="http://renprovey.com/">Ren</a> for reviewing this!</em>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>559</wp:post_id>
  <wp:post_date>2012-09-10 18:17:57</wp:post_date>
  <wp:post_date_gmt>2012-09-10 22:17:57</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>chaos-order-and-software-development</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="chaos"><![CDATA[chaos]]></category>
  <category domain="post_tag" nicename="complexity"><![CDATA[complexity]]></category>
  <category domain="post_tag" nicename="order"><![CDATA[order]]></category>
  <category domain="post_tag" nicename="simplicity"><![CDATA[simplicity]]></category>
  <category domain="category" nicename="software-thinking"><![CDATA[Software Thinking]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[292320]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>10025</wp:comment_id>
    <wp:comment_author><![CDATA[Dave Silveira]]></wp:comment_author>
    <wp:comment_author_email>davesilveira@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>75.138.189.222</wp:comment_author_IP>
    <wp:comment_date>2012-09-12 17:18:06</wp:comment_date>
    <wp:comment_date_gmt>2012-09-12 21:18:06</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Hey Dan, 

Nice post. Reminds of the system we worked on, and the one I am "blessed with" now. 

Business types want us to build things as fast as possible. Well meaning developers who don't know any better build systems that eventually become so rigid and fragile they can no longer provide business value effectively. Nobody was thinking about the big picture, just getting the feature out the door and getting the next client.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1347484686</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";d:1347484687.0842990875244140625;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2012-09-12 21:18:06</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Rails 3: Selectively Override Email Recipients</title>
  <link>http://invisibleblocks.com/2012/07/12/rails-3-selectively-override-email-recipients/</link>
  <pubDate>Thu, 12 Jul 2012 12:40:00 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.com/?p=575</guid>
  <description/>
  <content:encoded><![CDATA[It's a common thing, in your test environments, to intercept out-going email, and stuff it in some dumpster out back, so you don't bother your users. We do this at SeeClickFix, and we're upgrading to Rails 3, so I went searching for the new way to do this, and found Rob Aldred's <a href="http://robaldred.co.uk/2010/10/override-actionmailer-recipient-rails-2-and-3-for-development-or-testing/">handy post on the subject</a>.

So we deployed our Rails 3 branch to a test environment &amp; unleashed our QA staff on it, but they all knew that they'd never get email from that environment, so they never checked for them. Which was a problem, because <em>all the email were broken in QA.</em> Oops.

It'd be nice to only dump <em>certain</em> messages (the ones to your normal users) and let through others (the ones to your QA staff). Can we do this? Let's see.

ActionMailer::Base lets you register an interceptor, and every time it's about to send an email, it'll call your interceptor's #delivering_email method with the email as an argument. All the examples I found register a class as an interceptor, with #delivering_email implemented as a class method, like this:

[sourcecode lang="ruby"]
class FooInterceptor
  def self.delivering_email(message)
    message.to = &quot;dump@example.com&quot;
  end
end

ActionMailer::Base.register_interceptor(FooInterceptor)
[/sourcecode]

Now that's fine, but why pass a class with a class method? Why not an object with an instance method? Especially since a class is just an object, an instance of Class. Will ActionMailer::Base#register_interceptor do something funny with its argument? Try to call #new on it? Who knows?

I tried this just to see if it would work:

[sourcecode lang="ruby"]
class FooBarRecipient
  def delivering_email(message)
    message.to = &quot;dump@example.com&quot;
  end
end

ActionMailer::Base.register_interceptor(FooBarRecipient.new)
[/sourcecode]

And it does! Nice job, register_interceptor, not doing anything funky with it. Thanks!

This means we can create an interceptor object with a whitelist:

[sourcecode lang="ruby"]
class WhitelistInterceptor

  def initialize(whitelist)
    @whitelist = whitelist
  end

  def delivering_email(message)
    message.to = Array(message.to).map { |address|
      if @whitelist.include?(address)
        address
      else
        &quot;dump@example.com&quot;
      end
    }
  end

end
[/sourcecode]

Of course that's really basic - you probably want to allow all email sent to your domain, for instance. And maybe you want the messages to be tagged somehow, so you can tell which test environment a message came from, so you give the  WhitelistInterceptor the Rails environment to add as a message header. But that's the idea. And my favorite part is that the class has no Rails dependencies, so it's trivial to test.

Is there any reason not to do this?]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>575</wp:post_id>
  <wp:post_date>2012-07-12 08:40:00</wp:post_date>
  <wp:post_date_gmt>2012-07-12 12:40:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>rails-3-selectively-override-email-recipients</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="actionmailer"><![CDATA[ActionMailer]]></category>
  <category domain="category" nicename="programming"><![CDATA[Programming]]></category>
  <category domain="post_tag" nicename="rails"><![CDATA[rails]]></category>
  <category domain="post_tag" nicename="ruby"><![CDATA[Ruby]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[292320]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>tagazine-media</wp:meta_key>
    <wp:meta_value><![CDATA[a:7:{s:7:"primary";s:0:"";s:6:"images";a:0:{}s:6:"videos";a:0:{}s:11:"image_count";s:1:"0";s:6:"author";s:6:"292320";s:7:"blog_id";s:6:"290283";s:9:"mod_stamp";s:19:"2012-07-12 12:40:00";}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>ERMAHGERD, the Gem</title>
  <link>http://invisibleblocks.com/2012/07/29/ermahgerd-the-gem-3/</link>
  <pubDate>Mon, 30 Jul 2012 00:39:58 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.com/?p=597</guid>
  <description/>
  <content:encoded><![CDATA[I just published my first "official" gem, <a href="https://rubygems.org/gems/ermahgerd">ermahgerd</a>, and what an auspicious way start my gem-author career! ERMAHGERD, I'M A RERL RERBER PRERGRERMAHR!

It's (currently) totally based on J Miller Design's translator, but there are some bits I'd like to tweak. We'll see, it's just for fun.

Get started with ERMAHGERD:

<pre>
$ gem install ermahgerd
$ irb
ruby-1.9.3-p0 :001 &gt; require 'ermahgerd'
 =&gt; true 
ruby-1.9.3-p0 :002 &gt; Ermahgerd.translate("Goosebumps, my favorite books!")
 =&gt; "GERSBERMS, MAH FRAVRIT BERKS!" 
</pre>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>597</wp:post_id>
  <wp:post_date>2012-07-29 20:39:58</wp:post_date>
  <wp:post_date_gmt>2012-07-30 00:39:58</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>ermahgerd-the-gem-3</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="ermahgerd"><![CDATA[ermahgerd]]></category>
  <category domain="category" nicename="programming"><![CDATA[Programming]]></category>
  <category domain="post_tag" nicename="ruby"><![CDATA[Ruby]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[292320]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>tagazine-media</wp:meta_key>
    <wp:meta_value><![CDATA[a:7:{s:7:"primary";s:0:"";s:6:"images";a:0:{}s:6:"videos";a:0:{}s:11:"image_count";i:0;s:6:"author";s:6:"292320";s:7:"blog_id";s:6:"290283";s:9:"mod_stamp";s:19:"2012-07-30 00:39:58";}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Ruby Scrubbing JavaScript: Raise Those Curly Braces</title>
  <link>http://invisibleblocks.com/2013/06/06/ruby-scrubbing-javascript-raise-those-curly-braces/</link>
  <pubDate>Thu, 06 Jun 2013 13:54:32 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.com/?p=612</guid>
  <description/>
  <content:encoded><![CDATA[Of the Programmer Holy Wars, "curly braces on the same line, or the next line?" is not as vitriolic as emacs/vim or tabs/spaces, but it's up there.

(Personally, I don't care. I've done years with each style. You get used to it.)

In JavaScript, it's less of an issue, because, when you put curly braces on the next line, JavaScript will (sometimes) automatically insert semicolons into your code. It's well-documented and discussed, and understandable; here's <a href="http://stackoverflow.com/questions/3641519/why-results-varies-upon-placement-of-curly-braces-in-javascript-code">a question about it on stackoverflow</a>.

Yesterday I reviewed some old JavaScript (circa 2007) that <a href="http://www.lyften.com/">our web designer Daniel</a> rehabilitated, and this concern came up. Rather than hunt around manually for dangling curly braces, I wrote some ruby to find and fix them.

[sourcecode lang="ruby"]
# fix-js-curies.rb
ARGV.each do |filename|
  src = File.read(filename)

  # This multi-line regex looks for any { that
  # comes after a \n, and any tabs or spaces,
  # and replaces it with a space and a {.
  new_src = src.gsub(/\n[ \t]*\{/m, ' {')

  if src == new_src
    puts filename
  else
    puts &quot;#{filename} fixed!&quot;
    File.open(filename, 'w') do |f|
      f.puts new_src
    end
  end
end
[/sourcecode]

You can pass it any .js files as command-line arguments:

[sourcecode lang="bash"]
$ ruby fix-js-curlies.rb app/assets/*.js
[/sourcecode]

Props to Daniel: when I ran my script, it didn't actually find any, because he got them all ahead of me.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>612</wp:post_id>
  <wp:post_date>2013-06-06 09:54:32</wp:post_date>
  <wp:post_date_gmt>2013-06-06 13:54:32</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>ruby-scrubbing-javascript-raise-those-curly-braces</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="productivity"><![CDATA[Productivity]]></category>
  <category domain="category" nicename="programming"><![CDATA[Programming]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[292320]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>tagazine-media</wp:meta_key>
    <wp:meta_value><![CDATA[a:7:{s:7:"primary";s:0:"";s:6:"images";a:0:{}s:6:"videos";a:0:{}s:11:"image_count";i:0;s:6:"author";s:6:"292320";s:7:"blog_id";s:6:"290283";s:9:"mod_stamp";s:19:"2013-06-06 13:54:32";}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Book Review: The Information, by James Gleick</title>
  <link>http://invisibleblocks.com/2013/12/31/book-review-the-information-by-james-gleick/</link>
  <pubDate>Tue, 31 Dec 2013 14:36:53 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.com/?p=624</guid>
  <description/>
  <content:encoded><![CDATA[Or: "The Information: A History, a Theory, a Flood. A Review."

<a href="http://invisibleblocks.files.wordpress.com/2012/10/the-information-cover.png"><img class="size-full wp-image-636" title="the-information-cover" src="http://invisibleblocks.files.wordpress.com/2012/10/the-information-cover.png" alt="" width="423" height="176" /></a>

Oh, I was nervous about this one.

It looked so good! Such an inviting cover, such a broad and eternally relevant topic. The Information. Rational, dispassionate. Ordered. And, "A Flood:" I half-hoped it might talk about information overload. (It does, a bit.)

But so many pages. Could I justify another pop-sci book on my <em>To Read</em> stack? Could I justify the time? Would it be fluff? or a difficult slog? If I'm reading for fun, I don't want it to be harder work than what I already do for, you know, <em>work.</em>

Wasted worry.

<a href="http://www.amazon.com/The-Information-History-Theory-Flood/dp/0375423729"><em>The Information</em></a> is a layman's introduction to Claude Shannon's information theory. It covers a lot of ground, and while it can be a bit slow in parts, it's enjoyable. As a programmer, I was aware of information theory, a little, but not very clear what it was all about, or for. I was pretty sure it was lurking around behind compression, and probably positional numbering systems, especially the way they can look like dimensionality if you squint the right way, like with chmod permission bits. <em>The Information</em> filled in a lot of gaps for me, and showed me bridges into other fields I hadn't expected.

Some teasers:

Gleick describes African talking drums as a way to illustrate information redundancy: two drums, high- and low-toned, mimic the <a href="http://en.wikipedia.org/wiki/Tone_(linguistics)#Tonal_languages">tonal spoken language</a>; drummers use long, flowery phrases to clarify ambiguity. He talks about how written language abstracts thought, and the invention of the dictionary.

He explains how information is like uncertainty or surprise. In a string of symbols (letters, music notes, numbers, bits), given a string of them, how easily can you guess the next one? If a torn piece of paper says "Kermit the Fr," you can infer what was torn off. If I say "I got a BigMac and fries," you can guess where I went for lunch; my adding "...at McDonald's" doesn't help you much - it doesn't add much new information. (To explore this point, Claude Shannon had his wife repeatedly guess the next word in sentences from a detective novel.)

Gleick talks about information theory's relationship to entropy. A closed system has fixed energy, but the energy dissipates: it spreads evenly throughout the system, and we can't use it to do work. If we could re-order the energy, collect it, <em>sort it</em>, we could reverse entropy. Information is <em>work</em>.

Information is also related to computability. Sometimes, the best way to store a message is to store an algorithm for computing it.

This, in particular, is something I'd noticed. Which of these is a better way to send a smiley face? This one?

<a href="http://invisibleblocks.files.wordpress.com/2012/09/smiley.png"><img class="size-full wp-image-625" title="smiley" src="http://invisibleblocks.files.wordpress.com/2012/09/smiley.png" alt="" width="250" height="250" />
</a>

Or this one?
<pre>size(250, 250);
background(255);
noFill();
smooth();
stroke(0);
strokeWeight(5);
ellipseMode(CENTER);
ellipse(125, 125, 200, 200);
ellipse(100, 90, 10, 10);
ellipse(165, 90, 10, 10);
arc(125, 125, 100, 120, 0.2, PI - 0.2);</pre>
The first is 2D grid of pixels. The second is <a href="http://www.openprocessing.org/sketch/72070">the code to render it</a>: an explanation of the steps to reproduce the image.

Which is better? Which is better for making an <em>exact </em>copy of that image? A checkerboard, 250 squares on a side, 250<sup>2</sup> = 62500 squares in total, and a listing of which ones should be white (about 93% of them), which should be black? Or 11 lines of text - just 222 characters? Say you had to write the message down on paper and mail it: would you rather write a list of 62500 numbers, or 11 lines of code? What would the message's recipient have to know to reproduce the image, exactly? Pixel-for-pixel?

<em>The Information</em> also eventually gets into DNA, genetics, and memetics. (I never knew Richard Dawkins coined the word <em>meme</em>!)

<a href="http://invisibleblocks.files.wordpress.com/2012/09/dawkins.jpeg"><img class="alignnone size-medium wp-image-631" title="Hey Dawkins! Thanks for all the memes!" src="http://invisibleblocks.files.wordpress.com/2012/09/dawkins.jpeg?w=300" alt="" width="300" height="300" /></a>

So. Despite being slow in parts, the book is much better, much more enjoyable, than this review. It'll be an enjoyable bunch of hours, and give you new ways to think about things.

(Postscript: I read this book in mid-2012, and wrote this review in October 2012, but somehow forgot to publish it. Maybe it was information overload?)]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>624</wp:post_id>
  <wp:post_date>2013-12-31 10:36:53</wp:post_date>
  <wp:post_date_gmt>2013-12-31 14:36:53</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>book-review-the-information-by-james-gleick</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="book-review"><![CDATA[Book Review]]></category>
  <category domain="post_tag" nicename="claude-shannon"><![CDATA[Claude Shannon]]></category>
  <category domain="post_tag" nicename="complexity"><![CDATA[complexity]]></category>
  <category domain="post_tag" nicename="information-theory"><![CDATA[information theory]]></category>
  <category domain="category" nicename="recommended-reading"><![CDATA[Recommended Reading]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[292320]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Symmetrical Portraits, Undone</title>
  <link>http://invisibleblocks.com/2012/10/01/symmetrical-portraits-undone/</link>
  <pubDate>Tue, 02 Oct 2012 02:03:55 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.com/?p=641</guid>
  <description/>
  <content:encoded><![CDATA[Julian Wolkenstein's <a href="http://www.julianwolkenstein.com/index.php/project/symmetrical-portraits/">Symmetrical Portraits</a> project just made the rounds. I could've sworn I saw it on <a href="http://www.brainpickings.org/">Brain Pickings</a>, but I can't find it now. Whatever, no matter.

It's a weird-looking project: take a bunch of head-shots, cut them down the middle, and mirror each half, so one asymmetrical face becomes two symmetrical faces. It's startling how much some of the pairs differ from each other. There's a hypothesis that symmetry makes the people more attractive, but some of them are pretty <a href="http://en.wikipedia.org/wiki/Uncanny_valley">uncanny</a>:

<a href="http://www.julianwolkenstein.com/index.php/project/symmetrical-portraits/"><img class="size-full wp-image-642" title="symmetrical-faces" src="http://invisibleblocks.files.wordpress.com/2012/10/symmetrical-faces.png" alt="" width="413" height="368" /></a>

So what's a Processing goof-off going to do? Tear them apart, and put them back together. I don't know whether the asymmetrical version is right, or whether it's backwards, but I don't think it really matters, unless you know the person in the photo. Click 'em for big versions.

<a href="http://invisibleblocks.files.wordpress.com/2012/10/fixed_01_v2.jpg"><img class="alignnone size-thumbnail wp-image-645" title="fixed_01_v2" src="http://invisibleblocks.files.wordpress.com/2012/10/fixed_01_v2.jpg?w=300" alt="" width="300" height="154" /></a>
<a href="http://invisibleblocks.files.wordpress.com/2012/10/fixed_02.jpg"><img class="alignnone size-thumbnail wp-image-645" title="fixed_02" src="http://invisibleblocks.files.wordpress.com/2012/10/fixed_02.jpg?w=300" alt="" width="300" height="154" /></a>
<a href="http://invisibleblocks.files.wordpress.com/2012/10/fixed_03.jpg"><img class="alignnone size-thumbnail wp-image-645" title="fixed_03" src="http://invisibleblocks.files.wordpress.com/2012/10/fixed_03.jpg?w=300" alt="" width="300" height="154" /></a>
<a href="http://invisibleblocks.files.wordpress.com/2012/10/fixed_04.jpg"><img class="alignnone size-thumbnail wp-image-645" title="fixed_04" src="http://invisibleblocks.files.wordpress.com/2012/10/fixed_04.jpg?w=300" alt="" width="300" height="154" /></a>
<a href="http://invisibleblocks.files.wordpress.com/2012/10/fixed_05.jpg"><img class="alignnone size-thumbnail wp-image-645" title="fixed_05" src="http://invisibleblocks.files.wordpress.com/2012/10/fixed_05.jpg?w=300" alt="" width="300" height="154" /></a>
<a href="http://invisibleblocks.files.wordpress.com/2012/10/fixed_06.jpg"><img class="alignnone size-thumbnail wp-image-645" title="fixed_06" src="http://invisibleblocks.files.wordpress.com/2012/10/fixed_06.jpg?w=300" alt="" width="300" height="154" /></a>
<a href="http://invisibleblocks.files.wordpress.com/2012/10/fixed_07.jpg"><img class="alignnone size-thumbnail wp-image-645" title="fixed_07" src="http://invisibleblocks.files.wordpress.com/2012/10/fixed_07.jpg?w=300" alt="" width="300" height="154" /></a>
<a href="http://invisibleblocks.files.wordpress.com/2012/10/fixed_08.jpg"><img class="alignnone size-thumbnail wp-image-645" title="fixed_08" src="http://invisibleblocks.files.wordpress.com/2012/10/fixed_08.jpg?w=300" alt="" width="300" height="154" /></a>
<a href="http://invisibleblocks.files.wordpress.com/2012/10/fixed_09.jpg"><img class="alignnone size-thumbnail wp-image-645" title="fixed_09" src="http://invisibleblocks.files.wordpress.com/2012/10/fixed_09.jpg?w=300" alt="" width="300" height="154" /></a>
<a href="http://invisibleblocks.files.wordpress.com/2012/10/fixed_10.jpg"><img class="alignnone size-thumbnail wp-image-645" title="fixed_10" src="http://invisibleblocks.files.wordpress.com/2012/10/fixed_10.jpg?w=300" alt="" width="300" height="154" /></a>
<a href="http://invisibleblocks.files.wordpress.com/2012/10/fixed_11.jpg"><img class="alignnone size-thumbnail wp-image-645" title="fixed_11" src="http://invisibleblocks.files.wordpress.com/2012/10/fixed_11.jpg?w=300" alt="" width="300" height="154" /></a>
<a href="http://invisibleblocks.files.wordpress.com/2012/10/fixed_12.jpg"><img class="alignnone size-thumbnail wp-image-645" title="fixed_12" src="http://invisibleblocks.files.wordpress.com/2012/10/fixed_12.jpg?w=300" alt="" width="300" height="154" /></a>

Here's the code I used to de-symmetry them. Note the mouse controls: I had to tweak some of them, especially that second one of the blond short-haired guy.

[sourcecode lang="java"]
// 36_Wolkenstein_12.jpg
String[] files = new String[] {
  &quot;01_v2&quot;, &quot;02&quot;, &quot;03&quot;, &quot;04&quot;, &quot;05&quot;, &quot;06&quot;, &quot;07&quot;, &quot;08&quot;, &quot;09&quot;, &quot;10&quot;, &quot;11&quot;, &quot;12&quot;
};
PImage[] origImgs;

int imgIndex = 0;

void setup() {
  PImage img = load(files[0]);
  size(ceil(img.width * 1.5), img.height);

  origImgs = new PImage[files.length];

  for (int i = 0; i &lt; files.length; i++) {
    origImgs[i] = load(files[i]);
  }
}

void draw() {
  PImage orig = origImgs[imgIndex];
  image(orig, 0, 0);

  int placeLine = round(orig.width * 1.25);
  int cropLine = round(orig.width * 0.75);

  int placeOffset = round(map(mouseX, 0, width, -20, 20));
  int cropOffset = round(map(mouseY, 0, height, -20, 20));

  image(
    orig.get(0, 0, round(orig.width * 0.5), orig.height),
    orig.width, 0);

  image(
    orig.get(
      cropLine + cropOffset,
      0, round(orig.width * 0.25), orig.height
    ),
    placeLine + placeOffset, 0);
}

void keyPressed() {
  if (key == ENTER) {
    save(&quot;fixed_&quot; + files[imgIndex] + &quot;.jpg&quot;);
  }
  imgIndex = (imgIndex + 1) % files.length;
}

PImage load(String chunk) {
  return loadImage(&quot;36_Wolkenstein_&quot; + chunk + &quot;.jpg&quot;);
}
[/sourcecode]]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>641</wp:post_id>
  <wp:post_date>2012-10-01 22:03:55</wp:post_date>
  <wp:post_date_gmt>2012-10-02 02:03:55</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>symmetrical-portraits-undone</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="perception"><![CDATA[perception]]></category>
  <category domain="category" nicename="processing"><![CDATA[Processing]]></category>
  <category domain="post_tag" nicename="symmetry"><![CDATA[symmetry]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[292320]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Cantor's Snowflake</title>
  <link>http://invisibleblocks.com/2012/12/26/cantors-snowflake/</link>
  <pubDate>Wed, 26 Dec 2012 04:00:45 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.com/?p=665</guid>
  <description/>
  <content:encoded><![CDATA[<a href="http://en.wikipedia.org/wiki/Koch_snowflake" target="_blank">The Koch snowflake</a> is a famous fractal.

<img class="alignnone" alt="The Koch Snowflake fractal" src="https://upload.wikimedia.org/wikipedia/commons/thumb/5/52/Koch_Snowflake_5th_iteration.svg/512px-Koch_Snowflake_5th_iteration.svg.png" width="307" height="307" />

So is <a href="http://en.wikipedia.org/wiki/Cantor_set" target="_blank">the Cantor set</a>.

<img class="alignnone" alt="The Cantor set" src="http://upload.wikimedia.org/wikipedia/commons/thumb/5/56/Cantor_set_in_seven_iterations.svg/500px-Cantor_set_in_seven_iterations.svg.png" width="500" height="81" />

Less famous, maybe, is <a href="http://mathworld.wolfram.com/CantorDust.html" target="_blank">Cantor dust</a>, a version of the Cantor set made with squares instead of lines, which apparently earned it a much cooler name.

<img alt="" src="http://mathworld.wolfram.com/images/eps-gif/CantorDustFractal_700.gif" width="407" height="74" />

But as far as I know, we have no Cantor snowflake.

Since it's Christmas, and since, in the odd quiet moments between holiday noise, Daniel Shiffman's <a href="http://natureofcode.com/" target="_blank">Nature of Code</a> has been keeping me company, I wondered if we could make a Cantor snowflake.

Here's what I came up with.

<img class="alignnone size-full wp-image-666" alt="cantor-snowflake" src="http://invisibleblocks.files.wordpress.com/2012/12/cantor-snowflake.png" width="500" height="140" />

As a bonus, it contains the Koch snowflake inside of it! I didn't expect that.

I also rendered a <a href="http://invisibleblocks.files.wordpress.com/2012/12/cantor-snowflake.pdf" target="_blank">Cantor snowflake PDF</a>, which has a couple extra generations. It could make a nice bookmark.

Here's the sourcecode, which is also running on <a href="http://www.openprocessing.org/sketch/84185" target="_blank">openprocessing</a>:

[sourcecode language="java"]
void setup() {
  size(1450, 300);

  background(255);
  noStroke();
  fill(0);

  cantorSnowflake(0, height/2, 140, 280);
}

void cantorSnowflake(float x, float y, float length, float sideStep) {
  if (length &lt; 0.1) return;

  pushMatrix();

  hexagon(x, y, length);

  translate(sideStep, 0);

  for (int i = 0; i &lt; 6; i++) {
    PVector point = vector(i * THIRD_PI, length * 2 / 3);
    cantorSnowflake(point.x, point.y, length / 3, sideStep);
  }

  popMatrix();
}

void hexagon(float centerX, float centerY, float length) {
  translate(centerX, centerY);

  beginShape();
  for (int i = 0; i &lt; 6; i++) {
    hexPoint(vector(i * THIRD_PI, length));
  }
  endShape(CLOSE);
}

void hexPoint(PVector v) {
  vertex(v.x, v.y);
}

PVector vector(float rads, float length) {
  return new PVector(cos(rads) * length, sin(rads) * length);
}
[/sourcecode]

Happy Christmas!]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>665</wp:post_id>
  <wp:post_date>2012-12-26 00:00:45</wp:post_date>
  <wp:post_date_gmt>2012-12-26 04:00:45</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>cantors-snowflake</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="fractal"><![CDATA[fractal]]></category>
  <category domain="post_tag" nicename="nature-of-code"><![CDATA[Nature of Code]]></category>
  <category domain="category" nicename="processing"><![CDATA[Processing]]></category>
  <category domain="category" nicename="programming"><![CDATA[Programming]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[292320]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>tagazine-media</wp:meta_key>
    <wp:meta_value><![CDATA[a:7:{s:7:"primary";s:71:"http://invisibleblocks.files.wordpress.com/2012/12/cantor-snowflake.png";s:6:"images";a:1:{s:71:"http://invisibleblocks.files.wordpress.com/2012/12/cantor-snowflake.png";a:6:{s:8:"file_url";s:71:"http://invisibleblocks.files.wordpress.com/2012/12/cantor-snowflake.png";s:5:"width";i:964;s:6:"height";i:271;s:4:"type";s:5:"image";s:4:"area";i:261244;s:9:"file_path";b:0;}}s:6:"videos";a:0:{}s:11:"image_count";i:3;s:6:"author";s:6:"292320";s:7:"blog_id";s:6:"290283";s:9:"mod_stamp";s:19:"2012-12-26 04:00:45";}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Direct Manipulation, and Text Editors</title>
  <link>http://invisibleblocks.com/2013/05/09/direct-manipulation-and-text-editors/</link>
  <pubDate>Thu, 09 May 2013 13:51:21 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.com/?p=675</guid>
  <description/>
  <content:encoded><![CDATA[<p>Hat-tip to <a href="http://gilesbowkett.blogspot.com">Giles Bowkett</a> for mentioning Bret Victor's talk, <a href="http://gilesbowkett.blogspot.com/2013/05/stop-drawing-dead-fish.html">Stop Drawing Dead Fish</a>, about direct manipulation and computer interaction as a tool for illustrators and animators.</p><p>I paused this video part-way through, so I could Get Down to Work. I paused it around 34:30, right after Bret Victor mentioned <a href="http://en.wikipedia.org/wiki/David_Hestenes">David Hestenes</a>' idea that algebra and geometry help us model the world in similar ways, but that algebra uses our linguistic ability, while geometry uses our visual/spatial perception. Victor went on to say that tools for visual artists should use our visual/spatial abilities (direct manipulation), rather than our linguistic ones (code).</p><p>Like I said, it was time to Get Down to Work. I flipped over to Sublime Text 2, where I happened to have a block of text selected. Warming up, I idly hit command-I to search for a bit of text, only to realize that Sublime was <em>only searching in that selected text.</em> This is handy! I've been wanting something like this lately, when a method or variable name shows up all over the file, but I'm only working on one method.</p><p>Using the trackpad to select a bunch of text, and then working on it, feels a lot like I'm holding the text in one hand, and working on it with Sublime in the other. I discovered this accidentally, too - I've felt pretty productive with Sublime after the (tiny) initial bump, and I occasionally, gradually, get better as I learn new tricks.</p><p>I switched to Sublime after trying to learn Vim for a month or so. I'd been an emacs user for a few years, but I was under-using it, and didn't need all the extra machinery. Vim seemed lighter, so I tried it out. But it felt like learning emacs all over again, but with different incantations: everything forced into the keyboard. And I get that! I'm a home-row <a href="{% post_url 2006-12-31-dvorak-the-betamax-keyboard %}">Dvorak typist</a>! But I still felt like emacs and vim were a step back from humbler tools like <a href="http://www.pnotepad.org">Programmer's Notepad</a>.</p><p>Bret Victor's talk suggests an interesting explanation for that. He points out that some animations are a pain to create manually, and some behaviors are hard to code into the tool: so you divide and allocate tasks to the computer and the artist according to their abilities, and their cooperation produces the best effect.</p><p>Maybe this explains the appeal of these less-hardcore text editors. Sure, using the mouse and buttons for everything, a la Microsoft Word, is tedious, but so is forcing all interaction through the keyboard. Maybe a better allocation of tasks, a better balance of responsibilities between typist and tool, is what's needed.</p>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>675</wp:post_id>
  <wp:post_date>2013-05-09 09:51:21</wp:post_date>
  <wp:post_date_gmt>2013-05-09 13:51:21</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>direct-manipulation-and-text-editors</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="dvorak"><![CDATA[Dvorak]]></category>
  <category domain="category" nicename="productivity"><![CDATA[Productivity]]></category>
  <category domain="category" nicename="software-thinking"><![CDATA[Software Thinking]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[292320]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>10679</wp:comment_id>
    <wp:comment_author><![CDATA[jpmccusker]]></wp:comment_author>
    <wp:comment_author_email>mccusker@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://subluminal.wordpress.com/</wp:comment_author_url>
    <wp:comment_author_IP>71.234.117.248</wp:comment_author_IP>
    <wp:comment_date>2013-05-11 10:14:39</wp:comment_date>
    <wp:comment_date_gmt>2013-05-11 14:14:39</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I use the AquaMacs Emacs variant, which neatly combines mac UI conventions and shortcuts (using the command key) and conventional emacs ones (using option for meta and control for control). I mix and match the UI conventions as they occur to me, having more than one means I have larger targets to hit, in a sense.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>318630</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";d:1368281679.992991924285888671875;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:10:"jpmccusker";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1368281679</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2013-05-11 14:14:39</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>PSA: Connecticut Tech is Getting Exciting</title>
  <link>http://invisibleblocks.com/2013/05/23/psa-connecticut-tech-is-getting-exciting/</link>
  <pubDate>Thu, 23 May 2013 10:48:37 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.com/?p=731</guid>
  <description/>
  <content:encoded><![CDATA[<p><a href="http://www.meetup.com/newhavenrb/">New Haven Ruby</a> is going strong, and New Haven JavaScript is heating up fast. We had a great turnout last night, with about 40 people at the <a href="http://www.digitalsurgeons.com/">Digital Surgeons</a> office, and some great talks. Meet-ups are full of energy, introductions, and catching up with friends. And, obviously, tech talk.</p><p>A <a href="http://www.newhaven.io/">broader New Haven tech community</a> is emerging, combining NH.rb and NH.js with <a href="http://grovenewhaven.com/">The Grove</a>,  <a href="http://www.indie-soft.com/">Independent Software</a>, and now the <a href="http://www.meetup.com/a100-dev-community/">A100 Developer Community</a>.</p><p>The <a href="https://ctacm.wordpress.com">Greater Hartford ACM chapter</a> is spinning up, and doing very well so far, hosting talks and tours of Connecticut technology centers. <a href="http://hartfordjs.com">Hartford JavaScript</a> is starting and <a href="https://groups.google.com/forum/?fromgroups#!forum/hartford-ruby-brigade">Hartford Ruby</a> is making a come-back (which <a href="http://invisibleblocks.com/category/hartford-ruby-brigade/">I'm especially happy to see</a>).</p><p>Connecticut hackers are doing some great things. Come out and join us!</p>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>731</wp:post_id>
  <wp:post_date>2013-05-23 06:48:37</wp:post_date>
  <wp:post_date_gmt>2013-05-23 10:48:37</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>psa-connecticut-tech-is-getting-exciting</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>I'm Speaking at RubyNation 2013!</title>
  <link>http://invisibleblocks.com/2013/06/09/im-speaking-at-rubynation-2013/</link>
  <pubDate>Mon, 10 Jun 2013 02:45:46 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.com/?p=771</guid>
  <description/>
  <content:encoded><![CDATA[<p>This weekend, I'll be giving a talk at RubyNation 2013, titled "Object-Functional Fusion in Ruby."</p><p>While Ruby is a great object-oriented language, its functional aspects are a bit less-appreciated. But it's no Haskell: if you try to go full-on-functional, you'll run into headache and heartache. I want to talk about some ways to fuse the two approaches.</p><p>Come say hello!</p>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>771</wp:post_id>
  <wp:post_date>2013-06-09 22:45:46</wp:post_date>
  <wp:post_date_gmt>2013-06-10 02:45:46</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>im-speaking-at-rubynation-2013</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="conferences"><![CDATA[conferences]]></category>
  <category domain="post_tag" nicename="ruby"><![CDATA[Ruby]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>RubyNation 2013 In Review</title>
  <link>http://invisibleblocks.com/2013/06/19/rubynation-2013-in-review/</link>
  <pubDate>Wed, 19 Jun 2013 14:22:53 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.com/?p=779</guid>
  <description/>
  <content:encoded><![CDATA[<p><a href="http://www.rubynation.org/">RubyNation 2013</a> is done! Outside of un-confs like BarCamp, it was the first conf I've presented at. I was nervous, so I kept practicing and smoothing <a href="https://speakerdeck.com/danbernier/object-functional-fusion-in-ruby">the slides</a>, and I think that helped a lot - everyone seemed to like the talk. Thanks again to everyone who came to hear it!</p><p>RubyNation was a smaller conference. Someone said they felt as though you could almost talk to every attendee, or at least recognize them all by face. It felt comfortable and familiar. But I think there was more to that than just being small - I think the organizers made some particular choices that made it that way.</p><p>First, rather than rows of chairs, they provided banquet-style round tables with about 10 chairs each. This is really good for getting people talking: you have a handful of neighbors, and you're all facing each other. It's much more social than 2 neighbors and the back of someone's head. It does mean that half the table has to turn around to watch the talks, but in practice, it wasn't a problem. Whatever extra floor space the round tables took up was worth it.</p><p>Second, rather than catering lunch, each conf organizer paired with a speaker to lead the way to a different nearby restaurant. Attendees got to pick which group they would go with. Splitting into so many groups meant there was a good chance you'd eat your lunch chatting with a speaker or organizer. It also meant you had much more choice over what to eat. (Remember RailsConf 2012, when they served pot pies every single day?)</p><p><a href="http://railsgirls.com/dc">Rails Girls DC</a> was there in force. I'm not sure, but I think this was the first time RubyNation was paired with a Rails Girls DC training day. It was great to see so many people new to the community, discovering ruby and programming, and I think the variety of talks must have complemented the more-focused training day very well.</p><p>For a first-time speaker, it was a very welcoming, laid-back group - though, as Sandi Metz helpfully warned me ahead of time, they might not laugh too loudly at your jokes. If you've never given a talk at a conference, try starting with RubyNation.</p>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>779</wp:post_id>
  <wp:post_date>2013-06-19 10:22:53</wp:post_date>
  <wp:post_date_gmt>2013-06-19 14:22:53</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>rubynation-2013-in-review</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="conferences"><![CDATA[conferences]]></category>
  <category domain="post_tag" nicename="ruby"><![CDATA[Ruby]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>10743</wp:comment_id>
    <wp:comment_author><![CDATA[Avdi Grimm (@avdi)]]></wp:comment_author>
    <wp:comment_author_email>avdi@twitter.example.com</wp:comment_author_email>
    <wp:comment_author_url>http://twitter.com/avdi</wp:comment_author_url>
    <wp:comment_author_IP>174.54.224.242</wp:comment_author_IP>
    <wp:comment_date>2013-06-25 14:50:18</wp:comment_date>
    <wp:comment_date_gmt>2013-06-25 18:50:18</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[You gave a fantastic talk!]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1372186218</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";d:1372186218.7638099193572998046875;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_post_as</wp:meta_key>
      <wp:meta_value>twitter</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_avatar</wp:meta_key>
      <wp:meta_value>http://a0.twimg.com/profile_images/1220139277/avdi-headshot-rep3-2010-square-tight_normal.jpg</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_foreign_user_id</wp:meta_key>
      <wp:meta_value>52593</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2013-06-25 18:50:18</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>10744</wp:comment_id>
    <wp:comment_author><![CDATA[Daniel Bernier]]></wp:comment_author>
    <wp:comment_author_email>danbernier@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://invisibleblocks.wordpress.com/</wp:comment_author_url>
    <wp:comment_author_IP>172.5.226.193</wp:comment_author_IP>
    <wp:comment_date>2013-06-25 22:12:44</wp:comment_date>
    <wp:comment_date_gmt>2013-06-26 02:12:44</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Thanks Avdi! Glad you liked it.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>292320</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1372212765</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";d:1372212765.309504985809326171875;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:11:"bonsaigiant";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2013-06-26 02:12:44</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Circle Pictures</title>
  <link>http://invisibleblocks.com/2013/12/17/circle-pictures/</link>
  <pubDate>Tue, 17 Dec 2013 18:50:38 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.com/?p=784</guid>
  <description/>
  <content:encoded><![CDATA[<img class="size-full" alt="Circle Pictures" src="http://invisibleblocks.files.wordpress.com/2013/12/4-dark.png" />

Take an image.

Pick a random pixel. Over a plain background of the same size as the image, draw a circle over that spot: bigger if it's lighter, smaller if it's darker. (Or reverse it: big for dark, small for light.) Repeat, but don't overlap the circles. After a while, you'll run out of empty places for new circles, so stop.

&lt;div class='gallery'&gt;
  <img src="{{ site.baseurl }}/assets/2013/12/1-dark.png">
  <img src="{{ site.baseurl }}/assets/2013/12/1-light.png">
  <img src="{{ site.baseurl }}/assets/2013/12/2-dark.png">
  <img src="{{ site.baseurl }}/assets/2013/12/2-light.png">
  <img src="{{ site.baseurl }}/assets/2013/12/3-dark.png">
  <img src="{{ site.baseurl }}/assets/2013/12/3-light.png">
  <img src="{{ site.baseurl }}/assets/2013/12/4-dark.png">
  <img src="{{ site.baseurl }}/assets/2013/12/4-light.png">
&lt;/div&gt;

I screwed up the math for checking circle overlaps. At first, I was thinking: pack the circles as tight as you can, so only call it an overlap when the distance between the circle centers is less than the sum of their radii.

<a href="http://invisibleblocks.files.wordpress.com/2013/12/overlap.png"><img class="size-full wp-image-788 alignright" alt="overlapping circles" src="http://invisibleblocks.files.wordpress.com/2013/12/overlap.png" width="330" height="260" /></a>

But then, from another part of my brain, I drew the circles at half-size, forgetting that Processing's <code>ellipse</code> method takes width and height parameters, not a radius. So the circles were packed less densely, and I wasn't clever enough to see why. I hacked it, and decided to count it as an overlap when the distance is bigger than the radius of the bigger circle. (Shrug. Hack.) It worked. And it looked cool.

Eventually I figured out my bug, and fixed it, but then the circles were too dense, so I went back to the happy accident.

I also tried color images. I think there's potential here, but I like these less.

&lt;div class='gallery'&gt;
  <img src="{{ site.baseurl }}/assets/2013/12/5-dark.png">
  <img src="{{ site.baseurl }}/assets/2013/12/5-light.png">
  <img src="{{ site.baseurl }}/assets/2013/12/6-dark.png">
  <img src="{{ site.baseurl }}/assets/2013/12/6-light.png">
  <img src="{{ site.baseurl }}/assets/2013/12/7-dark.png">
  <img src="{{ site.baseurl }}/assets/2013/12/7-light.png">
&lt;/div&gt;

The source images are images of Paul Erdős, Jorge Luis Borges (twice), Henri de Toulouse-Lautrec, two sunflowers, and a cow.

&lt;div class='gallery'&gt;
  <img src="{{ site.baseurl }}/assets/2013/12/erdos.jpg">
  <img src="{{ site.baseurl }}/assets/2013/12/borges1.jpg">
  <img src="{{ site.baseurl }}/assets/2013/12/borges2.jpg">
  <img src="{{ site.baseurl }}/assets/2013/12/lautrec.jpg">
  <img src="{{ site.baseurl }}/assets/2013/12/sunflower.jpg">
  <img src="{{ site.baseurl }}/assets/2013/12/sunflower2.jpg">
  <img src="{{ site.baseurl }}/assets/2013/12/cow.png">
&lt;/div&gt;

Here's the source. (I tried putting it on openprocessing.org, which I normally really like, but I had troubles with the images in JavaScript mode, and they no longer support Java mode.)

[sourcecode language="java"]
PImage image;
boolean dark = true;

ArrayList circles;

// Trailing average. When the average number of tries 
// to place a circle is too high,
// stop trying.
Averager averager;

String paul = &quot;erdos.jpg&quot;;
String jorge1 = &quot;borges1.jpg&quot;;
String jorge2 = &quot;borges2.jpg&quot;;
String henri = &quot;lautrec.jpg&quot;;
String sunflower = &quot;sunflower.jpg&quot;;
String sunflower2 = &quot;sunflower2.jpg&quot;;
String cow = &quot;cow.png&quot;;

void setup() {
  image = loadImage(paul);
  image.resize(600, 0);
  size(image.width, image.height);

  ellipseMode(CENTER);
  noStroke();
  smooth();

  reset();
}

void reset() {
  circles = new ArrayList();
  averager = new Averager(20);
  background(dark ? 0 : 255);
}

void draw() {
  for (int i = 0; i &lt; 10; i++) {
    drawRandomCircle();
    if (averager.average() &gt; 100) {
      //save(&quot;7.dark.png&quot;);
      reset();
      break;
    }
  }
}

void drawRandomCircle() {
  //println(averager.average());
  Circle circ;
  int tries = 0;
  do {
    int x = floor(random(width));
    int y = floor(random(height));

    color c = image.get(x, y);
    float val = brightness(c);

    tries++;
    float circleSize = dark ? 
         map(val, 255, 0, 1, 60) : 
         map(val, 0, 255, 1, 60);
    circ = new Circle(x, y, c, circleSize);
  }
  while (overlaps (circ));

  averager.record(tries);

  circles.add(circ);
  circ.draw();
}

boolean overlaps(Circle c) {
  for (Circle other : circles) {
    if (c.overlaps(other)) {
      return true;
    }
  }
  return false;
}

class Circle {
  int x;
  int y;
  color c;
  float diameter;

  Circle(int x, int y, color c, float diameter) {
    this.x = x;
    this.y = y;
    this.c = c;
    this.diameter = diameter;
  }

  boolean overlaps(Circle other) {
    return dist(x, y, other.x, other.y) &lt; max(diameter, other.diameter);
  }

  void draw() {
    fill(c);
    ellipse(x, y, diameter, diameter);
  }
}

class Averager {
  float[] values;
  int index = 0;
  Averager(int length) {
    values = new float[length];
  }

  void record(float value) {
    values[index] = value;
    index = (index + 1) % values.length;
  }

  float average() {
    float sum = 0;
    for (float val : values) {
      sum += val;
    }
    return sum / values.length;
  }
}
[/sourcecode]]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>784</wp:post_id>
  <wp:post_date>2013-12-17 14:50:38</wp:post_date>
  <wp:post_date_gmt>2013-12-17 18:50:38</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>circle-pictures</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="generative-art"><![CDATA[generative art]]></category>
  <category domain="post_tag" nicename="image-processing"><![CDATA[image processing]]></category>
  <category domain="category" nicename="processing"><![CDATA[Processing]]></category>
  <category domain="post_tag" nicename="processing-2"><![CDATA[processing]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[292320]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>SuperCollider: 3 introductory posts</title>
  <link>http://invisibleblocks.com/2014/02/28/supercollider-3-introductory-posts/</link>
  <pubDate>Fri, 28 Feb 2014 23:28:36 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.com/?p=834</guid>
  <description/>
  <content:encoded><![CDATA[Scott Petersen has put together three tutorials on getting started with <a href="http://supercollider.github.io/">SuperCollider</a>:

* <a href="http://scacinto.wordpress.com/2014/02/04/new-supercollider-on-xubuntu/">Installing SuperCollider on Ubuntu</a>
* <a href="http://scacinto.wordpress.com/2014/02/06/2294/">Installing SuperCollider on CrunchBang</a> (or #! as its fans like to call it)
* <a href="http://scacinto.wordpress.com/2014/02/24/intro-to-supercollider-3-for-the-uninitiated/">Intro to SuperCollider 3 for the Uninitiated</a>, where he walks through SuperCollider's capabilities &amp; updates.

I've been reading the new Manning book on <a href="http://chuck.cs.princeton.edu/">ChucK</a>, titled  <a href="http://www.manning.com/kapur/">Programming for Musicians and Digital Artists</a>, but I think ultimately I want to head to SuperCollider, and play more with <a href="http://overtone.github.io/">overtone</a>.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>834</wp:post_id>
  <wp:post_date>2014-02-28 19:28:36</wp:post_date>
  <wp:post_date_gmt>2014-02-28 23:28:36</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>supercollider-3-introductory-posts</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="generative-art-2"><![CDATA[Generative Art]]></category>
  <category domain="post_tag" nicename="supercollider-overtone-chuck-ubuntu-crunchbang"><![CDATA[supercollider overtone chuck ubuntu crunchbang]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[292320]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>10766</wp:comment_id>
    <wp:comment_author><![CDATA[scacinto]]></wp:comment_author>
    <wp:comment_author_email>scottericpetersen@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://www.scottericpetersen.com</wp:comment_author_url>
    <wp:comment_author_IP>50.177.241.205</wp:comment_author_IP>
    <wp:comment_date>2014-03-02 21:22:40</wp:comment_date>
    <wp:comment_date_gmt>2014-03-03 01:22:40</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Sounds like a good idea.  I gave a couple demos at both MakeHaven and Yale last semester.  Seems like meetup.com has been DDos'ed.  Hopefully it will be back up soon.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>10765</wp:comment_parent>
    <wp:comment_user_id>13618</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1393809761</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";d:1393809761.7805120944976806640625;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:8:"scacinto";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value>1393809762</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2014-03-03 01:22:40</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>10767</wp:comment_id>
    <wp:comment_author><![CDATA[Daniel Bernier]]></wp:comment_author>
    <wp:comment_author_email>danbernier@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://invisibleblocks.wordpress.com/</wp:comment_author_url>
    <wp:comment_author_IP>172.5.226.193</wp:comment_author_IP>
    <wp:comment_date>2014-03-02 21:32:02</wp:comment_date>
    <wp:comment_date_gmt>2014-03-03 01:32:02</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Oh that's right, I forgot about the DDos! IAC...]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>292320</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1393810322</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";d:1393810322.39962005615234375;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:11:"bonsaigiant";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value>1393810322</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2014-03-03 01:32:02</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>10764</wp:comment_id>
    <wp:comment_author><![CDATA[scacinto]]></wp:comment_author>
    <wp:comment_author_email>scottericpetersen@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://www.scottericpetersen.com</wp:comment_author_url>
    <wp:comment_author_IP>50.177.241.205</wp:comment_author_IP>
    <wp:comment_date>2014-03-02 14:32:37</wp:comment_date>
    <wp:comment_date_gmt>2014-03-02 18:32:37</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Hey Dan - thanks for the shout-out on the SuperCollider stuff.  Having worked with ChucK in the past, I can promise you moving to SC3 is in your future.  ;)  I see you are in the Haven as well.  We should get together at MakeHaven sometime for an audio-visual live jam.  I know a couple other people who do SC3 around town, but not so many who do Processing.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>13618</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1393785158</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";d:1393785158.489820957183837890625;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:8:"scacinto";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value>1393785159</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2014-03-02 18:32:37</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>10765</wp:comment_id>
    <wp:comment_author><![CDATA[Daniel Bernier]]></wp:comment_author>
    <wp:comment_author_email>danbernier@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://invisibleblocks.wordpress.com/</wp:comment_author_url>
    <wp:comment_author_IP>172.5.226.193</wp:comment_author_IP>
    <wp:comment_date>2014-03-02 15:55:03</wp:comment_date>
    <wp:comment_date_gmt>2014-03-02 19:55:03</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I'd love that! You should check out the Generative Art talks we've been having through NewHaven.io, too: http://www.meetup.com/newhavenio/events/168182842/ A SuperCollider demo would go down well.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>10764</wp:comment_parent>
    <wp:comment_user_id>292320</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1393790103</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";d:1393790103.881061077117919921875;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:11:"bonsaigiant";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value>1393790103</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2014-03-02 19:55:03</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Two Copyright-Free Photo Collections</title>
  <link>http://invisibleblocks.com/2014/03/03/two-copyright-free-photo-collections/</link>
  <pubDate>Mon, 03 Mar 2014 15:39:53 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.com/?p=845</guid>
  <description/>
  <content:encoded><![CDATA[<a href="{% post_url 2013-12-17-circle-pictures %}">I'm always looking for interesting photos to hack on</a>, so I was glad to find these two sources of free images, both via <a href="http://vormplus.be/blog/">Vormplus</a>.

<a href="http://nos.twnsnd.co/">New Old Stock</a>: "vintage photos from the public archives free of known copyright restrictions." Old photos with the fuzzy haze you'd expect. Some have no indication of age besides the color fading, but <a href="http://24.media.tumblr.com/70ef2f0668872fcc6df9f84b6f55e91b/tumblr_mztrt3pFAO1sfie3io1_1280.jpg">others</a> have elements that clearly mark them as old.

<a href="http://unsplash.com/">Unsplash</a>: "Free (do whatever you want) hi-resolution photos.  10 new photos every 10 days." You can subscribe via email, too.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>845</wp:post_id>
  <wp:post_date>2014-03-03 11:39:53</wp:post_date>
  <wp:post_date_gmt>2014-03-03 15:39:53</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>two-copyright-free-photo-collections</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="generative-art-2"><![CDATA[Generative Art]]></category>
  <category domain="category" nicename="processing"><![CDATA[Processing]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[292320]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>"A Little Ruby, a Lot of Objects," back on line</title>
  <link>http://invisibleblocks.com/2014/03/12/a-little-ruby-a-lot-of-objects-back-on-line/</link>
  <pubDate>Wed, 12 Mar 2014 13:56:07 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.com/?p=851</guid>
  <description/>
  <content:encoded><![CDATA[When I was first learning Ruby, one of the resources that helped me most was <a href="http://www.exampler.com">Brian Marick's</a> "A Little Ruby, a Lot of Objects." It's modeled after <a href="http://mitpress.mit.edu/books/little-schemer">The Little Schemer</a> (or, if you're older, <a href="http://books.google.com/books/about/The_little_LISPer.html?id=vbFQAAAAMAAJ">The Little LISPer</a>), but it uses Ruby, and teaches the core ideas of object-oriented programming in a way that helped me, even after I'd been doing OOP for 6 years. (I'm not surprised that his newer book, <a href="https://leanpub.com/fp-oo">Functional Programming for the Object-Oriented Programmer</a>, is just as illuminating.) The only thing I didn't like was that it stopped after only 55 pages.

My team is about to welcome a new junior intern, and when <a href="http://www.benjaminoakes.com">Ben</a> asked me for any learning resources I thought we should send, I suggested "A Little Ruby." I have the original PDFs, but we were planning to send an email with URLs, and that's when I realized that the book's site, visibleworkings.com/little-ruby, was down.

I asked Brian whether I could host the files, and <a href="https://twitter.com/marick/status/443705433388118017">he agreed</a> (thanks again!), so here they are:

<strong>A Little Ruby, A Lot of Objects</strong>

<a href="{{site.baseurl}}/assets/2014/03/FrontMatter.pdf">Front Matter</a>

"My goal is to teach you a way to think about computation, to show you how far you can take a simple idea: that all computation consists of sending messages to objects."

"The real reason for reading this book is that the ideas in it are <em>neat</em>."

<a href="{{site.baseurl}}/assets/2014/03/Chapter1.pdf">Chapter 1: We've Got Class...</a>

The First Message: <em>Computation is sending messages to objects.</em>

The Second Message: <em>Message names describe the desired result, independently of the object that provides it.</em>

The Third Message: <em>Classes provide interface and hide representation.</em>

<a href="{{site.baseurl}}/assets/2014/03/Chapter2.pdf">Chapter 2: ...We Get It From Others</a>

The Fourth Message: <em>Protocols group messages into coherent sets. If two different classes implement the same protocol, programs that depend only on that protocol can use them interchangeably.</em>

The Fifth Message: <em>Classes define protocols for their subclasses.</em>

The Sixth Message: <em>If a class and its superclass have methods with the same name, the class's methods take precedence.</em>

The Seventh Message: <em>Instance variables are always found in</em> self.

<a href="{{site.baseurl}}/assets/2014/03/Chapter3.pdf">Chapter 3: Turtles All The Way Down</a>

The Eighth Message: <em>Classes are objects with a protocol to create other objects</em>

The Ninth Message: <em>Methods are found by searching through lists of objects.</em>

The Tenth Message: <em>In computation, simple rules combine to allow complex possibilities</em>

The Eleventh Message: <em>Everything inherits from <code>Object</code>.</em>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>851</wp:post_id>
  <wp:post_date>2014-03-12 09:56:07</wp:post_date>
  <wp:post_date_gmt>2014-03-12 13:56:07</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>a-little-ruby-a-lot-of-objects-back-on-line</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="book-review"><![CDATA[Book Review]]></category>
  <category domain="category" nicename="programming"><![CDATA[Programming]]></category>
  <category domain="category" nicename="recommended-reading"><![CDATA[Recommended Reading]]></category>
  <category domain="post_tag" nicename="ruby"><![CDATA[Ruby]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[292320]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>"Computerless" Programming, via Golan Levin</title>
  <link>http://invisibleblocks.com/2014/06/26/computerless-programming-via-golan-levin/</link>
  <pubDate>Thu, 26 Jun 2014 13:29:52 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.com/?p=860</guid>
  <description/>
  <content:encoded><![CDATA[Golan Levin has posted his <a href="http://www.flong.com/blog/2014/computing-without-computers/">notes from the Code+Ed Session</a> on 2014-06-10 at the Eyeo Festival, on computing without computers.

The post is basically a list of links, but it's a great starting place for algorithmic drawing - a whole section is dedicated to it. Instead of using math and software to generate drawings, people use pen and paper, or tape and floor.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>860</wp:post_id>
  <wp:post_date>2014-06-26 09:29:52</wp:post_date>
  <wp:post_date_gmt>2014-06-26 13:29:52</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>computerless-programming-via-golan-levin</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="bookmark"><![CDATA[Bookmark]]></category>
  <category domain="category" nicename="generative-art-2"><![CDATA[Generative Art]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[292320]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Public Domain Pictures</title>
  <link>http://invisibleblocks.com/2014/07/12/public-domain-pictures/</link>
  <pubDate>Sat, 12 Jul 2014 22:09:24 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.com/?p=863</guid>
  <description/>
  <content:encoded><![CDATA[Maybe old news, but news to me: 4 collections of photos in the public domain, and they're not too bad:

* <a href="http://www.publicdomainpictures.net/">PublicDomainPictures.net</a>
* <a href="http://public-domain-photos.com/">Public-Domain-Photos.com</a>
* <a href="http://www.photos-public-domain.com/">Photos-Public-Domain.com</a>
* <a href="http://www.public-domain-image.com/">Public-Domain-Image.com</a>

Now this blog posts looks like it was generated by a spam-bot. :(

I haven't delved too deeply into these yet, but I will be in the future.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>863</wp:post_id>
  <wp:post_date>2014-07-12 18:09:24</wp:post_date>
  <wp:post_date_gmt>2014-07-12 22:09:24</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>public-domain-pictures</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="bookmark"><![CDATA[Bookmark]]></category>
  <category domain="category" nicename="generative-art-2"><![CDATA[Generative Art]]></category>
  <category domain="category" nicename="processing"><![CDATA[Processing]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[292320]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Circle Pictures Redux</title>
  <link>http://invisibleblocks.com/2014/09/29/circle-pictures-redux/</link>
  <pubDate>Tue, 30 Sep 2014 02:35:34 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.com/?p=869</guid>
  <description/>
  <content:encoded><![CDATA[Back in December, I posted some images I'd made by dropping non-overlapping circles on an image, larger or smaller based on the brightness of the underlying pixel at that spot. I called them <a href="{% post_url 2013-12-17-circle-pictures %}">Circle Pictures</a>.

At the time, I was happiest with the black-and-white images; I liked the color ones less. I think I've figured out how to make the color images work better; a lot of it comes down to picking the right kind of image to start with. (High-contrast images of recognizable objects works well, especially <a href="https://www.google.com/search?q=isolated+banana&amp;tbm=isch">isolated images</a>.) I also used a broader range of circle sizes, added borders, and played with how the circle size is decided: based on brightness, or saturation, or the amount of blue...any data in the pixel is fair game. The code is basically the same, so I won't bother re-posting it.

Here are some of the results, including a repeat of the sunflower images. I'll be showing prints of some of these, and some others like them, at <a href="http://www.cwos.org/" target="_blank">City Wide Open Studios</a> at the Armory space, October 11 and 12, if you'd like to see them up-close.

&lt;div class='gallery'&gt;
  <img src='{{ site.baseurl }}/assets/2014/09/sunflower2.png'>
  <img src='{{ site.baseurl }}/assets/2014/09/sunflower.png'>
  <img src='{{ site.baseurl }}/assets/2014/09/tree.png'>
  <img src='{{ site.baseurl }}/assets/2014/09/gorilla.png'>
  <img src='{{ site.baseurl }}/assets/2014/09/seaturtle.png'>
  <img src='{{ site.baseurl }}/assets/2014/09/underwater.png'>
  <img src='{{ site.baseurl }}/assets/2014/09/tropical-fish.png'>
  <img src='{{ site.baseurl }}/assets/2014/09/seahorse.png'>
&lt;/div&gt;

Here are the source images:

&lt;div class='gallery'&gt;
  <img src='{{ site.baseurl }}/assets/2014/09/sunflower21.png'>
  <img src='{{ site.baseurl }}/assets/2014/09/sunflower1.png'>
  <img src='{{ site.baseurl }}/assets/2014/09/tree1.png'>
  <img src='{{ site.baseurl }}/assets/2014/09/gorilla1.png'>
  <img src='{{ site.baseurl }}/assets/2014/09/seaturtle1.png'>
  <img src='{{ site.baseurl }}/assets/2014/09/underwater1.png'>
  <img src='{{ site.baseurl }}/assets/2014/09/tropical-fish1.png'>
  <img src='{{ site.baseurl }}/assets/2014/09/seahorse1.png'>
&lt;/div&gt;

<h2>Image Credits</h2>
The tree is my least-favorite outcome, but the source image is from <a href="http://johncbuchanan.blogspot.com/2011/11/oak-tree.html" target="_blank">John Buchanan's poetry site</a>. The gorilla source image is from <a href="http://www.rwanda-direct.com/rwanda-gorillas/" target="_blank">what looks like a Rwanda tourism site</a>. The sea turtle source image is by <a href="http://www.flickr.com/photos/digivangelist/425448593/" target="_blank">digivangelist</a>. The turtle with fish source image is from <a href="http://www.wallpapersak.com/" target="_blank">wallpapersak.com</a>. The yellow striped fish source image is by <a href="http://farzinphoto.com/" target="_blank">FarzinPhoto</a>. The sea horse source image is from this <a href="http://newswatch.nationalgeographic.com/2013/11/26/why-does-the-seahorse-have-its-odd-head-mystery-solved/" target="_blank">National Geographic article</a>.

&nbsp;]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>869</wp:post_id>
  <wp:post_date>2014-09-29 22:35:34</wp:post_date>
  <wp:post_date_gmt>2014-09-30 02:35:34</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>circle-pictures-redux</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="generative-art-2"><![CDATA[Generative Art]]></category>
  <category domain="category" nicename="processing"><![CDATA[Processing]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[292320]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>10770</wp:comment_id>
    <wp:comment_author><![CDATA[Jonathan Sun]]></wp:comment_author>
    <wp:comment_author_email>jonathan.f.sun@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>https://www.facebook.com/jonathan.sun</wp:comment_author_url>
    <wp:comment_author_IP>130.132.173.185</wp:comment_author_IP>
    <wp:comment_date>2014-10-13 01:00:34</wp:comment_date>
    <wp:comment_date_gmt>2014-10-13 05:00:34</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Hey Dan, we met during CWOS... I was the engineer who did the stairway installation. Do you have any images of those really graphic framed circle pieces online anywhere? Could you post those if possible? They were amazing!

Jonathan]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1413176434</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";d:1413176434.3901169300079345703125;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_post_as</wp:meta_key>
      <wp:meta_value>facebook</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_avatar</wp:meta_key>
      <wp:meta_value>http://graph.facebook.com/1658070869/picture?type=large</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_foreign_user_id</wp:meta_key>
      <wp:meta_value>1658070869</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value>1413176434</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2014-10-13 05:02:37</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>10772</wp:comment_id>
    <wp:comment_author><![CDATA[Daniel Bernier]]></wp:comment_author>
    <wp:comment_author_email>danbernier@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://invisibleblocks.wordpress.com/</wp:comment_author_url>
    <wp:comment_author_IP>50.195.40.233</wp:comment_author_IP>
    <wp:comment_date>2014-10-13 09:24:26</wp:comment_date>
    <wp:comment_date_gmt>2014-10-13 13:24:26</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Hi Jonathan! I've been meaning to get those posted here, but haven't yet. Thanks for the prodding! I will soon.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>10770</wp:comment_parent>
    <wp:comment_user_id>292320</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1413206666</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";d:1413206666.6861770153045654296875;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:11:"bonsaigiant";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value>2038586320</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value>1413206667</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2014-10-13 13:24:27</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>NewHaven.IO goes to the White House</title>
  <link>http://invisibleblocks.com/2015/04/16/newhaven-io-goes-to-the-white-house/</link>
  <pubDate>Thu, 16 Apr 2015 14:54:05 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.com/?p=888</guid>
  <description/>
  <content:encoded><![CDATA[President Obama has launched an initiative called TechHire.

You can read <a href="https://www.whitehouse.gov/issues/technology/techhire">the official version</a>, but here's my summary: there are lots of well-paying technology jobs, and not enough people to fill them. Those jobs could bring lower-income families firmly into the middle class, if only they could get the right skills. The jobs don't necessarily require a four-year degree; programs like <a href="http://flatironschool.com/">The Flatiron School</a> and <a href="https://generalassemb.ly/">General Assembly</a> teach people to program in months, and it seems to work: nearly all graduates are quickly hired. How can we get more people trained like this?

Part of the TechHire plan is to support "local tech community gatherings who can welcome these new students to their tech meet-ups." They've <a href="http://blog.meetup.com/new-tech-hire-initiative/">partnered with Meetup.com</a>, and Meetup reached out to growing tech-oriented Meetups - including <a href="http://newhaven.io">NewHaven.IO</a>.

Tomorrow, they're holding a <a href="https://www.whitehouse.gov/blog/2015/04/14/friday-tech-meetup-white-house-0">Tech Meetup at the White House</a>, for the organizers of about 30 tech meetups to share stories, and learn from each other - and NewHaven.IO will be there. If you'd like, you can watch <a href="http://www.whitehouse.gov/live">a livestream of the event</a>.

As one of NewHaven.IO's founders and organizers, I'm happy that we've gained enough traction to be noticed. As the current organizer of <a href="http://www.meetup.com/newhavenio/">the NewHaven.io Meetup.com group</a>, I'm excited to attend the White House tech meetup. This is my first time running such a successful volunteer organization, so, while I'm ready to share the lessons we've learned, I'm eager to learn from the other organizers, to hear what's worked for them, and how they've served their community, so we can make NewHaven.IO even better.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>888</wp:post_id>
  <wp:post_date>2015-04-16 10:54:05</wp:post_date>
  <wp:post_date_gmt>2015-04-16 14:54:05</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>newhaven-io-goes-to-the-white-house</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="new-haven-ruby"><![CDATA[New Haven Ruby]]></category>
  <category domain="category" nicename="newhaven-io"><![CDATA[NewHaven.IO]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[292320]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>How to Enable Mouse Wheel Support in controlP5 on Processing 2.2</title>
  <link>http://invisibleblocks.com/2015/05/07/how-to-enable-mouse-wheel-support-in-controlp5-on-processing-2-2/</link>
  <pubDate>Thu, 07 May 2015 11:23:08 +0000</pubDate>
  <dc:creator>bonsaigiant</dc:creator>
  <guid isPermaLink="false">http://invisibleblocks.com/?p=911</guid>
  <description/>
  <content:encoded><![CDATA[I'm finally using <a href="http://www.sojamo.de/libraries/controlP5/">controlP5</a> in earnest, and I noticed that two-finger trackpad scrolling over a knob didn't dial the knob, like I'd hoped it would. (Thanks to <a href="http://www.benjaminoakes.com/">Ben Oakes</a>, again, for showing me - just yesterday afternoon - that Ubuntu's volume icon supports this. That was the trigger that got me wondering about this.)

It turns out controlP5 <em>does</em> let you turn knobs with the mouse wheel, but, for some reason, it's disabled by default. There's an example sketch, "ControlP5mouseWheel", that shows how to enable it, but it doesn't work for me with Processing 2.2. The problematic part is the <code>addMouseWheelListener()</code> callback that mucks with <code>java.awt.event</code> stuff.

Here's a Processing 2.2-style mouseWheel callback event that gets us back to turning knobs by scrolling:

[sourcecode language="java"]
// When working in desktop mode, you can add mousewheel 
// support for controlP5 by using Processing 2.2's built-in 
// support:
void mouseWheel(MouseEvent e) {
  // Processing's `getCount()` returns 1 when the mouseWheel 
  // is rotated down, and -1 when the mouseWheel is rotated 
  // up. Natural scrolling reverses this, so you need to 
  // negate the count value. Try removing the negation, if 
  // the scrolling is backwards for you.
  cp5.setMouseWheelRotation(-e.getCount());
}
[/sourcecode]

While I was at it, I noticed that controlP5 is still hosted on the retired google-code platform, <a href="https://github.com/danbernier/controlp5/">so I exported it to my github account</a>. I expect <a href="http://www.sojamo.de/">Andreas</a> will export it to his own soon enough, and I can fork his version then, and merge in <a href="https://github.com/danbernier/controlp5/commit/46e173c6fa51ba70a1bace80e492f343a6dc9862?w=1">my update to the ControlP5mouseWheel example sketch</a>.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>911</wp:post_id>
  <wp:post_date>2015-05-07 07:23:08</wp:post_date>
  <wp:post_date_gmt>2015-05-07 11:23:08</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>how-to-enable-mouse-wheel-support-in-controlp5-on-processing-2-2</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="open-source"><![CDATA[Open Source]]></category>
  <category domain="category" nicename="processing"><![CDATA[Processing]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[292320]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
  </channel>
</rss>
